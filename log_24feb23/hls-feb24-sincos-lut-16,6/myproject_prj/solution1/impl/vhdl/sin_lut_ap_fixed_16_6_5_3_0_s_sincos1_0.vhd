-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity sin_lut_ap_fixed_16_6_5_3_0_s_sincos1_0_rom is 
    generic(
             DWIDTH     : integer := 11; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of sin_lut_ap_fixed_16_6_5_3_0_s_sincos1_0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 20=> "10000000000", 21 to 35=> "01111111111", 36 to 45=> "01111111110", 
    46 to 53=> "01111111101", 54 to 61=> "01111111100", 62 to 67=> "01111111011", 
    68 to 73=> "01111111010", 74 to 78=> "01111111001", 79 to 84=> "01111111000", 
    85 to 88=> "01111110111", 89 to 93=> "01111110110", 94 to 97=> "01111110101", 
    98 to 101=> "01111110100", 102 to 105=> "01111110011", 106 to 109=> "01111110010", 
    110 to 113=> "01111110001", 114 to 117=> "01111110000", 118 to 120=> "01111101111", 
    121 to 124=> "01111101110", 125 to 127=> "01111101101", 128 to 130=> "01111101100", 
    131 to 133=> "01111101011", 134 to 136=> "01111101010", 137 to 139=> "01111101001", 
    140 to 142=> "01111101000", 143 to 145=> "01111100111", 146 to 148=> "01111100110", 
    149 to 151=> "01111100101", 152 to 154=> "01111100100", 155 to 156=> "01111100011", 
    157 to 159=> "01111100010", 160 to 162=> "01111100001", 163 to 164=> "01111100000", 
    165 to 167=> "01111011111", 168 to 169=> "01111011110", 170 to 172=> "01111011101", 
    173 to 174=> "01111011100", 175 to 176=> "01111011011", 177 to 179=> "01111011010", 
    180 to 181=> "01111011001", 182 to 183=> "01111011000", 184 to 186=> "01111010111", 
    187 to 188=> "01111010110", 189 to 190=> "01111010101", 191 to 192=> "01111010100", 
    193 to 195=> "01111010011", 196 to 197=> "01111010010", 198 to 199=> "01111010001", 
    200 to 201=> "01111010000", 202 to 203=> "01111001111", 204 to 205=> "01111001110", 
    206 to 207=> "01111001101", 208 to 209=> "01111001100", 210 to 211=> "01111001011", 
    212 to 213=> "01111001010", 214 to 215=> "01111001001", 216 to 217=> "01111001000", 
    218 to 219=> "01111000111", 220 to 221=> "01111000110", 222 to 223=> "01111000101", 
    224 to 225=> "01111000100", 226 to 227=> "01111000011", 228 => "01111000010", 
    229 to 230=> "01111000001", 231 to 232=> "01111000000", 233 to 234=> "01110111111", 
    235 to 236=> "01110111110", 237 to 238=> "01110111101", 239 => "01110111100", 
    240 to 241=> "01110111011", 242 to 243=> "01110111010", 244 to 245=> "01110111001", 
    246 => "01110111000", 247 to 248=> "01110110111", 249 to 250=> "01110110110", 
    251 => "01110110101", 252 to 253=> "01110110100", 254 to 255=> "01110110011", 
    256 => "01110110010", 257 to 258=> "01110110001", 259 to 260=> "01110110000", 
    261 => "01110101111", 262 to 263=> "01110101110", 264 to 265=> "01110101101", 
    266 => "01110101100", 267 to 268=> "01110101011", 269 => "01110101010", 
    270 to 271=> "01110101001", 272 to 273=> "01110101000", 274 => "01110100111", 
    275 to 276=> "01110100110", 277 => "01110100101", 278 to 279=> "01110100100", 
    280 => "01110100011", 281 to 282=> "01110100010", 283 => "01110100001", 
    284 to 285=> "01110100000", 286 => "01110011111", 287 to 288=> "01110011110", 
    289 => "01110011101", 290 to 291=> "01110011100", 292 => "01110011011", 
    293 to 294=> "01110011010", 295 => "01110011001", 296 to 297=> "01110011000", 
    298 => "01110010111", 299 => "01110010110", 300 to 301=> "01110010101", 
    302 => "01110010100", 303 to 304=> "01110010011", 305 => "01110010010", 
    306 to 307=> "01110010001", 308 => "01110010000", 309 => "01110001111", 
    310 to 311=> "01110001110", 312 => "01110001101", 313 => "01110001100", 
    314 to 315=> "01110001011", 316 => "01110001010", 317 to 318=> "01110001001", 
    319 => "01110001000", 320 => "01110000111", 321 to 322=> "01110000110", 
    323 => "01110000101", 324 => "01110000100", 325 to 326=> "01110000011", 
    327 => "01110000010", 328 => "01110000001", 329 to 330=> "01110000000", 
    331 => "01101111111", 332 => "01101111110", 333 to 334=> "01101111101", 
    335 => "01101111100", 336 => "01101111011", 337 => "01101111010", 
    338 to 339=> "01101111001", 340 => "01101111000", 341 => "01101110111", 
    342 => "01101110110", 343 to 344=> "01101110101", 345 => "01101110100", 
    346 => "01101110011", 347 to 348=> "01101110010", 349 => "01101110001", 
    350 => "01101110000", 351 => "01101101111", 352 to 353=> "01101101110", 
    354 => "01101101101", 355 => "01101101100", 356 => "01101101011", 
    357 => "01101101010", 358 to 359=> "01101101001", 360 => "01101101000", 
    361 => "01101100111", 362 => "01101100110", 363 => "01101100101", 
    364 to 365=> "01101100100", 366 => "01101100011", 367 => "01101100010", 
    368 => "01101100001", 369 => "01101100000", 370 to 371=> "01101011111", 
    372 => "01101011110", 373 => "01101011101", 374 => "01101011100", 
    375 => "01101011011", 376 => "01101011010", 377 to 378=> "01101011001", 
    379 => "01101011000", 380 => "01101010111", 381 => "01101010110", 
    382 => "01101010101", 383 => "01101010100", 384 to 385=> "01101010011", 
    386 => "01101010010", 387 => "01101010001", 388 => "01101010000", 
    389 => "01101001111", 390 => "01101001110", 391 => "01101001101", 
    392 => "01101001100", 393 to 394=> "01101001011", 395 => "01101001010", 
    396 => "01101001001", 397 => "01101001000", 398 => "01101000111", 
    399 => "01101000110", 400 => "01101000101", 401 => "01101000100", 
    402 => "01101000011", 403 to 404=> "01101000010", 405 => "01101000001", 
    406 => "01101000000", 407 => "01100111111", 408 => "01100111110", 
    409 => "01100111101", 410 => "01100111100", 411 => "01100111011", 
    412 => "01100111010", 413 => "01100111001", 414 => "01100111000", 
    415 => "01100110111", 416 to 417=> "01100110110", 418 => "01100110101", 
    419 => "01100110100", 420 => "01100110011", 421 => "01100110010", 
    422 => "01100110001", 423 => "01100110000", 424 => "01100101111", 
    425 => "01100101110", 426 => "01100101101", 427 => "01100101100", 
    428 => "01100101011", 429 => "01100101010", 430 => "01100101001", 
    431 => "01100101000", 432 => "01100100111", 433 => "01100100110", 
    434 => "01100100101", 435 => "01100100100", 436 => "01100100011", 
    437 => "01100100010", 438 => "01100100001", 439 => "01100100000", 
    440 => "01100011111", 441 to 442=> "01100011110", 443 => "01100011101", 
    444 => "01100011100", 445 => "01100011011", 446 => "01100011010", 
    447 => "01100011001", 448 => "01100011000", 449 => "01100010111", 
    450 => "01100010110", 451 => "01100010101", 452 => "01100010100", 
    453 => "01100010011", 454 => "01100010010", 455 => "01100010001", 
    456 => "01100010000", 457 => "01100001111", 458 => "01100001110", 
    459 => "01100001100", 460 => "01100001011", 461 => "01100001010", 
    462 => "01100001001", 463 => "01100001000", 464 => "01100000111", 
    465 => "01100000110", 466 => "01100000101", 467 => "01100000100", 
    468 => "01100000011", 469 => "01100000010", 470 => "01100000001", 
    471 => "01100000000", 472 => "01011111111", 473 => "01011111110", 
    474 => "01011111101", 475 => "01011111100", 476 => "01011111011", 
    477 => "01011111010", 478 => "01011111001", 479 => "01011111000", 
    480 => "01011110111", 481 => "01011110110", 482 => "01011110101", 
    483 => "01011110100", 484 => "01011110011", 485 => "01011110001", 
    486 => "01011110000", 487 => "01011101111", 488 => "01011101110", 
    489 => "01011101101", 490 => "01011101100", 491 => "01011101011", 
    492 => "01011101010", 493 => "01011101001", 494 => "01011101000", 
    495 => "01011100111", 496 => "01011100110", 497 => "01011100101", 
    498 => "01011100011", 499 => "01011100010", 500 => "01011100001", 
    501 => "01011100000", 502 => "01011011111", 503 => "01011011110", 
    504 => "01011011101", 505 => "01011011100", 506 => "01011011011", 
    507 => "01011011010", 508 => "01011011001", 509 => "01011010111", 
    510 => "01011010110", 511 => "01011010101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity sin_lut_ap_fixed_16_6_5_3_0_s_sincos1_0 is
    generic (
        DataWidth : INTEGER := 11;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of sin_lut_ap_fixed_16_6_5_3_0_s_sincos1_0 is
    component sin_lut_ap_fixed_16_6_5_3_0_s_sincos1_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    sin_lut_ap_fixed_16_6_5_3_0_s_sincos1_0_rom_U :  component sin_lut_ap_fixed_16_6_5_3_0_s_sincos1_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


