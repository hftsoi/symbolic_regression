-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (175 downto 0);
    y_0_V : OUT STD_LOGIC_VECTOR (10 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (10 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (10 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (10 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (10 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.217800,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=15,HLS_SYN_FF=473,HLS_SYN_LUT=830,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv176_lc_1 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_7E0 : STD_LOGIC_VECTOR (10 downto 0) := "11111100000";
    constant ap_const_lv32_9A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011010";
    constant ap_const_lv32_A4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_A5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100101";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv13_1AD8 : STD_LOGIC_VECTOR (12 downto 0) := "1101011011000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv21_7820 : STD_LOGIC_VECTOR (20 downto 0) := "000000111100000100000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv12_FFB : STD_LOGIC_VECTOR (11 downto 0) := "111111111011";
    constant ap_const_lv12_67 : STD_LOGIC_VECTOR (11 downto 0) := "000001100111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv13_11 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010001";
    constant ap_const_lv14_3E0 : STD_LOGIC_VECTOR (13 downto 0) := "00001111100000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv21_B96C : STD_LOGIC_VECTOR (20 downto 0) := "000001011100101101100";
    constant ap_const_lv36_3C1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001111000001";
    constant ap_const_lv37_1900000000 : STD_LOGIC_VECTOR (36 downto 0) := "1100100000000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv41_1FFFFFFFC3F : STD_LOGIC_VECTOR (40 downto 0) := "11111111111111111111111111111110000111111";
    constant ap_const_lv41_1F840000000 : STD_LOGIC_VECTOR (40 downto 0) := "11111100001000000000000000000000000000000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv46_210000000000 : STD_LOGIC_VECTOR (45 downto 0) := "1000010000000000000000000000000000000000000000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv16_FFEB : STD_LOGIC_VECTOR (15 downto 0) := "1111111111101011";
    constant ap_const_lv25_3F9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001111111001";
    constant ap_const_lv27_19 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000011001";
    constant ap_const_lv35_271 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001001110001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_preg : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (175 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal trunc_ln_reg_699 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln_reg_699_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_fu_376_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_reg_704 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_8_fu_646_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_8_reg_710 : STD_LOGIC_VECTOR (21 downto 0);
    signal ret_V_6_fu_424_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_6_reg_715 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_638_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln700_1_reg_720 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_10_fu_652_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_10_reg_725 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_12_fu_658_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_12_reg_730 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln728_fu_664_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln728_reg_735 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1116_fu_498_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln1116_reg_740 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_678_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln700_reg_745 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln700_1_fu_523_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal mul_ln700_1_reg_750 : STD_LOGIC_VECTOR (40 downto 0);
    signal r_V_13_fu_686_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_13_reg_755 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_Val2_8_fu_182_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_fu_196_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1118_fu_192_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_1_fu_204_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_3_fu_214_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln1118_1_fu_228_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1118_2_fu_224_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_3_fu_236_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_15_fu_208_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_16_fu_240_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln703_fu_246_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln703_1_fu_250_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_2_fu_260_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_17_fu_270_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln703_2_fu_278_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_5_fu_282_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1192_fu_292_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_fu_310_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1118_5_fu_306_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1118_6_fu_318_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_18_fu_322_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_12_fu_254_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_V_fu_332_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_7_fu_328_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln700_fu_340_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln700_fu_344_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ret_V_13_fu_350_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_fu_366_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_14_fu_370_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal rhs_V_2_fu_404_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_6_fu_420_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln728_1_fu_416_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_11_fu_382_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_V_1_fu_392_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal rhs_V_fu_434_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_16_fu_438_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_3_fu_444_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_V_8_fu_448_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln703_4_fu_458_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl5_fu_461_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln703_fu_468_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_4_fu_474_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_5_fu_670_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_fu_487_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln1116_fu_484_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln1116_1_fu_494_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln700_1_fu_523_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln700_1_fu_523_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal lhs_V_4_fu_529_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal ret_V_10_fu_536_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_19_fu_546_p0 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_19_fu_546_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln1192_fu_551_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal ret_V_15_fu_555_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_1_fu_561_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln700_2_fu_583_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal shl_ln700_1_fu_576_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln700_1_fu_588_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal ret_V_17_fu_594_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal r_V_20_fu_692_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1192_2_fu_614_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal ret_V_18_fu_617_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_2_fu_623_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_8_fu_646_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_7_fu_302_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_8_fu_646_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_10_fu_652_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_9_fu_430_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_10_fu_652_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_12_fu_658_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_11_fu_454_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_12_fu_658_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln728_fu_664_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_5_fu_670_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_678_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_13_fu_686_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_20_fu_692_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mac_mulsub_11s_11s_16s_21_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component myproject_mul_mul_11s_11s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_mul_mul_13s_13s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mul_mul_11s_6s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_mul_mul_14s_11ns_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component myproject_mac_mulsub_22s_17s_31ns_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component myproject_mul_mul_21s_6ns_27_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (20 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component myproject_mul_mul_27s_11ns_35_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (26 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;



begin
    myproject_mac_mulsub_11s_11s_16s_21_1_1_U1 : component myproject_mac_mulsub_11s_11s_16s_21_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        din2_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        din0 => p_Val2_2_fu_260_p4,
        din1 => p_Val2_2_fu_260_p4,
        din2 => rhs_V_2_fu_404_p3,
        dout => grp_fu_638_p3);

    myproject_mul_mul_11s_11s_22_1_1_U2 : component myproject_mul_mul_11s_11s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        din0 => r_V_8_fu_646_p0,
        din1 => r_V_8_fu_646_p1,
        dout => r_V_8_fu_646_p2);

    myproject_mul_mul_11s_11s_22_1_1_U3 : component myproject_mul_mul_11s_11s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        din0 => r_V_10_fu_652_p0,
        din1 => r_V_10_fu_652_p1,
        dout => r_V_10_fu_652_p2);

    myproject_mul_mul_13s_13s_26_1_1_U4 : component myproject_mul_mul_13s_13s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        dout_WIDTH => 26)
    port map (
        din0 => r_V_12_fu_658_p0,
        din1 => r_V_12_fu_658_p1,
        dout => r_V_12_fu_658_p2);

    myproject_mul_mul_11s_6s_16_1_1_U5 : component myproject_mul_mul_11s_6s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => p_Val2_2_fu_260_p4,
        din1 => mul_ln728_fu_664_p1,
        dout => mul_ln728_fu_664_p2);

    myproject_mul_mul_14s_11ns_25_1_1_U6 : component myproject_mul_mul_14s_11ns_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 11,
        dout_WIDTH => 25)
    port map (
        din0 => ret_V_4_fu_474_p2,
        din1 => r_V_5_fu_670_p1,
        dout => r_V_5_fu_670_p2);

    myproject_mac_mulsub_22s_17s_31ns_31_1_1_U7 : component myproject_mac_mulsub_22s_17s_31ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 17,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => r_V_8_reg_710,
        din1 => ret_V_6_reg_715,
        din2 => grp_fu_678_p2,
        dout => grp_fu_678_p3);

    myproject_mul_mul_21s_6ns_27_1_1_U8 : component myproject_mul_mul_21s_6ns_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 21,
        din1_WIDTH => 6,
        dout_WIDTH => 27)
    port map (
        din0 => ret_V_10_fu_536_p2,
        din1 => r_V_13_fu_686_p1,
        dout => r_V_13_fu_686_p2);

    myproject_mul_mul_27s_11ns_35_1_1_U9 : component myproject_mul_mul_27s_11ns_35_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 27,
        din1_WIDTH => 11,
        dout_WIDTH => 35)
    port map (
        din0 => r_V_13_reg_755,
        din1 => r_V_20_fu_692_p1,
        dout => r_V_20_fu_692_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv176_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1116_reg_740 <= add_ln1116_fu_498_p2;
                mul_ln700_1_reg_750 <= mul_ln700_1_fu_523_p2;
                mul_ln728_reg_735 <= mul_ln728_fu_664_p2;
                r_V_10_reg_725 <= r_V_10_fu_652_p2;
                r_V_12_reg_730 <= r_V_12_fu_658_p2;
                r_V_13_reg_755 <= r_V_13_fu_686_p2;
                r_V_8_reg_710 <= r_V_8_fu_646_p2;
                ret_V_6_reg_715 <= ret_V_6_fu_424_p2;
                ret_V_reg_704 <= ret_V_fu_376_p2;
                trunc_ln_reg_699 <= ret_V_13_fu_350_p2(20 downto 10);
                trunc_ln_reg_699_pp0_iter1_reg <= trunc_ln_reg_699;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sub_ln700_1_reg_720 <= grp_fu_638_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sub_ln700_reg_745 <= grp_fu_678_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1116_fu_498_p2 <= std_logic_vector(signed(sext_ln1116_fu_484_p1) + signed(sext_ln1116_1_fu_494_p1));
    add_ln1192_fu_292_p2 <= std_logic_vector(signed(sext_ln703_2_fu_278_p1) + signed(ap_const_lv13_1AD8));
    add_ln700_1_fu_588_p2 <= std_logic_vector(unsigned(mul_ln700_2_fu_583_p2) + unsigned(shl_ln700_1_fu_576_p3));
    add_ln700_fu_344_p2 <= std_logic_vector(signed(sext_ln1118_7_fu_328_p1) + signed(sext_ln700_fu_340_p1));
    add_ln703_fu_468_p2 <= std_logic_vector(signed(sext_ln703_4_fu_458_p1) + signed(p_shl5_fu_461_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_678_p2 <= (sub_ln700_1_reg_720 & ap_const_lv10_0);
        lhs_V_1_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_8_fu_182_p4),12));

        lhs_V_3_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_16_fu_438_p2),13));

    lhs_V_4_fu_529_p3 <= (mul_ln728_reg_735 & ap_const_lv5_0);
    lhs_V_fu_332_p3 <= (ret_V_12_fu_254_p2 & ap_const_lv5_0);
    mul_ln700_1_fu_523_p0 <= r_V_10_reg_725;
    mul_ln700_1_fu_523_p1 <= r_V_12_reg_730;
    mul_ln700_1_fu_523_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_1_fu_523_p0) * signed(mul_ln700_1_fu_523_p1))), 41));
    mul_ln700_2_fu_583_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_1_reg_750) * signed(ap_const_lv41_1FFFFFFFC3F))), 41));
    mul_ln728_fu_664_p1 <= ap_const_lv16_FFEB(6 - 1 downto 0);
    p_Val2_11_fu_382_p4 <= x_V_in_sig(43 downto 33);
    p_Val2_2_fu_260_p4 <= x_V_in_sig(175 downto 165);
    p_Val2_3_fu_214_p4 <= x_V_in_sig(54 downto 44);
    p_Val2_5_fu_282_p4 <= x_V_in_sig(32 downto 22);
    p_Val2_8_fu_182_p4 <= x_V_in_sig(164 downto 154);
    p_shl5_fu_461_p3 <= (ret_V_reg_704 & ap_const_lv2_0);
    r_V_10_fu_652_p0 <= r_V_9_fu_430_p1(11 - 1 downto 0);
    r_V_10_fu_652_p1 <= r_V_9_fu_430_p1(11 - 1 downto 0);
        r_V_11_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_8_fu_448_p2),26));

    r_V_12_fu_658_p0 <= r_V_11_fu_454_p1(13 - 1 downto 0);
    r_V_12_fu_658_p1 <= r_V_11_fu_454_p1(13 - 1 downto 0);
    r_V_13_fu_686_p1 <= ap_const_lv27_19(6 - 1 downto 0);
    r_V_15_fu_208_p2 <= std_logic_vector(signed(sext_ln1118_fu_192_p1) + signed(sext_ln1118_1_fu_204_p1));
    r_V_16_fu_240_p2 <= std_logic_vector(signed(sext_ln1118_2_fu_224_p1) + signed(sext_ln1118_3_fu_236_p1));
    r_V_17_fu_270_p3 <= (p_Val2_2_fu_260_p4 & ap_const_lv1_0);
    r_V_18_fu_322_p2 <= std_logic_vector(signed(sext_ln1118_5_fu_306_p1) - signed(sext_ln1118_6_fu_318_p1));
    r_V_19_fu_546_p0 <= add_ln1116_reg_740(28 - 1 downto 0);
    r_V_19_fu_546_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_19_fu_546_p0) * signed('0' &ap_const_lv36_3C1))), 36));
    r_V_20_fu_692_p1 <= ap_const_lv35_271(11 - 1 downto 0);
    r_V_5_fu_670_p1 <= ap_const_lv25_3F9(11 - 1 downto 0);
        r_V_7_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_fu_282_p4),22));

    r_V_8_fu_646_p0 <= r_V_7_fu_302_p1(11 - 1 downto 0);
    r_V_8_fu_646_p1 <= r_V_7_fu_302_p1(11 - 1 downto 0);
        r_V_9_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_11_fu_382_p4),22));

        r_V_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_fu_260_p4),12));

    ret_V_10_fu_536_p2 <= std_logic_vector(unsigned(lhs_V_4_fu_529_p3) + unsigned(ap_const_lv21_B96C));
    ret_V_12_fu_254_p2 <= std_logic_vector(signed(sext_ln703_fu_246_p1) - signed(sext_ln703_1_fu_250_p1));
    ret_V_13_fu_350_p2 <= std_logic_vector(unsigned(add_ln700_fu_344_p2) + unsigned(ap_const_lv21_7820));
    ret_V_14_fu_370_p2 <= std_logic_vector(signed(ap_const_lv12_FFB) - signed(r_V_fu_366_p1));
    ret_V_15_fu_555_p2 <= std_logic_vector(signed(sext_ln1192_fu_551_p1) + signed(ap_const_lv37_1900000000));
    ret_V_16_fu_438_p2 <= std_logic_vector(signed(lhs_V_1_fu_392_p1) - signed(rhs_V_fu_434_p1));
    ret_V_17_fu_594_p2 <= std_logic_vector(unsigned(add_ln700_1_fu_588_p2) + unsigned(ap_const_lv41_1F840000000));
    ret_V_18_fu_617_p2 <= std_logic_vector(signed(sext_ln1192_2_fu_614_p1) + signed(ap_const_lv46_210000000000));
    ret_V_4_fu_474_p2 <= std_logic_vector(unsigned(add_ln703_fu_468_p2) + unsigned(ap_const_lv14_3E0));
    ret_V_6_fu_424_p2 <= std_logic_vector(signed(sext_ln703_6_fu_420_p1) + signed(sext_ln728_1_fu_416_p1));
    ret_V_8_fu_448_p2 <= std_logic_vector(signed(lhs_V_3_fu_444_p1) + signed(ap_const_lv13_11));
    ret_V_fu_376_p2 <= std_logic_vector(unsigned(ret_V_14_fu_370_p2) + unsigned(ap_const_lv12_67));
    rhs_V_2_fu_404_p3 <= (p_Val2_2_fu_260_p4 & ap_const_lv5_0);
        rhs_V_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_3_fu_214_p4),12));

        sext_ln1116_1_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_487_p3),36));

        sext_ln1116_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_fu_670_p2),36));

        sext_ln1118_1_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_196_p3),14));

        sext_ln1118_2_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_3_fu_214_p4),14));

        sext_ln1118_3_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_1_fu_228_p3),14));

        sext_ln1118_5_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1192_fu_292_p2),19));

        sext_ln1118_6_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_310_p3),19));

        sext_ln1118_7_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_18_fu_322_p2),21));

        sext_ln1118_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_8_fu_182_p4),14));

        sext_ln1192_2_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_20_fu_692_p2),46));

        sext_ln1192_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_19_fu_546_p2),37));

        sext_ln700_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_332_p3),21));

        sext_ln703_1_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_16_fu_240_p2),15));

        sext_ln703_2_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_17_fu_270_p3),13));

        sext_ln703_4_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_reg_704),14));

        sext_ln703_6_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_16_fu_240_p2),17));

        sext_ln703_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_15_fu_208_p2),15));

        sext_ln728_1_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_2_fu_404_p3),17));

    shl_ln1118_1_fu_228_p3 <= (p_Val2_3_fu_214_p4 & ap_const_lv2_0);
    shl_ln700_1_fu_576_p3 <= (sub_ln700_reg_745 & ap_const_lv10_0);
    shl_ln_fu_196_p3 <= (p_Val2_8_fu_182_p4 & ap_const_lv2_0);
    tmp_1_fu_561_p4 <= ret_V_15_fu_555_p2(36 downto 30);
    tmp_2_fu_623_p4 <= ret_V_18_fu_617_p2(45 downto 40);
    tmp_3_fu_310_p3 <= (add_ln1192_fu_292_p2 & ap_const_lv5_0);
    tmp_fu_487_p3 <= (r_V_5_fu_670_p2 & ap_const_lv2_0);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, x_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V_ap_vld, x_V, x_V_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

    y_0_V <= trunc_ln_reg_699_pp0_iter1_reg;

    y_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        y_1_V <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_561_p4),11));


    y_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= ret_V_17_fu_594_p2(40 downto 30);

    y_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        y_3_V <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_623_p4),11));


    y_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= ap_const_lv11_7E0;

    y_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
