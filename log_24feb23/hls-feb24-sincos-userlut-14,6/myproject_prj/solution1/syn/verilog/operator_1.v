// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module operator_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        n_V,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [13:0] n_V;
output  [6:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] cos_lut_samples_V_address0;
reg    cos_lut_samples_V_ce0;
wire   [6:0] cos_lut_samples_V_q0;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln57_fu_187_p1;
wire  signed [14:0] lhs_V_fu_59_p1;
wire   [14:0] ret_V_fu_63_p2;
wire   [12:0] tmp_fu_69_p4;
wire   [1:0] trunc_ln851_fu_91_p1;
wire   [11:0] p_Result_4_fu_95_p3;
wire  signed [13:0] sext_ln835_fu_79_p1;
wire   [0:0] icmp_ln851_fu_103_p2;
wire   [13:0] ret_V_1_fu_109_p2;
wire   [0:0] tmp_1_fu_83_p3;
wire   [13:0] select_ln851_fu_115_p3;
wire   [13:0] select_ln850_fu_123_p3;
wire   [3:0] tmp_3_fu_143_p4;
wire   [0:0] tmp_2_fu_135_p3;
wire   [0:0] xor_ln55_fu_159_p2;
wire   [0:0] icmp_ln56_fu_153_p2;
wire   [0:0] or_ln55_fu_173_p2;
wire   [9:0] select_ln55_fu_165_p3;
wire   [9:0] trunc_ln54_fu_131_p1;
wire   [9:0] select_ln55_1_fu_179_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

operator_1_cos_lut_samples_V #(
    .DataWidth( 7 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
cos_lut_samples_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cos_lut_samples_V_address0),
    .ce0(cos_lut_samples_V_ce0),
    .q0(cos_lut_samples_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cos_lut_samples_V_ce0 = 1'b1;
    end else begin
        cos_lut_samples_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = cos_lut_samples_V_q0;

assign cos_lut_samples_V_address0 = zext_ln57_fu_187_p1;

assign icmp_ln56_fu_153_p2 = ((tmp_3_fu_143_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_103_p2 = ((p_Result_4_fu_95_p3 == 12'd0) ? 1'b1 : 1'b0);

assign lhs_V_fu_59_p1 = $signed(n_V);

assign or_ln55_fu_173_p2 = (tmp_2_fu_135_p3 | icmp_ln56_fu_153_p2);

assign p_Result_4_fu_95_p3 = {{trunc_ln851_fu_91_p1}, {10'd0}};

assign ret_V_1_fu_109_p2 = ($signed(14'd1) + $signed(sext_ln835_fu_79_p1));

assign ret_V_fu_63_p2 = ($signed(15'd2048) + $signed(lhs_V_fu_59_p1));

assign select_ln55_1_fu_179_p3 = ((or_ln55_fu_173_p2[0:0] === 1'b1) ? select_ln55_fu_165_p3 : trunc_ln54_fu_131_p1);

assign select_ln55_fu_165_p3 = ((xor_ln55_fu_159_p2[0:0] === 1'b1) ? 10'd1023 : 10'd0);

assign select_ln850_fu_123_p3 = ((tmp_1_fu_83_p3[0:0] === 1'b1) ? select_ln851_fu_115_p3 : sext_ln835_fu_79_p1);

assign select_ln851_fu_115_p3 = ((icmp_ln851_fu_103_p2[0:0] === 1'b1) ? sext_ln835_fu_79_p1 : ret_V_1_fu_109_p2);

assign sext_ln835_fu_79_p1 = $signed(tmp_fu_69_p4);

assign tmp_1_fu_83_p3 = ret_V_fu_63_p2[32'd14];

assign tmp_2_fu_135_p3 = select_ln850_fu_123_p3[32'd13];

assign tmp_3_fu_143_p4 = {{select_ln850_fu_123_p3[13:10]}};

assign tmp_fu_69_p4 = {{ret_V_fu_63_p2[14:2]}};

assign trunc_ln54_fu_131_p1 = select_ln850_fu_123_p3[9:0];

assign trunc_ln851_fu_91_p1 = ret_V_fu_63_p2[1:0];

assign xor_ln55_fu_159_p2 = (tmp_2_fu_135_p3 ^ 1'd1);

assign zext_ln57_fu_187_p1 = select_ln55_1_fu_179_p3;

endmodule //operator_1
