-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (143 downto 0);
    y_0_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.054750,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=170,HLS_SYN_LUT=430,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv144_lc_1 : STD_LOGIC_VECTOR (143 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_1F9 : STD_LOGIC_VECTOR (8 downto 0) := "111111001";
    constant ap_const_lv9_1F8 : STD_LOGIC_VECTOR (8 downto 0) := "111111000";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv14_3B8 : STD_LOGIC_VECTOR (13 downto 0) := "00001110111000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv10_18 : STD_LOGIC_VECTOR (9 downto 0) := "0000011000";
    constant ap_const_lv10_38 : STD_LOGIC_VECTOR (9 downto 0) := "0000111000";
    constant ap_const_lv15_2F0 : STD_LOGIC_VECTOR (14 downto 0) := "000001011110000";
    constant ap_const_lv29_18000000 : STD_LOGIC_VECTOR (28 downto 0) := "11000000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv17_39 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000111001";
    constant ap_const_lv27_3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000011";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv27_7E40000 : STD_LOGIC_VECTOR (26 downto 0) := "111111001000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_preg : STD_LOGIC_VECTOR (143 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (143 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_reg_371 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_3_fu_257_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_3_reg_376 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_reg_381 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_Val2_4_fu_147_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_1_fu_157_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_1_fu_167_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln703_1_fu_171_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_s_fu_181_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_195_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1118_1_fu_203_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1118_fu_207_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_fu_191_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_6_fu_175_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_V_fu_219_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln728_fu_227_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_7_fu_231_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_fu_247_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_fu_251_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_3_fu_213_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_2_fu_263_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1192_fu_271_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1192_2_fu_277_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal ret_V_9_fu_281_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_2_fu_304_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_2_fu_304_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_fu_314_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1192_fu_310_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln1192_1_fu_322_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln1192_fu_326_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1192_fu_332_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln1192_3_fu_338_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1192_2_fu_344_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ret_V_8_fu_350_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv144_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ret_V_3_reg_376 <= ret_V_3_fu_257_p2;
                tmp_2_reg_381 <= ret_V_9_fu_281_p2(28 downto 24);
                tmp_reg_371 <= ret_V_7_fu_231_p2(13 downto 6);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1192_2_fu_344_p2 <= std_logic_vector(unsigned(sub_ln1192_fu_326_p2) + unsigned(sub_ln1192_3_fu_338_p2));
    add_ln1192_fu_271_p2 <= std_logic_vector(unsigned(lhs_V_2_fu_263_p3) + unsigned(ap_const_lv15_2F0));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_1_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_fu_147_p4),10));

    lhs_V_2_fu_263_p3 <= (r_V_3_fu_213_p2 & ap_const_lv3_0);
    lhs_V_fu_219_p3 <= (ret_V_6_fu_175_p2 & ap_const_lv3_0);
    p_Val2_1_fu_157_p4 <= x_V_in_sig(44 downto 36);
    p_Val2_4_fu_147_p4 <= x_V_in_sig(134 downto 126);
    p_Val2_s_fu_181_p4 <= x_V_in_sig(143 downto 135);
    r_V_2_fu_304_p0 <= ret_V_3_reg_376;
    r_V_2_fu_304_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_2_fu_304_p0) * signed('0' &ap_const_lv17_39))), 17));
    r_V_3_fu_213_p2 <= std_logic_vector(unsigned(sub_ln1118_fu_207_p2) - unsigned(sext_ln1118_fu_191_p1));
        r_V_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_fu_181_p4),10));

    ret_V_3_fu_257_p2 <= std_logic_vector(unsigned(ret_V_fu_251_p2) + unsigned(ap_const_lv10_38));
    ret_V_6_fu_175_p2 <= std_logic_vector(signed(lhs_V_1_fu_167_p1) - signed(sext_ln703_1_fu_171_p1));
    ret_V_7_fu_231_p2 <= std_logic_vector(signed(sext_ln728_fu_227_p1) + signed(ap_const_lv14_3B8));
    ret_V_8_fu_350_p2 <= std_logic_vector(unsigned(add_ln1192_2_fu_344_p2) + unsigned(ap_const_lv27_7E40000));
    ret_V_9_fu_281_p2 <= std_logic_vector(signed(sext_ln1192_2_fu_277_p1) + signed(ap_const_lv29_18000000));
    ret_V_fu_251_p2 <= std_logic_vector(unsigned(ap_const_lv10_18) - unsigned(r_V_fu_247_p1));
        sext_ln1118_1_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_195_p3),12));

        sext_ln1118_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_fu_181_p4),12));

        sext_ln1192_1_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_314_p3),27));

        sext_ln1192_2_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1192_fu_271_p2),29));

        sext_ln1192_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_fu_304_p2),27));

        sext_ln703_1_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_fu_157_p4),10));

        sext_ln728_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_219_p3),14));

    shl_ln1192_fu_332_p2 <= std_logic_vector(shift_left(unsigned(sub_ln1192_fu_326_p2),to_integer(unsigned('0' & ap_const_lv27_3(27-1 downto 0)))));
    shl_ln_fu_195_p3 <= (p_Val2_s_fu_181_p4 & ap_const_lv2_0);
    sub_ln1118_fu_207_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sext_ln1118_1_fu_203_p1));
    sub_ln1192_3_fu_338_p2 <= std_logic_vector(unsigned(ap_const_lv27_0) - unsigned(shl_ln1192_fu_332_p2));
    sub_ln1192_fu_326_p2 <= std_logic_vector(signed(sext_ln1192_fu_310_p1) - signed(sext_ln1192_1_fu_322_p1));
    tmp_1_fu_314_p3 <= (r_V_2_fu_304_p2 & ap_const_lv3_0);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, x_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V_ap_vld, x_V, x_V_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

        y_0_V <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_reg_371),9));


    y_0_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_V <= ret_V_8_fu_350_p2(26 downto 18);

    y_1_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= ap_const_lv9_1F9;

    y_2_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        y_3_V <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_381),9));


    y_3_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= ap_const_lv9_1F8;

    y_4_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
