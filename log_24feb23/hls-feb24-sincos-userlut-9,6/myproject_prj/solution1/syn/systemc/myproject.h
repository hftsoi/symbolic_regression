// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _myproject_HH_
#define _myproject_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct myproject : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > x_V_ap_vld;
    sc_in< sc_lv<144> > x_V;
    sc_out< sc_lv<9> > y_0_V;
    sc_out< sc_logic > y_0_V_ap_vld;
    sc_out< sc_lv<9> > y_1_V;
    sc_out< sc_logic > y_1_V_ap_vld;
    sc_out< sc_lv<9> > y_2_V;
    sc_out< sc_logic > y_2_V_ap_vld;
    sc_out< sc_lv<9> > y_3_V;
    sc_out< sc_logic > y_3_V_ap_vld;
    sc_out< sc_lv<9> > y_4_V;
    sc_out< sc_logic > y_4_V_ap_vld;


    // Module declarations
    myproject(sc_module_name name);
    SC_HAS_PROCESS(myproject);

    ~myproject();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > x_V_ap_vld_in_sig;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<144> > x_V_preg;
    sc_signal< sc_lv<144> > x_V_in_sig;
    sc_signal< sc_logic > x_V_ap_vld_preg;
    sc_signal< sc_logic > x_V_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<8> > tmp_reg_371;
    sc_signal< sc_lv<10> > ret_V_3_fu_257_p2;
    sc_signal< sc_lv<10> > ret_V_3_reg_376;
    sc_signal< sc_lv<5> > tmp_2_reg_381;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<9> > p_Val2_4_fu_147_p4;
    sc_signal< sc_lv<9> > p_Val2_1_fu_157_p4;
    sc_signal< sc_lv<10> > lhs_V_1_fu_167_p1;
    sc_signal< sc_lv<10> > sext_ln703_1_fu_171_p1;
    sc_signal< sc_lv<9> > p_Val2_s_fu_181_p4;
    sc_signal< sc_lv<11> > shl_ln_fu_195_p3;
    sc_signal< sc_lv<12> > sext_ln1118_1_fu_203_p1;
    sc_signal< sc_lv<12> > sub_ln1118_fu_207_p2;
    sc_signal< sc_lv<12> > sext_ln1118_fu_191_p1;
    sc_signal< sc_lv<10> > ret_V_6_fu_175_p2;
    sc_signal< sc_lv<13> > lhs_V_fu_219_p3;
    sc_signal< sc_lv<14> > sext_ln728_fu_227_p1;
    sc_signal< sc_lv<14> > ret_V_7_fu_231_p2;
    sc_signal< sc_lv<10> > r_V_fu_247_p1;
    sc_signal< sc_lv<10> > ret_V_fu_251_p2;
    sc_signal< sc_lv<12> > r_V_3_fu_213_p2;
    sc_signal< sc_lv<15> > lhs_V_2_fu_263_p3;
    sc_signal< sc_lv<15> > add_ln1192_fu_271_p2;
    sc_signal< sc_lv<29> > sext_ln1192_2_fu_277_p1;
    sc_signal< sc_lv<29> > ret_V_9_fu_281_p2;
    sc_signal< sc_lv<10> > r_V_2_fu_304_p0;
    sc_signal< sc_lv<17> > r_V_2_fu_304_p2;
    sc_signal< sc_lv<20> > tmp_1_fu_314_p3;
    sc_signal< sc_lv<27> > sext_ln1192_fu_310_p1;
    sc_signal< sc_lv<27> > sext_ln1192_1_fu_322_p1;
    sc_signal< sc_lv<27> > sub_ln1192_fu_326_p2;
    sc_signal< sc_lv<27> > shl_ln1192_fu_332_p2;
    sc_signal< sc_lv<27> > sub_ln1192_3_fu_338_p2;
    sc_signal< sc_lv<27> > add_ln1192_2_fu_344_p2;
    sc_signal< sc_lv<27> > ret_V_8_fu_350_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<144> ap_const_lv144_lc_1;
    static const sc_lv<9> ap_const_lv9_1F9;
    static const sc_lv<9> ap_const_lv9_1F8;
    static const sc_lv<32> ap_const_lv32_7E;
    static const sc_lv<32> ap_const_lv32_86;
    static const sc_lv<32> ap_const_lv32_24;
    static const sc_lv<32> ap_const_lv32_2C;
    static const sc_lv<32> ap_const_lv32_87;
    static const sc_lv<32> ap_const_lv32_8F;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<14> ap_const_lv14_3B8;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<10> ap_const_lv10_18;
    static const sc_lv<10> ap_const_lv10_38;
    static const sc_lv<15> ap_const_lv15_2F0;
    static const sc_lv<29> ap_const_lv29_18000000;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1C;
    static const sc_lv<17> ap_const_lv17_39;
    static const sc_lv<27> ap_const_lv27_3;
    static const sc_lv<27> ap_const_lv27_0;
    static const sc_lv<27> ap_const_lv27_7E40000;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_1A;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln1192_2_fu_344_p2();
    void thread_add_ln1192_fu_271_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_lhs_V_1_fu_167_p1();
    void thread_lhs_V_2_fu_263_p3();
    void thread_lhs_V_fu_219_p3();
    void thread_p_Val2_1_fu_157_p4();
    void thread_p_Val2_4_fu_147_p4();
    void thread_p_Val2_s_fu_181_p4();
    void thread_r_V_2_fu_304_p0();
    void thread_r_V_2_fu_304_p2();
    void thread_r_V_3_fu_213_p2();
    void thread_r_V_fu_247_p1();
    void thread_ret_V_3_fu_257_p2();
    void thread_ret_V_6_fu_175_p2();
    void thread_ret_V_7_fu_231_p2();
    void thread_ret_V_8_fu_350_p2();
    void thread_ret_V_9_fu_281_p2();
    void thread_ret_V_fu_251_p2();
    void thread_sext_ln1118_1_fu_203_p1();
    void thread_sext_ln1118_fu_191_p1();
    void thread_sext_ln1192_1_fu_322_p1();
    void thread_sext_ln1192_2_fu_277_p1();
    void thread_sext_ln1192_fu_310_p1();
    void thread_sext_ln703_1_fu_171_p1();
    void thread_sext_ln728_fu_227_p1();
    void thread_shl_ln1192_fu_332_p2();
    void thread_shl_ln_fu_195_p3();
    void thread_sub_ln1118_fu_207_p2();
    void thread_sub_ln1192_3_fu_338_p2();
    void thread_sub_ln1192_fu_326_p2();
    void thread_tmp_1_fu_314_p3();
    void thread_x_V_ap_vld_in_sig();
    void thread_x_V_blk_n();
    void thread_x_V_in_sig();
    void thread_y_0_V();
    void thread_y_0_V_ap_vld();
    void thread_y_1_V();
    void thread_y_1_V_ap_vld();
    void thread_y_2_V();
    void thread_y_2_V_ap_vld();
    void thread_y_3_V();
    void thread_y_3_V_ap_vld();
    void thread_y_4_V();
    void thread_y_4_V_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
