// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.054750,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=170,HLS_SYN_LUT=430,HLS_VERSION=2020_1}" *)

module myproject (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V_ap_vld,
        x_V,
        y_0_V,
        y_0_V_ap_vld,
        y_1_V,
        y_1_V_ap_vld,
        y_2_V,
        y_2_V_ap_vld,
        y_3_V,
        y_3_V_ap_vld,
        y_4_V,
        y_4_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   x_V_ap_vld;
input  [143:0] x_V;
output  [8:0] y_0_V;
output   y_0_V_ap_vld;
output  [8:0] y_1_V;
output   y_1_V_ap_vld;
output  [8:0] y_2_V;
output   y_2_V_ap_vld;
output  [8:0] y_3_V;
output   y_3_V_ap_vld;
output  [8:0] y_4_V;
output   y_4_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_0_V_ap_vld;
reg y_1_V_ap_vld;
reg y_2_V_ap_vld;
reg y_3_V_ap_vld;
reg y_4_V_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    x_V_ap_vld_in_sig;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [143:0] x_V_preg;
reg   [143:0] x_V_in_sig;
reg    x_V_ap_vld_preg;
reg    x_V_blk_n;
wire    ap_block_pp0_stage0;
reg   [7:0] tmp_reg_371;
wire   [9:0] ret_V_3_fu_257_p2;
reg   [9:0] ret_V_3_reg_376;
reg   [4:0] tmp_2_reg_381;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] p_Val2_4_fu_147_p4;
wire   [8:0] p_Val2_1_fu_157_p4;
wire  signed [9:0] lhs_V_1_fu_167_p1;
wire  signed [9:0] sext_ln703_1_fu_171_p1;
wire  signed [8:0] p_Val2_s_fu_181_p4;
wire   [10:0] shl_ln_fu_195_p3;
wire  signed [11:0] sext_ln1118_1_fu_203_p1;
wire   [11:0] sub_ln1118_fu_207_p2;
wire  signed [11:0] sext_ln1118_fu_191_p1;
wire   [9:0] ret_V_6_fu_175_p2;
wire   [12:0] lhs_V_fu_219_p3;
wire  signed [13:0] sext_ln728_fu_227_p1;
wire   [13:0] ret_V_7_fu_231_p2;
wire  signed [9:0] r_V_fu_247_p1;
wire   [9:0] ret_V_fu_251_p2;
wire   [11:0] r_V_3_fu_213_p2;
wire   [14:0] lhs_V_2_fu_263_p3;
wire   [14:0] add_ln1192_fu_271_p2;
wire  signed [28:0] sext_ln1192_2_fu_277_p1;
wire   [28:0] ret_V_9_fu_281_p2;
wire  signed [9:0] r_V_2_fu_304_p0;
wire  signed [16:0] r_V_2_fu_304_p2;
wire   [19:0] tmp_1_fu_314_p3;
wire  signed [26:0] sext_ln1192_fu_310_p1;
wire  signed [26:0] sext_ln1192_1_fu_322_p1;
wire   [26:0] sub_ln1192_fu_326_p2;
wire   [26:0] shl_ln1192_fu_332_p2;
wire   [26:0] sub_ln1192_3_fu_338_p2;
wire   [26:0] add_ln1192_2_fu_344_p2;
wire   [26:0] ret_V_8_fu_350_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 x_V_preg = 144'd0;
#0 x_V_ap_vld_preg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_V_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_V_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (x_V_ap_vld == 1'b1))) begin
            x_V_ap_vld_preg <= x_V_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_V_preg <= 144'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (x_V_ap_vld == 1'b1))) begin
            x_V_preg <= x_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ret_V_3_reg_376 <= ret_V_3_fu_257_p2;
        tmp_2_reg_381 <= {{ret_V_9_fu_281_p2[28:24]}};
        tmp_reg_371 <= {{ret_V_7_fu_231_p2[13:6]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((x_V_ap_vld == 1'b1)) begin
        x_V_ap_vld_in_sig = x_V_ap_vld;
    end else begin
        x_V_ap_vld_in_sig = x_V_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_V_blk_n = x_V_ap_vld;
    end else begin
        x_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x_V_ap_vld == 1'b1)) begin
        x_V_in_sig = x_V;
    end else begin
        x_V_in_sig = x_V_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_0_V_ap_vld = 1'b1;
    end else begin
        y_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_1_V_ap_vld = 1'b1;
    end else begin
        y_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_2_V_ap_vld = 1'b1;
    end else begin
        y_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_3_V_ap_vld = 1'b1;
    end else begin
        y_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_4_V_ap_vld = 1'b1;
    end else begin
        y_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_2_fu_344_p2 = (sub_ln1192_fu_326_p2 + sub_ln1192_3_fu_338_p2);

assign add_ln1192_fu_271_p2 = (lhs_V_2_fu_263_p3 + 15'd752);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign lhs_V_1_fu_167_p1 = $signed(p_Val2_4_fu_147_p4);

assign lhs_V_2_fu_263_p3 = {{r_V_3_fu_213_p2}, {3'd0}};

assign lhs_V_fu_219_p3 = {{ret_V_6_fu_175_p2}, {3'd0}};

assign p_Val2_1_fu_157_p4 = {{x_V_in_sig[44:36]}};

assign p_Val2_4_fu_147_p4 = {{x_V_in_sig[134:126]}};

assign p_Val2_s_fu_181_p4 = {{x_V_in_sig[143:135]}};

assign r_V_2_fu_304_p0 = ret_V_3_reg_376;

assign r_V_2_fu_304_p2 = ($signed(r_V_2_fu_304_p0) * $signed('h39));

assign r_V_3_fu_213_p2 = ($signed(sub_ln1118_fu_207_p2) - $signed(sext_ln1118_fu_191_p1));

assign r_V_fu_247_p1 = p_Val2_s_fu_181_p4;

assign ret_V_3_fu_257_p2 = (ret_V_fu_251_p2 + 10'd56);

assign ret_V_6_fu_175_p2 = ($signed(lhs_V_1_fu_167_p1) - $signed(sext_ln703_1_fu_171_p1));

assign ret_V_7_fu_231_p2 = ($signed(sext_ln728_fu_227_p1) + $signed(14'd952));

assign ret_V_8_fu_350_p2 = ($signed(add_ln1192_2_fu_344_p2) + $signed(27'd132382720));

assign ret_V_9_fu_281_p2 = ($signed(sext_ln1192_2_fu_277_p1) + $signed(29'd402653184));

assign ret_V_fu_251_p2 = ($signed(10'd24) - $signed(r_V_fu_247_p1));

assign sext_ln1118_1_fu_203_p1 = $signed(shl_ln_fu_195_p3);

assign sext_ln1118_fu_191_p1 = p_Val2_s_fu_181_p4;

assign sext_ln1192_1_fu_322_p1 = $signed(tmp_1_fu_314_p3);

assign sext_ln1192_2_fu_277_p1 = $signed(add_ln1192_fu_271_p2);

assign sext_ln1192_fu_310_p1 = r_V_2_fu_304_p2;

assign sext_ln703_1_fu_171_p1 = $signed(p_Val2_1_fu_157_p4);

assign sext_ln728_fu_227_p1 = $signed(lhs_V_fu_219_p3);

assign shl_ln1192_fu_332_p2 = sub_ln1192_fu_326_p2 << 27'd3;

assign shl_ln_fu_195_p3 = {{p_Val2_s_fu_181_p4}, {2'd0}};

assign sub_ln1118_fu_207_p2 = ($signed(12'd0) - $signed(sext_ln1118_1_fu_203_p1));

assign sub_ln1192_3_fu_338_p2 = (27'd0 - shl_ln1192_fu_332_p2);

assign sub_ln1192_fu_326_p2 = ($signed(sext_ln1192_fu_310_p1) - $signed(sext_ln1192_1_fu_322_p1));

assign tmp_1_fu_314_p3 = {{r_V_2_fu_304_p2}, {3'd0}};

assign y_0_V = $signed(tmp_reg_371);

assign y_1_V = {{ret_V_8_fu_350_p2[26:18]}};

assign y_2_V = 9'd505;

assign y_3_V = $signed(tmp_2_reg_381);

assign y_4_V = 9'd504;

endmodule //myproject
