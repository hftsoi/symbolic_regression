// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.054875,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=199,HLS_SYN_LUT=417,HLS_VERSION=2020_1}" *)

module myproject (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V_ap_vld,
        x_V,
        y_0_V,
        y_0_V_ap_vld,
        y_1_V,
        y_1_V_ap_vld,
        y_2_V,
        y_2_V_ap_vld,
        y_3_V,
        y_3_V_ap_vld,
        y_4_V,
        y_4_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   x_V_ap_vld;
input  [159:0] x_V;
output  [9:0] y_0_V;
output   y_0_V_ap_vld;
output  [9:0] y_1_V;
output   y_1_V_ap_vld;
output  [9:0] y_2_V;
output   y_2_V_ap_vld;
output  [9:0] y_3_V;
output   y_3_V_ap_vld;
output  [9:0] y_4_V;
output   y_4_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_0_V_ap_vld;
reg y_1_V_ap_vld;
reg y_2_V_ap_vld;
reg y_3_V_ap_vld;
reg y_4_V_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    x_V_ap_vld_in_sig;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [159:0] x_V_preg;
reg   [159:0] x_V_in_sig;
reg    x_V_ap_vld_preg;
reg    x_V_blk_n;
wire    ap_block_pp0_stage0;
reg   [8:0] tmp_3_reg_482;
wire  signed [20:0] r_V_4_fu_476_p2;
reg  signed [20:0] r_V_4_reg_487;
reg   [5:0] tmp_6_reg_493;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] tmp_fu_167_p4;
wire   [9:0] tmp_1_fu_185_p4;
wire   [10:0] r_V_6_fu_177_p3;
wire   [10:0] r_V_7_fu_195_p3;
wire  signed [11:0] sext_ln703_fu_203_p1;
wire  signed [11:0] sext_ln703_1_fu_207_p1;
wire  signed [9:0] p_Val2_2_fu_217_p4;
wire  signed [10:0] r_V_fu_227_p1;
wire  signed [10:0] add_ln1192_fu_231_p2;
wire   [14:0] tmp_2_fu_241_p3;
wire  signed [15:0] sext_ln1118_fu_237_p1;
wire  signed [15:0] sext_ln1118_3_fu_249_p1;
wire   [15:0] r_V_8_fu_253_p2;
wire   [11:0] ret_V_7_fu_211_p2;
wire   [15:0] lhs_V_fu_263_p3;
wire  signed [16:0] sext_ln1118_4_fu_259_p1;
wire  signed [16:0] sext_ln728_fu_271_p1;
wire   [16:0] add_ln700_fu_275_p2;
wire   [16:0] ret_V_8_fu_281_p2;
wire   [10:0] ret_V_9_fu_297_p2;
wire   [10:0] ret_V_fu_303_p2;
wire   [11:0] mul_ln_fu_309_p3;
wire   [12:0] shl_ln_fu_323_p3;
wire  signed [11:0] ret_V_4_fu_317_p2;
wire  signed [13:0] sext_ln1118_1_fu_331_p1;
wire   [10:0] shl_ln1118_3_fu_345_p3;
wire   [13:0] sub_ln1118_fu_339_p2;
wire  signed [13:0] sext_ln1118_2_fu_353_p1;
wire   [13:0] r_V_9_fu_357_p2;
wire   [17:0] lhs_V_1_fu_363_p3;
wire   [17:0] add_ln1192_4_fu_371_p2;
wire   [23:0] tmp_7_fu_377_p3;
wire  signed [37:0] sext_ln1192_2_fu_385_p1;
wire   [37:0] ret_V_11_fu_389_p2;
wire   [21:0] tmp_4_fu_409_p3;
wire   [25:0] tmp_5_fu_420_p3;
wire  signed [33:0] sext_ln1192_fu_416_p1;
wire  signed [33:0] sext_ln1192_1_fu_427_p1;
wire   [33:0] sub_ln1192_fu_431_p2;
wire   [33:0] shl_ln1192_fu_437_p2;
wire   [33:0] sub_ln1192_2_fu_443_p2;
wire   [33:0] add_ln1192_3_fu_449_p2;
wire   [33:0] ret_V_10_fu_455_p2;
wire   [8:0] r_V_4_fu_476_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 x_V_preg = 160'd0;
#0 x_V_ap_vld_preg = 1'b0;
end

myproject_mul_mul_12s_9ns_21_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 21 ))
myproject_mul_mul_12s_9ns_21_1_1_U1(
    .din0(ret_V_4_fu_317_p2),
    .din1(r_V_4_fu_476_p1),
    .dout(r_V_4_fu_476_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_V_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_V_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (x_V_ap_vld == 1'b1))) begin
            x_V_ap_vld_preg <= x_V_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_V_preg <= 160'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (x_V_ap_vld == 1'b1))) begin
            x_V_preg <= x_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_V_4_reg_487 <= r_V_4_fu_476_p2;
        tmp_3_reg_482 <= {{ret_V_8_fu_281_p2[16:8]}};
        tmp_6_reg_493 <= {{ret_V_11_fu_389_p2[37:32]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((x_V_ap_vld == 1'b1)) begin
        x_V_ap_vld_in_sig = x_V_ap_vld;
    end else begin
        x_V_ap_vld_in_sig = x_V_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_V_blk_n = x_V_ap_vld;
    end else begin
        x_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x_V_ap_vld == 1'b1)) begin
        x_V_in_sig = x_V;
    end else begin
        x_V_in_sig = x_V_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_0_V_ap_vld = 1'b1;
    end else begin
        y_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_1_V_ap_vld = 1'b1;
    end else begin
        y_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_2_V_ap_vld = 1'b1;
    end else begin
        y_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_3_V_ap_vld = 1'b1;
    end else begin
        y_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_4_V_ap_vld = 1'b1;
    end else begin
        y_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_3_fu_449_p2 = (sub_ln1192_fu_431_p2 + sub_ln1192_2_fu_443_p2);

assign add_ln1192_4_fu_371_p2 = (lhs_V_1_fu_363_p3 + 18'd5846);

assign add_ln1192_fu_231_p2 = ($signed(r_V_fu_227_p1) + $signed(11'd1711));

assign add_ln700_fu_275_p2 = ($signed(sext_ln1118_4_fu_259_p1) + $signed(sext_ln728_fu_271_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign lhs_V_1_fu_363_p3 = {{r_V_9_fu_357_p2}, {4'd0}};

assign lhs_V_fu_263_p3 = {{ret_V_7_fu_211_p2}, {4'd0}};

assign mul_ln_fu_309_p3 = {{ret_V_fu_303_p2}, {1'd0}};

assign p_Val2_2_fu_217_p4 = {{x_V_in_sig[159:150]}};

assign r_V_4_fu_476_p1 = 21'd244;

assign r_V_6_fu_177_p3 = {{tmp_fu_167_p4}, {1'd0}};

assign r_V_7_fu_195_p3 = {{tmp_1_fu_185_p4}, {1'd0}};

assign r_V_8_fu_253_p2 = ($signed(sext_ln1118_fu_237_p1) - $signed(sext_ln1118_3_fu_249_p1));

assign r_V_9_fu_357_p2 = ($signed(sub_ln1118_fu_339_p2) - $signed(sext_ln1118_2_fu_353_p1));

assign r_V_fu_227_p1 = p_Val2_2_fu_217_p4;

assign ret_V_10_fu_455_p2 = ($signed(add_ln1192_3_fu_449_p2) + $signed(34'd16944988160));

assign ret_V_11_fu_389_p2 = ($signed(sext_ln1192_2_fu_385_p1) + $signed(38'd206158430208));

assign ret_V_4_fu_317_p2 = (mul_ln_fu_309_p3 + 12'd240);

assign ret_V_7_fu_211_p2 = ($signed(sext_ln703_fu_203_p1) - $signed(sext_ln703_1_fu_207_p1));

assign ret_V_8_fu_281_p2 = (add_ln700_fu_275_p2 + 17'd3600);

assign ret_V_9_fu_297_p2 = ($signed(11'd2046) - $signed(r_V_fu_227_p1));

assign ret_V_fu_303_p2 = (ret_V_9_fu_297_p2 + 11'd51);

assign sext_ln1118_1_fu_331_p1 = $signed(shl_ln_fu_323_p3);

assign sext_ln1118_2_fu_353_p1 = $signed(shl_ln1118_3_fu_345_p3);

assign sext_ln1118_3_fu_249_p1 = $signed(tmp_2_fu_241_p3);

assign sext_ln1118_4_fu_259_p1 = $signed(r_V_8_fu_253_p2);

assign sext_ln1118_fu_237_p1 = add_ln1192_fu_231_p2;

assign sext_ln1192_1_fu_427_p1 = $signed(tmp_5_fu_420_p3);

assign sext_ln1192_2_fu_385_p1 = $signed(tmp_7_fu_377_p3);

assign sext_ln1192_fu_416_p1 = $signed(tmp_4_fu_409_p3);

assign sext_ln703_1_fu_207_p1 = $signed(r_V_7_fu_195_p3);

assign sext_ln703_fu_203_p1 = $signed(r_V_6_fu_177_p3);

assign sext_ln728_fu_271_p1 = $signed(lhs_V_fu_263_p3);

assign shl_ln1118_3_fu_345_p3 = {{p_Val2_2_fu_217_p4}, {1'd0}};

assign shl_ln1192_fu_437_p2 = sub_ln1192_fu_431_p2 << 34'd4;

assign shl_ln_fu_323_p3 = {{p_Val2_2_fu_217_p4}, {3'd0}};

assign sub_ln1118_fu_339_p2 = ($signed(14'd0) - $signed(sext_ln1118_1_fu_331_p1));

assign sub_ln1192_2_fu_443_p2 = (34'd0 - shl_ln1192_fu_437_p2);

assign sub_ln1192_fu_431_p2 = ($signed(sext_ln1192_fu_416_p1) - $signed(sext_ln1192_1_fu_427_p1));

assign tmp_1_fu_185_p4 = {{x_V_in_sig[49:40]}};

assign tmp_2_fu_241_p3 = {{add_ln1192_fu_231_p2}, {4'd0}};

assign tmp_4_fu_409_p3 = {{r_V_4_reg_487}, {1'd0}};

assign tmp_5_fu_420_p3 = {{r_V_4_reg_487}, {5'd0}};

assign tmp_7_fu_377_p3 = {{add_ln1192_4_fu_371_p2}, {6'd0}};

assign tmp_fu_167_p4 = {{x_V_in_sig[149:140]}};

assign y_0_V = $signed(tmp_3_reg_482);

assign y_1_V = {{ret_V_10_fu_455_p2[33:24]}};

assign y_2_V = 10'd1009;

assign y_3_V = $signed(tmp_6_reg_493);

assign y_4_V = 10'd1008;

endmodule //myproject
