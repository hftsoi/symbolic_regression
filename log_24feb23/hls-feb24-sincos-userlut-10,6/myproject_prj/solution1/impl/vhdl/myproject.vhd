-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (159 downto 0);
    y_0_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.054875,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=199,HLS_SYN_LUT=417,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv160_lc_1 : STD_LOGIC_VECTOR (159 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv10_3F1 : STD_LOGIC_VECTOR (9 downto 0) := "1111110001";
    constant ap_const_lv10_3F0 : STD_LOGIC_VECTOR (9 downto 0) := "1111110000";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv11_6AF : STD_LOGIC_VECTOR (10 downto 0) := "11010101111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv17_E10 : STD_LOGIC_VECTOR (16 downto 0) := "00000111000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv11_7FE : STD_LOGIC_VECTOR (10 downto 0) := "11111111110";
    constant ap_const_lv11_33 : STD_LOGIC_VECTOR (10 downto 0) := "00000110011";
    constant ap_const_lv12_F0 : STD_LOGIC_VECTOR (11 downto 0) := "000011110000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv18_16D6 : STD_LOGIC_VECTOR (17 downto 0) := "000001011011010110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv38_3000000000 : STD_LOGIC_VECTOR (37 downto 0) := "11000000000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv34_4 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000100";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv34_3F2000000 : STD_LOGIC_VECTOR (33 downto 0) := "1111110010000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv21_F4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000011110100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_preg : STD_LOGIC_VECTOR (159 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (159 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_3_reg_482 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_4_fu_476_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_4_reg_487 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_6_reg_493 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_167_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_185_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_6_fu_177_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_7_fu_195_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln703_fu_203_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln703_1_fu_207_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_2_fu_217_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_fu_227_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1192_fu_231_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_241_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1118_fu_237_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_3_fu_249_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_8_fu_253_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_7_fu_211_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_fu_263_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_4_fu_259_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln728_fu_271_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln700_fu_275_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_8_fu_281_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_9_fu_297_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_fu_303_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln_fu_309_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_323_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_V_4_fu_317_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_1_fu_331_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln1118_3_fu_345_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1118_fu_339_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_2_fu_353_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_9_fu_357_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lhs_V_1_fu_363_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln1192_4_fu_371_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_7_fu_377_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_2_fu_385_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal ret_V_11_fu_389_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_4_fu_409_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_5_fu_420_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1192_fu_416_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln1192_1_fu_427_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln1192_fu_431_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal shl_ln1192_fu_437_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln1192_2_fu_443_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln1192_3_fu_449_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal ret_V_10_fu_455_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_4_fu_476_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mul_mul_12s_9ns_21_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;



begin
    myproject_mul_mul_12s_9ns_21_1_1_U1 : component myproject_mul_mul_12s_9ns_21_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 9,
        dout_WIDTH => 21)
    port map (
        din0 => ret_V_4_fu_317_p2,
        din1 => r_V_4_fu_476_p1,
        dout => r_V_4_fu_476_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv160_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                r_V_4_reg_487 <= r_V_4_fu_476_p2;
                tmp_3_reg_482 <= ret_V_8_fu_281_p2(16 downto 8);
                tmp_6_reg_493 <= ret_V_11_fu_389_p2(37 downto 32);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1192_3_fu_449_p2 <= std_logic_vector(unsigned(sub_ln1192_fu_431_p2) + unsigned(sub_ln1192_2_fu_443_p2));
    add_ln1192_4_fu_371_p2 <= std_logic_vector(unsigned(lhs_V_1_fu_363_p3) + unsigned(ap_const_lv18_16D6));
    add_ln1192_fu_231_p2 <= std_logic_vector(signed(r_V_fu_227_p1) + signed(ap_const_lv11_6AF));
    add_ln700_fu_275_p2 <= std_logic_vector(signed(sext_ln1118_4_fu_259_p1) + signed(sext_ln728_fu_271_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_1_fu_363_p3 <= (r_V_9_fu_357_p2 & ap_const_lv4_0);
    lhs_V_fu_263_p3 <= (ret_V_7_fu_211_p2 & ap_const_lv4_0);
    mul_ln_fu_309_p3 <= (ret_V_fu_303_p2 & ap_const_lv1_0);
    p_Val2_2_fu_217_p4 <= x_V_in_sig(159 downto 150);
    r_V_4_fu_476_p1 <= ap_const_lv21_F4(9 - 1 downto 0);
    r_V_6_fu_177_p3 <= (tmp_fu_167_p4 & ap_const_lv1_0);
    r_V_7_fu_195_p3 <= (tmp_1_fu_185_p4 & ap_const_lv1_0);
    r_V_8_fu_253_p2 <= std_logic_vector(signed(sext_ln1118_fu_237_p1) - signed(sext_ln1118_3_fu_249_p1));
    r_V_9_fu_357_p2 <= std_logic_vector(unsigned(sub_ln1118_fu_339_p2) - unsigned(sext_ln1118_2_fu_353_p1));
        r_V_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_fu_217_p4),11));

    ret_V_10_fu_455_p2 <= std_logic_vector(unsigned(add_ln1192_3_fu_449_p2) + unsigned(ap_const_lv34_3F2000000));
    ret_V_11_fu_389_p2 <= std_logic_vector(signed(sext_ln1192_2_fu_385_p1) + signed(ap_const_lv38_3000000000));
    ret_V_4_fu_317_p2 <= std_logic_vector(unsigned(mul_ln_fu_309_p3) + unsigned(ap_const_lv12_F0));
    ret_V_7_fu_211_p2 <= std_logic_vector(signed(sext_ln703_fu_203_p1) - signed(sext_ln703_1_fu_207_p1));
    ret_V_8_fu_281_p2 <= std_logic_vector(unsigned(add_ln700_fu_275_p2) + unsigned(ap_const_lv17_E10));
    ret_V_9_fu_297_p2 <= std_logic_vector(signed(ap_const_lv11_7FE) - signed(r_V_fu_227_p1));
    ret_V_fu_303_p2 <= std_logic_vector(unsigned(ret_V_9_fu_297_p2) + unsigned(ap_const_lv11_33));
        sext_ln1118_1_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_323_p3),14));

        sext_ln1118_2_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_3_fu_345_p3),14));

        sext_ln1118_3_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_241_p3),16));

        sext_ln1118_4_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_8_fu_253_p2),17));

        sext_ln1118_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1192_fu_231_p2),16));

        sext_ln1192_1_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_420_p3),34));

        sext_ln1192_2_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_377_p3),38));

        sext_ln1192_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_409_p3),34));

        sext_ln703_1_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_7_fu_195_p3),12));

        sext_ln703_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_6_fu_177_p3),12));

        sext_ln728_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_263_p3),17));

    shl_ln1118_3_fu_345_p3 <= (p_Val2_2_fu_217_p4 & ap_const_lv1_0);
    shl_ln1192_fu_437_p2 <= std_logic_vector(shift_left(unsigned(sub_ln1192_fu_431_p2),to_integer(unsigned('0' & ap_const_lv34_4(31-1 downto 0)))));
    shl_ln_fu_323_p3 <= (p_Val2_2_fu_217_p4 & ap_const_lv3_0);
    sub_ln1118_fu_339_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(sext_ln1118_1_fu_331_p1));
    sub_ln1192_2_fu_443_p2 <= std_logic_vector(unsigned(ap_const_lv34_0) - unsigned(shl_ln1192_fu_437_p2));
    sub_ln1192_fu_431_p2 <= std_logic_vector(signed(sext_ln1192_fu_416_p1) - signed(sext_ln1192_1_fu_427_p1));
    tmp_1_fu_185_p4 <= x_V_in_sig(49 downto 40);
    tmp_2_fu_241_p3 <= (add_ln1192_fu_231_p2 & ap_const_lv4_0);
    tmp_4_fu_409_p3 <= (r_V_4_reg_487 & ap_const_lv1_0);
    tmp_5_fu_420_p3 <= (r_V_4_reg_487 & ap_const_lv5_0);
    tmp_7_fu_377_p3 <= (add_ln1192_4_fu_371_p2 & ap_const_lv6_0);
    tmp_fu_167_p4 <= x_V_in_sig(149 downto 140);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, x_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V_ap_vld, x_V, x_V_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

        y_0_V <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_reg_482),10));


    y_0_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_V <= ret_V_10_fu_455_p2(33 downto 24);

    y_1_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= ap_const_lv10_3F1;

    y_2_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        y_3_V <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_reg_493),10));


    y_3_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= ap_const_lv10_3F0;

    y_4_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
