-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (191 downto 0);
    y_0_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.574500,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=21,HLS_SYN_FF=752,HLS_SYN_LUT=909,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv192_lc_1 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv24_4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv28_FF90000 : STD_LOGIC_VECTOR (27 downto 0) := "1111111110010000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv24_FF5000 : STD_LOGIC_VECTOR (23 downto 0) := "111111110101000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv28_FF30000 : STD_LOGIC_VECTOR (27 downto 0) := "1111111100110000000000000000";
    constant ap_const_lv24_FFB000 : STD_LOGIC_VECTOR (23 downto 0) := "111111111011000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv24_FF8000 : STD_LOGIC_VECTOR (23 downto 0) := "111111111000000000000000";
    constant ap_const_lv16_1D : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_preg : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (191 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_1_fu_177_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_reg_961 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_reg_961_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1192_fu_187_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1192_reg_969 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1117_fu_191_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1117_reg_975 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_reg_980 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_reg_980_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_fu_822_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_reg_988 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_5_fu_209_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_5_reg_993 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_5_reg_993_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_13_fu_828_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_13_reg_1004 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_reg_1010 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_14_fu_237_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_14_reg_1016 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_14_reg_1016_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln1192_fu_249_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1192_reg_1021 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_4_fu_842_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_4_reg_1026 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1192_1_fu_252_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1192_1_reg_1031 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_5_fu_255_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_reg_1036 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_reg_1036_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_8_fu_848_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_8_reg_1045 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1192_1_fu_330_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1192_1_reg_1050 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_3_fu_871_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_3_reg_1055 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1192_5_fu_380_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln1192_5_reg_1060 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1192_6_fu_888_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_6_reg_1065 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_7_fu_893_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_7_reg_1070 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1192_7_fu_431_p2 : STD_LOGIC_VECTOR (23 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sub_ln1192_7_fu_431_p2 : signal is "no";
    signal sub_ln1192_7_reg_1075 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_10_fu_913_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_10_reg_1080 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_919_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_11_reg_1085 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_13_fu_927_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_13_reg_1090 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_14_fu_933_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_14_reg_1095 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_15_fu_939_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_15_reg_1100 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln708_4_reg_1105 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln1117_fu_173_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_15_fu_834_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal rhs_V_fu_279_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1192_2_fu_286_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln_fu_269_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_854_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_fu_302_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_18_fu_312_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_862_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1192_1_fu_307_p2 : STD_LOGIC_VECTOR (23 downto 0);
    attribute use_dsp48 of add_ln1192_1_fu_307_p2 : signal is "no";
    signal shl_ln1192_2_fu_323_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_2_fu_336_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1192_4_fu_877_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_5_fu_882_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_5_fu_360_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln1192_4_fu_350_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln1192_3_fu_367_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln1192_6_fu_373_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_5_fu_386_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_6_fu_393_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1118_2_fu_347_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_16_fu_401_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1192_9_fu_907_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_899_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_9_fu_424_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_19_fu_439_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_1_fu_319_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln700_fu_296_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_V_fu_453_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_20_fu_461_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal rhs_V_8_fu_471_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln703_fu_467_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln728_fu_479_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_945_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_4_fu_483_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln1192_14_fu_489_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln1192_13_fu_496_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ret_V_5_fu_502_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal rhs_V_1_fu_518_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1192_5_fu_525_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1192_2_fu_529_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_3_fu_534_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_2_fu_547_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1192_3_fu_541_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_7_fu_554_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1192_2_fu_558_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_fu_564_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_7_fu_584_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln1192_6_fu_591_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln1192_8_fu_596_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln1118_6_fu_609_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1118_7_fu_616_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_5_fu_581_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_17_fu_620_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1192_4_fu_603_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal rhs_V_3_fu_626_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln1192_5_fu_634_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ret_V_1_fu_640_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln1192_s_fu_657_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1192_8_fu_664_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_1_fu_672_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_12_fu_954_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1192_8_fu_679_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_10_fu_685_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1192_9_fu_692_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_2_fu_698_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_11_fu_715_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1192_9_fu_722_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_12_fu_728_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1192_10_fu_735_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_13_fu_741_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_5_fu_754_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln1192_11_fu_748_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_16_fu_761_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_6_fu_771_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln1192_12_fu_765_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_17_fu_778_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_7_fu_788_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1192_11_fu_782_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_18_fu_795_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1192_12_fu_799_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_3_fu_805_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_13_fu_828_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_13_fu_828_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_4_fu_842_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_3_fu_219_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_4_fu_842_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_8_fu_848_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_854_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_862_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_862_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_862_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1192_1_fu_276_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_3_fu_871_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_4_fu_877_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_5_fu_882_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1192_8_fu_357_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_6_fu_888_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_6_fu_888_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1192_9_fu_397_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_7_fu_893_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1192_11_fu_411_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_899_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_899_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_9_fu_907_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_9_fu_907_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1192_12_fu_414_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_10_fu_913_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_10_fu_913_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_919_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_9_fu_436_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_919_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_10_fu_446_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_919_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_13_fu_927_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1192_15_fu_450_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_13_fu_927_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1192_14_fu_933_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_14_fu_933_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_15_fu_939_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_15_fu_939_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_945_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_945_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_945_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_12_fu_954_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mul_mul_12s_12s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_mul_mul_12s_12s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_mul_mul_12s_13s_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component myproject_mac_muladd_12s_24s_24ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_am_addmul_12s_14s_12s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_mul_mul_12s_13s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_mul_mul_12s_24s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_mul_mul_12s_14s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_mul_mul_12s_15s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_mac_mul_sub_12s_24s_24ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_am_submul_14s_12s_12s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_mul_mul_6ns_12s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    myproject_mul_mul_12s_12s_20_1_1_U1 : component myproject_mul_mul_12s_12s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_1_fu_177_p4,
        din1 => trunc_ln1117_fu_173_p1,
        dout => mul_ln1192_fu_822_p2);

    myproject_mul_mul_12s_12s_24_1_1_U2 : component myproject_mul_mul_12s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_13_fu_828_p0,
        din1 => r_V_13_fu_828_p1,
        dout => r_V_13_fu_828_p2);

    myproject_mul_mul_12s_13s_25_1_1_U3 : component myproject_mul_mul_12s_13s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 13,
        dout_WIDTH => 25)
    port map (
        din0 => p_Val2_5_fu_209_p4,
        din1 => r_V_14_fu_237_p3,
        dout => r_V_15_fu_834_p2);

    myproject_mul_mul_12s_12s_24_1_1_U4 : component myproject_mul_mul_12s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_4_fu_842_p0,
        din1 => r_V_4_fu_842_p1,
        dout => r_V_4_fu_842_p2);

    myproject_mul_mul_12s_12s_24_1_1_U5 : component myproject_mul_mul_12s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => tmp_5_fu_255_p4,
        din1 => r_V_8_fu_848_p1,
        dout => r_V_8_fu_848_p2);

    myproject_mac_muladd_12s_24s_24ns_24_1_1_U6 : component myproject_mac_muladd_12s_24s_24ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => tmp_2_reg_980,
        din1 => r_V_13_reg_1004,
        din2 => grp_fu_854_p2,
        dout => grp_fu_854_p3);

    myproject_am_addmul_12s_14s_12s_20_1_1_U7 : component myproject_am_addmul_12s_14s_12s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 14,
        din2_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        din0 => grp_fu_862_p0,
        din1 => grp_fu_862_p1,
        din2 => grp_fu_862_p2,
        dout => grp_fu_862_p3);

    myproject_mul_mul_12s_13s_20_1_1_U8 : component myproject_mul_mul_12s_13s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 13,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln1192_3_fu_871_p0,
        din1 => r_V_2_fu_336_p3,
        dout => mul_ln1192_3_fu_871_p2);

    myproject_mul_mul_12s_24s_24_1_1_U9 : component myproject_mul_mul_12s_24s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln1192_4_fu_877_p0,
        din1 => trunc_ln1192_reg_1021,
        dout => mul_ln1192_4_fu_877_p2);

    myproject_mul_mul_12s_24s_24_1_1_U10 : component myproject_mul_mul_12s_24s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln1192_5_fu_882_p0,
        din1 => r_V_4_reg_1026,
        dout => mul_ln1192_5_fu_882_p2);

    myproject_mul_mul_12s_14s_20_1_1_U11 : component myproject_mul_mul_12s_14s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 14,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln1192_6_fu_888_p0,
        din1 => mul_ln1192_6_fu_888_p1,
        dout => mul_ln1192_6_fu_888_p2);

    myproject_mul_mul_12s_15s_20_1_1_U12 : component myproject_mul_mul_12s_15s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 15,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln1192_7_fu_893_p0,
        din1 => r_V_16_fu_401_p2,
        dout => mul_ln1192_7_fu_893_p2);

    myproject_mac_mul_sub_12s_24s_24ns_24_1_1_U13 : component myproject_mac_mul_sub_12s_24s_24ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_899_p0,
        din1 => r_V_8_reg_1045,
        din2 => grp_fu_899_p2,
        dout => grp_fu_899_p3);

    myproject_mul_mul_12s_12s_20_1_1_U14 : component myproject_mul_mul_12s_12s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln1192_9_fu_907_p0,
        din1 => mul_ln1192_9_fu_907_p1,
        dout => mul_ln1192_9_fu_907_p2);

    myproject_mul_mul_12s_12s_20_1_1_U15 : component myproject_mul_mul_12s_12s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln1192_10_fu_913_p0,
        din1 => mul_ln1192_10_fu_913_p1,
        dout => mul_ln1192_10_fu_913_p2);

    myproject_am_addmul_12s_14s_12s_20_1_1_U16 : component myproject_am_addmul_12s_14s_12s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 14,
        din2_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        din0 => grp_fu_919_p0,
        din1 => grp_fu_919_p1,
        din2 => grp_fu_919_p2,
        dout => grp_fu_919_p3);

    myproject_mul_mul_12s_14s_20_1_1_U17 : component myproject_mul_mul_12s_14s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 14,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln1192_13_fu_927_p0,
        din1 => mul_ln1192_13_fu_927_p1,
        dout => mul_ln1192_13_fu_927_p2);

    myproject_mul_mul_12s_12s_20_1_1_U18 : component myproject_mul_mul_12s_12s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln1192_14_fu_933_p0,
        din1 => mul_ln1192_14_fu_933_p1,
        dout => mul_ln1192_14_fu_933_p2);

    myproject_mul_mul_12s_12s_20_1_1_U19 : component myproject_mul_mul_12s_12s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln1192_15_fu_939_p0,
        din1 => mul_ln1192_15_fu_939_p1,
        dout => mul_ln1192_15_fu_939_p2);

    myproject_am_submul_14s_12s_12s_20_1_1_U20 : component myproject_am_submul_14s_12s_12s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        din0 => grp_fu_945_p0,
        din1 => grp_fu_945_p1,
        din2 => grp_fu_945_p2,
        dout => grp_fu_945_p3);

    myproject_mul_mul_6ns_12s_16_1_1_U21 : component myproject_mul_mul_6ns_12s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 12,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1192_12_fu_954_p0,
        din1 => tmp_5_reg_1036_pp0_iter1_reg,
        dout => mul_ln1192_12_fu_954_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv192_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln1192_5_reg_1060(27 downto 4) <= add_ln1192_5_fu_380_p2(27 downto 4);
                mul_ln1192_10_reg_1080 <= mul_ln1192_10_fu_913_p2;
                mul_ln1192_13_reg_1090 <= mul_ln1192_13_fu_927_p2;
                mul_ln1192_14_reg_1095 <= mul_ln1192_14_fu_933_p2;
                mul_ln1192_15_reg_1100 <= mul_ln1192_15_fu_939_p2;
                mul_ln1192_3_reg_1055 <= mul_ln1192_3_fu_871_p2;
                mul_ln1192_6_reg_1065 <= mul_ln1192_6_fu_888_p2;
                mul_ln1192_7_reg_1070 <= mul_ln1192_7_fu_893_p2;
                mul_ln1192_reg_988 <= mul_ln1192_fu_822_p2;
                p_Val2_5_reg_993 <= x_V_in_sig(179 downto 168);
                p_Val2_5_reg_993_pp0_iter1_reg <= p_Val2_5_reg_993;
                r_V_13_reg_1004 <= r_V_13_fu_828_p2;
                    r_V_14_reg_1016(12 downto 1) <= r_V_14_fu_237_p3(12 downto 1);
                    r_V_14_reg_1016_pp0_iter1_reg(12 downto 1) <= r_V_14_reg_1016(12 downto 1);
                r_V_4_reg_1026 <= r_V_4_fu_842_p2;
                r_V_8_reg_1045 <= r_V_8_fu_848_p2;
                sext_ln1117_reg_975 <= sext_ln1117_fu_191_p1;
                sext_ln1192_reg_969 <= sext_ln1192_fu_187_p1;
                sub_ln1192_1_reg_1050 <= sub_ln1192_1_fu_330_p2;
                sub_ln1192_7_reg_1075 <= sub_ln1192_7_fu_431_p2;
                tmp_1_reg_961 <= x_V_in_sig(191 downto 180);
                tmp_1_reg_961_pp0_iter1_reg <= tmp_1_reg_961;
                tmp_2_reg_980 <= x_V_in_sig(35 downto 24);
                tmp_2_reg_980_pp0_iter1_reg <= tmp_2_reg_980;
                tmp_4_reg_1010 <= x_V_in_sig(59 downto 48);
                tmp_5_reg_1036 <= x_V_in_sig(47 downto 36);
                tmp_5_reg_1036_pp0_iter1_reg <= tmp_5_reg_1036;
                trunc_ln1192_1_reg_1031 <= trunc_ln1192_1_fu_252_p1;
                trunc_ln1192_reg_1021 <= trunc_ln1192_fu_249_p1;
                trunc_ln708_4_reg_1105 <= ret_V_5_fu_502_p2(27 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln1192_11_reg_1085 <= grp_fu_919_p3;
            end if;
        end if;
    end process;
    r_V_14_reg_1016(0) <= '0';
    r_V_14_reg_1016_pp0_iter1_reg(0) <= '0';
    add_ln1192_5_reg_1060(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1192_11_fu_748_p2 <= std_logic_vector(unsigned(sub_ln1192_10_fu_735_p2) + unsigned(shl_ln1192_13_fu_741_p3));
    add_ln1192_12_fu_765_p2 <= std_logic_vector(unsigned(add_ln1192_11_fu_748_p2) + unsigned(sext_ln1192_16_fu_761_p1));
    add_ln1192_1_fu_307_p2 <= std_logic_vector(signed(grp_fu_854_p3) + signed(shl_ln1192_fu_302_p2));
    add_ln1192_2_fu_529_p2 <= std_logic_vector(unsigned(sub_ln1192_1_reg_1050) + unsigned(sext_ln1192_5_fu_525_p1));
    add_ln1192_3_fu_541_p2 <= std_logic_vector(unsigned(add_ln1192_2_fu_529_p2) + unsigned(shl_ln1192_3_fu_534_p3));
    add_ln1192_5_fu_380_p2 <= std_logic_vector(unsigned(sub_ln1192_3_fu_367_p2) + unsigned(shl_ln1192_6_fu_373_p3));
    add_ln1192_6_fu_591_p2 <= std_logic_vector(unsigned(add_ln1192_5_reg_1060) + unsigned(shl_ln1192_7_fu_584_p3));
    add_ln1192_8_fu_664_p2 <= std_logic_vector(unsigned(sub_ln1192_7_reg_1075) + unsigned(shl_ln1192_s_fu_657_p3));
    add_ln1192_9_fu_692_p2 <= std_logic_vector(unsigned(sub_ln1192_8_fu_679_p2) + unsigned(shl_ln1192_10_fu_685_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_854_p2 <= std_logic_vector(signed(sext_ln1192_2_fu_286_p1) - signed(shl_ln_fu_269_p3));
    grp_fu_862_p0 <= sext_ln700_fu_296_p1(12 - 1 downto 0);
    grp_fu_862_p1 <= sext_ln1118_1_fu_319_p1(14 - 1 downto 0);
    grp_fu_862_p2 <= sext_ln1192_1_fu_276_p1(12 - 1 downto 0);
    grp_fu_899_p0 <= sext_ln1192_8_fu_357_p1(12 - 1 downto 0);
    grp_fu_899_p2 <= (p_Val2_5_reg_993 & ap_const_lv12_0);
    grp_fu_919_p0 <= sext_ln1118_9_fu_436_p1(12 - 1 downto 0);
    grp_fu_919_p1 <= sext_ln1118_10_fu_446_p1(14 - 1 downto 0);
    grp_fu_919_p2 <= sext_ln1192_12_fu_414_p1(12 - 1 downto 0);
    grp_fu_945_p0 <= sext_ln1118_10_fu_446_p1(14 - 1 downto 0);
    grp_fu_945_p1 <= sext_ln1118_9_fu_436_p1(12 - 1 downto 0);
    grp_fu_945_p2 <= sext_ln1192_12_fu_414_p1(12 - 1 downto 0);
    lhs_V_fu_453_p3 <= (r_V_16_fu_401_p2 & ap_const_lv12_0);
    mul_ln1192_10_fu_913_p0 <= sext_ln1192_1_fu_276_p1(12 - 1 downto 0);
    mul_ln1192_10_fu_913_p1 <= sext_ln1192_12_fu_414_p1(12 - 1 downto 0);
    mul_ln1192_12_fu_954_p0 <= ap_const_lv16_1D(6 - 1 downto 0);
    mul_ln1192_13_fu_927_p0 <= sext_ln1192_15_fu_450_p1(12 - 1 downto 0);
    mul_ln1192_13_fu_927_p1 <= sext_ln1192_9_fu_397_p1(14 - 1 downto 0);
    mul_ln1192_14_fu_933_p0 <= sext_ln1192_1_fu_276_p1(12 - 1 downto 0);
    mul_ln1192_14_fu_933_p1 <= sext_ln1192_15_fu_450_p1(12 - 1 downto 0);
    mul_ln1192_15_fu_939_p0 <= sext_ln1192_11_fu_411_p1(12 - 1 downto 0);
    mul_ln1192_15_fu_939_p1 <= sext_ln1192_15_fu_450_p1(12 - 1 downto 0);
    mul_ln1192_3_fu_871_p0 <= sext_ln1192_1_fu_276_p1(12 - 1 downto 0);
    mul_ln1192_4_fu_877_p0 <= sext_ln1117_reg_975(12 - 1 downto 0);
    mul_ln1192_5_fu_882_p0 <= sext_ln1192_8_fu_357_p1(12 - 1 downto 0);
    mul_ln1192_6_fu_888_p0 <= sext_ln1192_reg_969(12 - 1 downto 0);
    mul_ln1192_6_fu_888_p1 <= sext_ln1192_9_fu_397_p1(14 - 1 downto 0);
    mul_ln1192_7_fu_893_p0 <= sext_ln1192_11_fu_411_p1(12 - 1 downto 0);
    mul_ln1192_9_fu_907_p0 <= sext_ln1192_reg_969(12 - 1 downto 0);
    mul_ln1192_9_fu_907_p1 <= sext_ln1192_12_fu_414_p1(12 - 1 downto 0);
    p_Val2_5_fu_209_p4 <= x_V_in_sig(179 downto 168);
    r_V_13_fu_828_p0 <= sext_ln1117_fu_191_p1(12 - 1 downto 0);
    r_V_13_fu_828_p1 <= sext_ln1117_fu_191_p1(12 - 1 downto 0);
    r_V_14_fu_237_p3 <= (p_Val2_5_fu_209_p4 & ap_const_lv1_0);
    r_V_16_fu_401_p2 <= std_logic_vector(signed(sext_ln1118_6_fu_393_p1) - signed(sext_ln1118_2_fu_347_p1));
    r_V_17_fu_620_p2 <= std_logic_vector(signed(sext_ln1118_7_fu_616_p1) - signed(sext_ln1118_5_fu_581_p1));
    r_V_18_fu_312_p3 <= (tmp_1_reg_961 & ap_const_lv2_0);
    r_V_19_fu_439_p3 <= (tmp_5_reg_1036 & ap_const_lv2_0);
    r_V_20_fu_461_p2 <= std_logic_vector(signed(sext_ln1118_1_fu_319_p1) - signed(sext_ln700_fu_296_p1));
    r_V_2_fu_336_p3 <= (tmp_2_reg_980 & ap_const_lv1_0);
    r_V_4_fu_842_p0 <= sext_ln1118_3_fu_219_p1(12 - 1 downto 0);
    r_V_4_fu_842_p1 <= sext_ln1118_3_fu_219_p1(12 - 1 downto 0);
    r_V_5_fu_386_p3 <= (p_Val2_5_reg_993 & ap_const_lv2_0);
    r_V_8_fu_848_p1 <= sext_ln1118_3_fu_219_p1(12 - 1 downto 0);
    ret_V_1_fu_640_p2 <= std_logic_vector(signed(ap_const_lv28_FF30000) + signed(sub_ln1192_5_fu_634_p2));
    ret_V_2_fu_698_p2 <= std_logic_vector(signed(ap_const_lv24_FFB000) + signed(add_ln1192_9_fu_692_p2));
    ret_V_3_fu_805_p2 <= std_logic_vector(signed(ap_const_lv24_FF8000) + signed(sub_ln1192_12_fu_799_p2));
    ret_V_4_fu_483_p2 <= std_logic_vector(signed(sext_ln703_fu_467_p1) - signed(sext_ln728_fu_479_p1));
    ret_V_5_fu_502_p2 <= std_logic_vector(signed(ap_const_lv28_FF90000) + signed(sub_ln1192_13_fu_496_p2));
    ret_V_fu_564_p2 <= std_logic_vector(signed(ap_const_lv24_FF5000) + signed(sub_ln1192_2_fu_558_p2));
    rhs_V_1_fu_518_p3 <= (tmp_1_reg_961_pp0_iter1_reg & ap_const_lv11_0);
    rhs_V_2_fu_547_p3 <= (tmp_2_reg_980_pp0_iter1_reg & ap_const_lv11_0);
    rhs_V_3_fu_626_p3 <= (r_V_17_fu_620_p2 & ap_const_lv12_0);
    rhs_V_5_fu_754_p3 <= (p_Val2_5_reg_993_pp0_iter1_reg & ap_const_lv9_0);
    rhs_V_6_fu_771_p3 <= (tmp_1_reg_961_pp0_iter1_reg & ap_const_lv10_0);
    rhs_V_7_fu_788_p3 <= (tmp_5_reg_1036_pp0_iter1_reg & ap_const_lv10_0);
    rhs_V_8_fu_471_p3 <= (r_V_20_fu_461_p2 & ap_const_lv12_0);
    rhs_V_fu_279_p3 <= (p_Val2_5_reg_993 & ap_const_lv8_0);
        sext_ln1117_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_177_p4),24));

        sext_ln1118_10_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_19_fu_439_p3),15));

        sext_ln1118_1_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_18_fu_312_p3),15));

        sext_ln1118_2_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_reg_993),15));

        sext_ln1118_3_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_fu_209_p4),24));

        sext_ln1118_5_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_14_reg_1016_pp0_iter1_reg),16));

        sext_ln1118_6_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_fu_386_p3),15));

        sext_ln1118_7_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_6_fu_609_p3),16));

        sext_ln1118_9_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1036),15));

        sext_ln1192_11_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1010),20));

        sext_ln1192_12_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1036),20));

        sext_ln1192_15_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_reg_993),20));

        sext_ln1192_16_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_5_fu_754_p3),24));

        sext_ln1192_17_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_6_fu_771_p3),24));

        sext_ln1192_18_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_7_fu_788_p3),24));

        sext_ln1192_1_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_980),20));

        sext_ln1192_2_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_279_p3),24));

        sext_ln1192_5_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1_fu_518_p3),24));

        sext_ln1192_7_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_2_fu_547_p3),24));

        sext_ln1192_8_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1010),24));

        sext_ln1192_9_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_fu_386_p3),20));

        sext_ln1192_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_177_p4),20));

        sext_ln700_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_961),15));

        sext_ln703_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_453_p3),28));

        sext_ln728_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_8_fu_471_p3),28));

    shl_ln1118_6_fu_609_p3 <= (p_Val2_5_reg_993_pp0_iter1_reg & ap_const_lv3_0);
    shl_ln1192_10_fu_685_p3 <= (mul_ln1192_12_fu_954_p2 & ap_const_lv8_0);
    shl_ln1192_11_fu_715_p3 <= (mul_ln1192_13_reg_1090 & ap_const_lv4_0);
    shl_ln1192_12_fu_728_p3 <= (mul_ln1192_14_reg_1095 & ap_const_lv4_0);
    shl_ln1192_13_fu_741_p3 <= (mul_ln1192_15_reg_1100 & ap_const_lv4_0);
    shl_ln1192_14_fu_489_p3 <= (grp_fu_945_p3 & ap_const_lv8_0);
    shl_ln1192_1_fu_672_p3 <= (mul_ln1192_11_reg_1085 & ap_const_lv4_0);
    shl_ln1192_2_fu_323_p3 <= (grp_fu_862_p3 & ap_const_lv4_0);
    shl_ln1192_3_fu_534_p3 <= (mul_ln1192_3_reg_1055 & ap_const_lv4_0);
    shl_ln1192_4_fu_350_p3 <= (mul_ln1192_4_fu_877_p2 & ap_const_lv4_0);
    shl_ln1192_5_fu_360_p3 <= (mul_ln1192_5_fu_882_p2 & ap_const_lv4_0);
    shl_ln1192_6_fu_373_p3 <= (trunc_ln1192_1_reg_1031 & ap_const_lv8_0);
    shl_ln1192_7_fu_584_p3 <= (mul_ln1192_6_reg_1065 & ap_const_lv8_0);
    shl_ln1192_8_fu_596_p3 <= (mul_ln1192_7_reg_1070 & ap_const_lv8_0);
    shl_ln1192_9_fu_424_p3 <= (mul_ln1192_9_fu_907_p2 & ap_const_lv4_0);
    shl_ln1192_fu_302_p2 <= std_logic_vector(shift_left(unsigned(r_V_13_reg_1004),to_integer(unsigned('0' & ap_const_lv24_4(24-1 downto 0)))));
    shl_ln1192_s_fu_657_p3 <= (mul_ln1192_10_reg_1080 & ap_const_lv4_0);
    shl_ln_fu_269_p3 <= (mul_ln1192_reg_988 & ap_const_lv4_0);
    sub_ln1192_10_fu_735_p2 <= std_logic_vector(unsigned(sub_ln1192_9_fu_722_p2) - unsigned(shl_ln1192_12_fu_728_p3));
    sub_ln1192_11_fu_782_p2 <= std_logic_vector(unsigned(add_ln1192_12_fu_765_p2) - unsigned(sext_ln1192_17_fu_778_p1));
    sub_ln1192_12_fu_799_p2 <= std_logic_vector(unsigned(sub_ln1192_11_fu_782_p2) - unsigned(sext_ln1192_18_fu_795_p1));
    sub_ln1192_13_fu_496_p2 <= std_logic_vector(unsigned(ret_V_4_fu_483_p2) - unsigned(shl_ln1192_14_fu_489_p3));
    sub_ln1192_1_fu_330_p2 <= std_logic_vector(unsigned(add_ln1192_1_fu_307_p2) - unsigned(shl_ln1192_2_fu_323_p3));
    sub_ln1192_2_fu_558_p2 <= std_logic_vector(unsigned(add_ln1192_3_fu_541_p2) - unsigned(sext_ln1192_7_fu_554_p1));
    sub_ln1192_3_fu_367_p2 <= std_logic_vector(unsigned(shl_ln1192_5_fu_360_p3) - unsigned(shl_ln1192_4_fu_350_p3));
    sub_ln1192_4_fu_603_p2 <= std_logic_vector(unsigned(add_ln1192_6_fu_591_p2) - unsigned(shl_ln1192_8_fu_596_p3));
    sub_ln1192_5_fu_634_p2 <= std_logic_vector(unsigned(sub_ln1192_4_fu_603_p2) - unsigned(rhs_V_3_fu_626_p3));
    sub_ln1192_7_fu_431_p2 <= std_logic_vector(signed(grp_fu_899_p3) - signed(shl_ln1192_9_fu_424_p3));
    sub_ln1192_8_fu_679_p2 <= std_logic_vector(unsigned(add_ln1192_8_fu_664_p2) - unsigned(shl_ln1192_1_fu_672_p3));
    sub_ln1192_9_fu_722_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(shl_ln1192_11_fu_715_p3));
    tmp_1_fu_177_p4 <= x_V_in_sig(191 downto 180);
    tmp_5_fu_255_p4 <= x_V_in_sig(47 downto 36);
    trunc_ln1117_fu_173_p1 <= x_V_in_sig(12 - 1 downto 0);
    trunc_ln1192_1_fu_252_p1 <= r_V_15_fu_834_p2(20 - 1 downto 0);
    trunc_ln1192_fu_249_p1 <= r_V_15_fu_834_p2(24 - 1 downto 0);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, x_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V_ap_vld, x_V, x_V_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

    y_0_V <= ret_V_fu_564_p2(23 downto 12);

    y_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_V <= ret_V_1_fu_640_p2(27 downto 16);

    y_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= ret_V_2_fu_698_p2(23 downto 12);

    y_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_3_V <= ret_V_3_fu_805_p2(23 downto 12);

    y_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= trunc_ln708_4_reg_1105;

    y_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
