-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (111 downto 0);
    y_0_V : OUT STD_LOGIC_VECTOR (6 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (6 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (6 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (6 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (6 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.803000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=185,HLS_SYN_LUT=760,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv112_0 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_F400 : STD_LOGIC_VECTOR (15 downto 0) := "1111010000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv19_79000 : STD_LOGIC_VECTOR (18 downto 0) := "1111001000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_FA00 : STD_LOGIC_VECTOR (15 downto 0) := "1111101000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv16_F800 : STD_LOGIC_VECTOR (15 downto 0) := "1111100000000000";
    constant ap_const_lv19_7C000 : STD_LOGIC_VECTOR (18 downto 0) := "1111100000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_preg : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (111 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_fu_167_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_reg_724 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_reg_733 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_4_fu_187_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_4_reg_739 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_reg_749 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1192_2_fu_718_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1192_2_reg_754 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1192_fu_225_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln1192_reg_759 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_reg_764 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_reg_771 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal r_V_5_fu_215_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1118_1_fu_197_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_5_fu_215_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_5_fu_215_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_fu_252_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1192_fu_263_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1192_fu_249_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1192_fu_263_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1192_fu_263_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal rhs_V_fu_277_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1192_2_fu_284_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_269_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1192_1_fu_294_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1192_1_fu_294_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1192_1_fu_294_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1192_fu_288_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1192_1_fu_300_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_1_fu_314_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1192_fu_308_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1192_3_fu_321_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1192_1_fu_325_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_fu_331_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1192_3_fu_358_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1192_2_fu_351_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_2_fu_371_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1192_3_fu_385_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1192_3_fu_385_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1118_2_fu_378_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1192_3_fu_385_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1192_2_fu_365_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1192_4_fu_391_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_4_fu_411_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1192_4_fu_411_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1118_4_fu_405_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1192_4_fu_411_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1192_2_fu_399_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1192_5_fu_417_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1_fu_431_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_6_fu_438_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_fu_348_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_6_fu_442_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln1192_3_fu_425_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_2_fu_448_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln1192_4_fu_456_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_1_fu_462_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_8_fu_482_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_7_fu_495_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1192_5_fu_510_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1192_6_fu_479_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1192_5_fu_510_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1192_5_fu_510_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1192_5_fu_489_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1192_6_fu_516_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1192_7_fu_530_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1192_7_fu_502_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln1192_7_fu_537_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln1192_6_fu_524_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1192_8_fu_543_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1192_4_fu_551_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_2_fu_557_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1192_6_fu_574_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1192_6_fu_574_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1192_6_fu_574_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal rhs_V_9_fu_588_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1192_9_fu_595_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1192_9_fu_580_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_5_fu_605_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln1192_8_fu_599_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1192_10_fu_612_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_6_fu_622_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln1192_9_fu_616_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1192_11_fu_629_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1192_10_fu_633_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_3_fu_639_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_7_fu_660_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_fu_656_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln728_fu_667_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_4_fu_671_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1192_7_fu_681_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1192_7_fu_681_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1192_7_fu_681_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1192_12_fu_677_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1192_s_fu_687_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln1192_11_fu_695_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_5_fu_701_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mul_mul_7s_14s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    myproject_mul_mul_7s_14s_16_1_1_U1 : component myproject_mul_mul_7s_14s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_fu_167_p4,
        din1 => r_V_5_fu_215_p2,
        dout => mul_ln1192_2_fu_718_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv112_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln1192_2_reg_754 <= mul_ln1192_2_fu_718_p2;
                p_Val2_4_reg_739 <= x_V_in_sig(104 downto 98);
                tmp_1_reg_733 <= x_V_in_sig(20 downto 14);
                tmp_3_reg_749 <= x_V_in_sig(34 downto 28);
                tmp_4_reg_764 <= x_V_in_sig(27 downto 21);
                tmp_reg_724 <= x_V_in_sig(111 downto 105);
                tmp_s_reg_771 <= x_V_in_sig(26 downto 21);
                trunc_ln1192_reg_759 <= trunc_ln1192_fu_225_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1192_2_fu_399_p2 <= std_logic_vector(unsigned(sub_ln1192_2_fu_365_p2) + unsigned(shl_ln1192_4_fu_391_p3));
    add_ln1192_4_fu_551_p2 <= std_logic_vector(unsigned(sub_ln1192_6_fu_524_p2) + unsigned(shl_ln1192_8_fu_543_p3));
    add_ln1192_fu_308_p2 <= std_logic_vector(unsigned(sub_ln1192_fu_288_p2) + unsigned(shl_ln1192_1_fu_300_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1192_1_fu_294_p0 <= sext_ln1192_fu_249_p1(7 - 1 downto 0);
    mul_ln1192_1_fu_294_p1 <= sext_ln1192_fu_249_p1(7 - 1 downto 0);
    mul_ln1192_1_fu_294_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_1_fu_294_p0) * signed(mul_ln1192_1_fu_294_p1))), 13));
    mul_ln1192_3_fu_385_p0 <= tmp_reg_724;
    mul_ln1192_3_fu_385_p1 <= sext_ln1118_2_fu_378_p1(8 - 1 downto 0);
    mul_ln1192_3_fu_385_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_3_fu_385_p0) * signed(mul_ln1192_3_fu_385_p1))), 13));
    mul_ln1192_4_fu_411_p0 <= tmp_3_reg_749;
    mul_ln1192_4_fu_411_p1 <= sext_ln1118_4_fu_405_p1(7 - 1 downto 0);
    mul_ln1192_4_fu_411_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_4_fu_411_p0) * signed(mul_ln1192_4_fu_411_p1))), 13));
    mul_ln1192_5_fu_510_p0 <= sext_ln1192_6_fu_479_p1(7 - 1 downto 0);
    mul_ln1192_5_fu_510_p1 <= r_V_7_fu_495_p3;
    mul_ln1192_5_fu_510_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_5_fu_510_p0) * signed(mul_ln1192_5_fu_510_p1))), 13));
    mul_ln1192_6_fu_574_p0 <= sext_ln1118_4_fu_405_p1(7 - 1 downto 0);
    mul_ln1192_6_fu_574_p1 <= sext_ln1118_2_fu_378_p1(8 - 1 downto 0);
    mul_ln1192_6_fu_574_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_6_fu_574_p0) * signed(mul_ln1192_6_fu_574_p1))), 13));
    mul_ln1192_7_fu_681_p0 <= sext_ln1192_6_fu_479_p1(7 - 1 downto 0);
    mul_ln1192_7_fu_681_p1 <= sext_ln1192_6_fu_479_p1(7 - 1 downto 0);
    mul_ln1192_7_fu_681_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_7_fu_681_p0) * signed(mul_ln1192_7_fu_681_p1))), 13));
    mul_ln1192_fu_263_p0 <= sext_ln1192_fu_249_p1(7 - 1 downto 0);
    mul_ln1192_fu_263_p1 <= r_V_fu_252_p3;
    mul_ln1192_fu_263_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_fu_263_p0) * signed(mul_ln1192_fu_263_p1))), 13));
    p_Val2_4_fu_187_p4 <= x_V_in_sig(104 downto 98);
    r_V_2_fu_371_p3 <= (p_Val2_4_reg_739 & ap_const_lv1_0);
    r_V_5_fu_215_p0 <= sext_ln1118_1_fu_197_p1(7 - 1 downto 0);
    r_V_5_fu_215_p1 <= sext_ln1118_1_fu_197_p1(7 - 1 downto 0);
    r_V_5_fu_215_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_5_fu_215_p0) * signed(r_V_5_fu_215_p1))), 14));
    r_V_6_fu_442_p2 <= std_logic_vector(signed(sext_ln1118_6_fu_438_p1) - signed(sext_ln1118_fu_348_p1));
    r_V_7_fu_495_p3 <= (tmp_4_reg_764 & ap_const_lv1_0);
    r_V_fu_252_p3 <= (tmp_reg_724 & ap_const_lv1_0);
    ret_V_1_fu_462_p2 <= std_logic_vector(signed(ap_const_lv19_79000) + signed(sub_ln1192_4_fu_456_p2));
    ret_V_2_fu_557_p2 <= std_logic_vector(signed(ap_const_lv16_FA00) + signed(add_ln1192_4_fu_551_p2));
    ret_V_3_fu_639_p2 <= std_logic_vector(signed(ap_const_lv16_F800) + signed(sub_ln1192_10_fu_633_p2));
    ret_V_4_fu_671_p2 <= std_logic_vector(signed(sext_ln703_fu_656_p1) - signed(sext_ln728_fu_667_p1));
    ret_V_5_fu_701_p2 <= std_logic_vector(signed(ap_const_lv19_7C000) + signed(sub_ln1192_11_fu_695_p2));
    ret_V_fu_331_p2 <= std_logic_vector(signed(ap_const_lv16_F400) + signed(sub_ln1192_1_fu_325_p2));
    rhs_V_1_fu_314_p3 <= (tmp_1_reg_733 & ap_const_lv8_0);
    rhs_V_2_fu_448_p3 <= (r_V_6_fu_442_p2 & ap_const_lv9_0);
    rhs_V_5_fu_605_p3 <= (tmp_reg_724 & ap_const_lv7_0);
    rhs_V_6_fu_622_p3 <= (tmp_4_reg_764 & ap_const_lv7_0);
    rhs_V_7_fu_660_p3 <= (tmp_reg_724 & ap_const_lv9_0);
    rhs_V_8_fu_482_p3 <= (p_Val2_4_reg_739 & ap_const_lv9_0);
    rhs_V_9_fu_588_p3 <= (p_Val2_4_reg_739 & ap_const_lv6_0);
    rhs_V_fu_277_p3 <= (tmp_reg_724 & ap_const_lv8_0);
        sext_ln1118_1_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_fu_187_p4),14));

        sext_ln1118_2_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_fu_371_p3),13));

        sext_ln1118_4_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_reg_739),13));

        sext_ln1118_6_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_fu_431_p3),10));

        sext_ln1118_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_reg_739),10));

        sext_ln1192_10_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_5_fu_605_p3),16));

        sext_ln1192_11_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_6_fu_622_p3),16));

        sext_ln1192_12_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_4_fu_671_p2),19));

        sext_ln1192_2_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_277_p3),16));

        sext_ln1192_3_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1_fu_314_p3),16));

        sext_ln1192_6_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_764),13));

        sext_ln1192_7_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_7_fu_495_p3),10));

        sext_ln1192_9_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_9_fu_588_p3),16));

        sext_ln1192_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_733),13));

        sext_ln703_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_8_fu_482_p3),17));

        sext_ln728_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_7_fu_660_p3),17));

    shl_ln1192_1_fu_300_p3 <= (mul_ln1192_1_fu_294_p2 & ap_const_lv3_0);
    shl_ln1192_2_fu_351_p3 <= (mul_ln1192_2_reg_754 & ap_const_lv3_0);
    shl_ln1192_3_fu_358_p3 <= (trunc_ln1192_reg_759 & ap_const_lv6_0);
    shl_ln1192_4_fu_391_p3 <= (mul_ln1192_3_fu_385_p2 & ap_const_lv6_0);
    shl_ln1192_5_fu_417_p3 <= (mul_ln1192_4_fu_411_p2 & ap_const_lv6_0);
    shl_ln1192_6_fu_516_p3 <= (mul_ln1192_5_fu_510_p2 & ap_const_lv3_0);
    shl_ln1192_7_fu_530_p3 <= (tmp_s_reg_771 & ap_const_lv4_0);
    shl_ln1192_8_fu_543_p3 <= (sub_ln1192_7_fu_537_p2 & ap_const_lv6_0);
    shl_ln1192_9_fu_580_p3 <= (mul_ln1192_6_fu_574_p2 & ap_const_lv3_0);
    shl_ln1192_s_fu_687_p3 <= (mul_ln1192_7_fu_681_p2 & ap_const_lv6_0);
    shl_ln1_fu_431_p3 <= (p_Val2_4_reg_739 & ap_const_lv2_0);
    shl_ln_fu_269_p3 <= (mul_ln1192_fu_263_p2 & ap_const_lv3_0);
    sub_ln1192_10_fu_633_p2 <= std_logic_vector(unsigned(sub_ln1192_9_fu_616_p2) - unsigned(sext_ln1192_11_fu_629_p1));
    sub_ln1192_11_fu_695_p2 <= std_logic_vector(signed(sext_ln1192_12_fu_677_p1) - signed(shl_ln1192_s_fu_687_p3));
    sub_ln1192_1_fu_325_p2 <= std_logic_vector(unsigned(add_ln1192_fu_308_p2) - unsigned(sext_ln1192_3_fu_321_p1));
    sub_ln1192_2_fu_365_p2 <= std_logic_vector(unsigned(shl_ln1192_3_fu_358_p3) - unsigned(shl_ln1192_2_fu_351_p3));
    sub_ln1192_3_fu_425_p2 <= std_logic_vector(unsigned(add_ln1192_2_fu_399_p2) - unsigned(shl_ln1192_5_fu_417_p3));
    sub_ln1192_4_fu_456_p2 <= std_logic_vector(unsigned(sub_ln1192_3_fu_425_p2) - unsigned(rhs_V_2_fu_448_p3));
    sub_ln1192_5_fu_489_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(rhs_V_8_fu_482_p3));
    sub_ln1192_6_fu_524_p2 <= std_logic_vector(unsigned(sub_ln1192_5_fu_489_p2) - unsigned(shl_ln1192_6_fu_516_p3));
    sub_ln1192_7_fu_537_p2 <= std_logic_vector(unsigned(shl_ln1192_7_fu_530_p3) - unsigned(sext_ln1192_7_fu_502_p1));
    sub_ln1192_8_fu_599_p2 <= std_logic_vector(signed(sext_ln1192_9_fu_595_p1) - signed(shl_ln1192_9_fu_580_p3));
    sub_ln1192_9_fu_616_p2 <= std_logic_vector(unsigned(sub_ln1192_8_fu_599_p2) - unsigned(sext_ln1192_10_fu_612_p1));
    sub_ln1192_fu_288_p2 <= std_logic_vector(signed(sext_ln1192_2_fu_284_p1) - signed(shl_ln_fu_269_p3));
    tmp_fu_167_p4 <= x_V_in_sig(111 downto 105);
    trunc_ln1192_fu_225_p1 <= r_V_5_fu_215_p2(13 - 1 downto 0);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, x_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V_ap_vld, x_V, x_V_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

    y_0_V <= ret_V_fu_331_p2(15 downto 9);

    y_0_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_V <= ret_V_1_fu_462_p2(18 downto 12);

    y_1_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= ret_V_2_fu_557_p2(15 downto 9);

    y_2_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_3_V <= ret_V_3_fu_639_p2(15 downto 9);

    y_3_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= ret_V_5_fu_701_p2(18 downto 12);

    y_4_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
