// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.803000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=185,HLS_SYN_LUT=760,HLS_VERSION=2020_1}" *)

module myproject (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V_ap_vld,
        x_V,
        y_0_V,
        y_0_V_ap_vld,
        y_1_V,
        y_1_V_ap_vld,
        y_2_V,
        y_2_V_ap_vld,
        y_3_V,
        y_3_V_ap_vld,
        y_4_V,
        y_4_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   x_V_ap_vld;
input  [111:0] x_V;
output  [6:0] y_0_V;
output   y_0_V_ap_vld;
output  [6:0] y_1_V;
output   y_1_V_ap_vld;
output  [6:0] y_2_V;
output   y_2_V_ap_vld;
output  [6:0] y_3_V;
output   y_3_V_ap_vld;
output  [6:0] y_4_V;
output   y_4_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_0_V_ap_vld;
reg y_1_V_ap_vld;
reg y_2_V_ap_vld;
reg y_3_V_ap_vld;
reg y_4_V_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    x_V_ap_vld_in_sig;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [111:0] x_V_preg;
reg   [111:0] x_V_in_sig;
reg    x_V_ap_vld_preg;
reg    x_V_blk_n;
wire    ap_block_pp0_stage0;
wire  signed [6:0] tmp_fu_167_p4;
reg  signed [6:0] tmp_reg_724;
reg  signed [6:0] tmp_1_reg_733;
wire  signed [6:0] p_Val2_4_fu_187_p4;
reg  signed [6:0] p_Val2_4_reg_739;
reg   [6:0] tmp_3_reg_749;
wire  signed [15:0] mul_ln1192_2_fu_718_p2;
reg  signed [15:0] mul_ln1192_2_reg_754;
wire   [12:0] trunc_ln1192_fu_225_p1;
reg   [12:0] trunc_ln1192_reg_759;
reg  signed [6:0] tmp_4_reg_764;
reg   [5:0] tmp_s_reg_771;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire  signed [6:0] r_V_5_fu_215_p0;
wire  signed [13:0] sext_ln1118_1_fu_197_p1;
wire  signed [6:0] r_V_5_fu_215_p1;
wire  signed [13:0] r_V_5_fu_215_p2;
wire   [7:0] r_V_fu_252_p3;
wire  signed [6:0] mul_ln1192_fu_263_p0;
wire  signed [12:0] sext_ln1192_fu_249_p1;
wire  signed [7:0] mul_ln1192_fu_263_p1;
wire   [12:0] mul_ln1192_fu_263_p2;
wire   [14:0] rhs_V_fu_277_p3;
wire  signed [15:0] sext_ln1192_2_fu_284_p1;
wire   [15:0] shl_ln_fu_269_p3;
wire  signed [6:0] mul_ln1192_1_fu_294_p0;
wire  signed [6:0] mul_ln1192_1_fu_294_p1;
wire   [12:0] mul_ln1192_1_fu_294_p2;
wire   [15:0] sub_ln1192_fu_288_p2;
wire   [15:0] shl_ln1192_1_fu_300_p3;
wire   [14:0] rhs_V_1_fu_314_p3;
wire   [15:0] add_ln1192_fu_308_p2;
wire  signed [15:0] sext_ln1192_3_fu_321_p1;
wire   [15:0] sub_ln1192_1_fu_325_p2;
wire   [15:0] ret_V_fu_331_p2;
wire   [18:0] shl_ln1192_3_fu_358_p3;
wire   [18:0] shl_ln1192_2_fu_351_p3;
wire   [7:0] r_V_2_fu_371_p3;
wire  signed [6:0] mul_ln1192_3_fu_385_p0;
wire  signed [7:0] mul_ln1192_3_fu_385_p1;
wire  signed [12:0] sext_ln1118_2_fu_378_p1;
wire   [12:0] mul_ln1192_3_fu_385_p2;
wire   [18:0] sub_ln1192_2_fu_365_p2;
wire   [18:0] shl_ln1192_4_fu_391_p3;
wire  signed [6:0] mul_ln1192_4_fu_411_p0;
wire  signed [6:0] mul_ln1192_4_fu_411_p1;
wire  signed [12:0] sext_ln1118_4_fu_405_p1;
wire   [12:0] mul_ln1192_4_fu_411_p2;
wire   [18:0] add_ln1192_2_fu_399_p2;
wire   [18:0] shl_ln1192_5_fu_417_p3;
wire   [8:0] shl_ln1_fu_431_p3;
wire  signed [9:0] sext_ln1118_6_fu_438_p1;
wire  signed [9:0] sext_ln1118_fu_348_p1;
wire   [9:0] r_V_6_fu_442_p2;
wire   [18:0] sub_ln1192_3_fu_425_p2;
wire   [18:0] rhs_V_2_fu_448_p3;
wire   [18:0] sub_ln1192_4_fu_456_p2;
wire   [18:0] ret_V_1_fu_462_p2;
wire  signed [15:0] rhs_V_8_fu_482_p3;
wire  signed [7:0] r_V_7_fu_495_p3;
wire  signed [6:0] mul_ln1192_5_fu_510_p0;
wire  signed [12:0] sext_ln1192_6_fu_479_p1;
wire  signed [7:0] mul_ln1192_5_fu_510_p1;
wire   [12:0] mul_ln1192_5_fu_510_p2;
wire   [15:0] sub_ln1192_5_fu_489_p2;
wire   [15:0] shl_ln1192_6_fu_516_p3;
wire   [9:0] shl_ln1192_7_fu_530_p3;
wire  signed [9:0] sext_ln1192_7_fu_502_p1;
wire   [9:0] sub_ln1192_7_fu_537_p2;
wire   [15:0] sub_ln1192_6_fu_524_p2;
wire   [15:0] shl_ln1192_8_fu_543_p3;
wire   [15:0] add_ln1192_4_fu_551_p2;
wire   [15:0] ret_V_2_fu_557_p2;
wire  signed [6:0] mul_ln1192_6_fu_574_p0;
wire  signed [7:0] mul_ln1192_6_fu_574_p1;
wire   [12:0] mul_ln1192_6_fu_574_p2;
wire   [12:0] rhs_V_9_fu_588_p3;
wire  signed [15:0] sext_ln1192_9_fu_595_p1;
wire   [15:0] shl_ln1192_9_fu_580_p3;
wire   [13:0] rhs_V_5_fu_605_p3;
wire   [15:0] sub_ln1192_8_fu_599_p2;
wire  signed [15:0] sext_ln1192_10_fu_612_p1;
wire   [13:0] rhs_V_6_fu_622_p3;
wire   [15:0] sub_ln1192_9_fu_616_p2;
wire  signed [15:0] sext_ln1192_11_fu_629_p1;
wire   [15:0] sub_ln1192_10_fu_633_p2;
wire   [15:0] ret_V_3_fu_639_p2;
wire   [15:0] rhs_V_7_fu_660_p3;
wire  signed [16:0] sext_ln703_fu_656_p1;
wire  signed [16:0] sext_ln728_fu_667_p1;
wire   [16:0] ret_V_4_fu_671_p2;
wire  signed [6:0] mul_ln1192_7_fu_681_p0;
wire  signed [6:0] mul_ln1192_7_fu_681_p1;
wire   [12:0] mul_ln1192_7_fu_681_p2;
wire  signed [18:0] sext_ln1192_12_fu_677_p1;
wire   [18:0] shl_ln1192_s_fu_687_p3;
wire   [18:0] sub_ln1192_11_fu_695_p2;
wire   [18:0] ret_V_5_fu_701_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 x_V_preg = 112'd0;
#0 x_V_ap_vld_preg = 1'b0;
end

myproject_mul_mul_7s_14s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
myproject_mul_mul_7s_14s_16_1_1_U1(
    .din0(tmp_fu_167_p4),
    .din1(r_V_5_fu_215_p2),
    .dout(mul_ln1192_2_fu_718_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_V_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_V_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (x_V_ap_vld == 1'b1))) begin
            x_V_ap_vld_preg <= x_V_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_V_preg <= 112'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (x_V_ap_vld == 1'b1))) begin
            x_V_preg <= x_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln1192_2_reg_754 <= mul_ln1192_2_fu_718_p2;
        p_Val2_4_reg_739 <= {{x_V_in_sig[104:98]}};
        tmp_1_reg_733 <= {{x_V_in_sig[20:14]}};
        tmp_3_reg_749 <= {{x_V_in_sig[34:28]}};
        tmp_4_reg_764 <= {{x_V_in_sig[27:21]}};
        tmp_reg_724 <= {{x_V_in_sig[111:105]}};
        tmp_s_reg_771 <= {{x_V_in_sig[26:21]}};
        trunc_ln1192_reg_759 <= trunc_ln1192_fu_225_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((x_V_ap_vld == 1'b1)) begin
        x_V_ap_vld_in_sig = x_V_ap_vld;
    end else begin
        x_V_ap_vld_in_sig = x_V_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_V_blk_n = x_V_ap_vld;
    end else begin
        x_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x_V_ap_vld == 1'b1)) begin
        x_V_in_sig = x_V;
    end else begin
        x_V_in_sig = x_V_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_0_V_ap_vld = 1'b1;
    end else begin
        y_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_1_V_ap_vld = 1'b1;
    end else begin
        y_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_2_V_ap_vld = 1'b1;
    end else begin
        y_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_3_V_ap_vld = 1'b1;
    end else begin
        y_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_4_V_ap_vld = 1'b1;
    end else begin
        y_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_2_fu_399_p2 = (sub_ln1192_2_fu_365_p2 + shl_ln1192_4_fu_391_p3);

assign add_ln1192_4_fu_551_p2 = (sub_ln1192_6_fu_524_p2 + shl_ln1192_8_fu_543_p3);

assign add_ln1192_fu_308_p2 = (sub_ln1192_fu_288_p2 + shl_ln1192_1_fu_300_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign mul_ln1192_1_fu_294_p0 = sext_ln1192_fu_249_p1;

assign mul_ln1192_1_fu_294_p1 = sext_ln1192_fu_249_p1;

assign mul_ln1192_1_fu_294_p2 = ($signed(mul_ln1192_1_fu_294_p0) * $signed(mul_ln1192_1_fu_294_p1));

assign mul_ln1192_3_fu_385_p0 = tmp_reg_724;

assign mul_ln1192_3_fu_385_p1 = sext_ln1118_2_fu_378_p1;

assign mul_ln1192_3_fu_385_p2 = ($signed(mul_ln1192_3_fu_385_p0) * $signed(mul_ln1192_3_fu_385_p1));

assign mul_ln1192_4_fu_411_p0 = tmp_3_reg_749;

assign mul_ln1192_4_fu_411_p1 = sext_ln1118_4_fu_405_p1;

assign mul_ln1192_4_fu_411_p2 = ($signed(mul_ln1192_4_fu_411_p0) * $signed(mul_ln1192_4_fu_411_p1));

assign mul_ln1192_5_fu_510_p0 = sext_ln1192_6_fu_479_p1;

assign mul_ln1192_5_fu_510_p1 = r_V_7_fu_495_p3;

assign mul_ln1192_5_fu_510_p2 = ($signed(mul_ln1192_5_fu_510_p0) * $signed(mul_ln1192_5_fu_510_p1));

assign mul_ln1192_6_fu_574_p0 = sext_ln1118_4_fu_405_p1;

assign mul_ln1192_6_fu_574_p1 = sext_ln1118_2_fu_378_p1;

assign mul_ln1192_6_fu_574_p2 = ($signed(mul_ln1192_6_fu_574_p0) * $signed(mul_ln1192_6_fu_574_p1));

assign mul_ln1192_7_fu_681_p0 = sext_ln1192_6_fu_479_p1;

assign mul_ln1192_7_fu_681_p1 = sext_ln1192_6_fu_479_p1;

assign mul_ln1192_7_fu_681_p2 = ($signed(mul_ln1192_7_fu_681_p0) * $signed(mul_ln1192_7_fu_681_p1));

assign mul_ln1192_fu_263_p0 = sext_ln1192_fu_249_p1;

assign mul_ln1192_fu_263_p1 = r_V_fu_252_p3;

assign mul_ln1192_fu_263_p2 = ($signed(mul_ln1192_fu_263_p0) * $signed(mul_ln1192_fu_263_p1));

assign p_Val2_4_fu_187_p4 = {{x_V_in_sig[104:98]}};

assign r_V_2_fu_371_p3 = {{p_Val2_4_reg_739}, {1'd0}};

assign r_V_5_fu_215_p0 = sext_ln1118_1_fu_197_p1;

assign r_V_5_fu_215_p1 = sext_ln1118_1_fu_197_p1;

assign r_V_5_fu_215_p2 = ($signed(r_V_5_fu_215_p0) * $signed(r_V_5_fu_215_p1));

assign r_V_6_fu_442_p2 = ($signed(sext_ln1118_6_fu_438_p1) - $signed(sext_ln1118_fu_348_p1));

assign r_V_7_fu_495_p3 = {{tmp_4_reg_764}, {1'd0}};

assign r_V_fu_252_p3 = {{tmp_reg_724}, {1'd0}};

assign ret_V_1_fu_462_p2 = ($signed(19'd495616) + $signed(sub_ln1192_4_fu_456_p2));

assign ret_V_2_fu_557_p2 = ($signed(16'd64000) + $signed(add_ln1192_4_fu_551_p2));

assign ret_V_3_fu_639_p2 = ($signed(16'd63488) + $signed(sub_ln1192_10_fu_633_p2));

assign ret_V_4_fu_671_p2 = ($signed(sext_ln703_fu_656_p1) - $signed(sext_ln728_fu_667_p1));

assign ret_V_5_fu_701_p2 = ($signed(19'd507904) + $signed(sub_ln1192_11_fu_695_p2));

assign ret_V_fu_331_p2 = ($signed(16'd62464) + $signed(sub_ln1192_1_fu_325_p2));

assign rhs_V_1_fu_314_p3 = {{tmp_1_reg_733}, {8'd0}};

assign rhs_V_2_fu_448_p3 = {{r_V_6_fu_442_p2}, {9'd0}};

assign rhs_V_5_fu_605_p3 = {{tmp_reg_724}, {7'd0}};

assign rhs_V_6_fu_622_p3 = {{tmp_4_reg_764}, {7'd0}};

assign rhs_V_7_fu_660_p3 = {{tmp_reg_724}, {9'd0}};

assign rhs_V_8_fu_482_p3 = {{p_Val2_4_reg_739}, {9'd0}};

assign rhs_V_9_fu_588_p3 = {{p_Val2_4_reg_739}, {6'd0}};

assign rhs_V_fu_277_p3 = {{tmp_reg_724}, {8'd0}};

assign sext_ln1118_1_fu_197_p1 = p_Val2_4_fu_187_p4;

assign sext_ln1118_2_fu_378_p1 = $signed(r_V_2_fu_371_p3);

assign sext_ln1118_4_fu_405_p1 = p_Val2_4_reg_739;

assign sext_ln1118_6_fu_438_p1 = $signed(shl_ln1_fu_431_p3);

assign sext_ln1118_fu_348_p1 = p_Val2_4_reg_739;

assign sext_ln1192_10_fu_612_p1 = $signed(rhs_V_5_fu_605_p3);

assign sext_ln1192_11_fu_629_p1 = $signed(rhs_V_6_fu_622_p3);

assign sext_ln1192_12_fu_677_p1 = $signed(ret_V_4_fu_671_p2);

assign sext_ln1192_2_fu_284_p1 = $signed(rhs_V_fu_277_p3);

assign sext_ln1192_3_fu_321_p1 = $signed(rhs_V_1_fu_314_p3);

assign sext_ln1192_6_fu_479_p1 = tmp_4_reg_764;

assign sext_ln1192_7_fu_502_p1 = r_V_7_fu_495_p3;

assign sext_ln1192_9_fu_595_p1 = $signed(rhs_V_9_fu_588_p3);

assign sext_ln1192_fu_249_p1 = tmp_1_reg_733;

assign sext_ln703_fu_656_p1 = rhs_V_8_fu_482_p3;

assign sext_ln728_fu_667_p1 = $signed(rhs_V_7_fu_660_p3);

assign shl_ln1192_1_fu_300_p3 = {{mul_ln1192_1_fu_294_p2}, {3'd0}};

assign shl_ln1192_2_fu_351_p3 = {{mul_ln1192_2_reg_754}, {3'd0}};

assign shl_ln1192_3_fu_358_p3 = {{trunc_ln1192_reg_759}, {6'd0}};

assign shl_ln1192_4_fu_391_p3 = {{mul_ln1192_3_fu_385_p2}, {6'd0}};

assign shl_ln1192_5_fu_417_p3 = {{mul_ln1192_4_fu_411_p2}, {6'd0}};

assign shl_ln1192_6_fu_516_p3 = {{mul_ln1192_5_fu_510_p2}, {3'd0}};

assign shl_ln1192_7_fu_530_p3 = {{tmp_s_reg_771}, {4'd0}};

assign shl_ln1192_8_fu_543_p3 = {{sub_ln1192_7_fu_537_p2}, {6'd0}};

assign shl_ln1192_9_fu_580_p3 = {{mul_ln1192_6_fu_574_p2}, {3'd0}};

assign shl_ln1192_s_fu_687_p3 = {{mul_ln1192_7_fu_681_p2}, {6'd0}};

assign shl_ln1_fu_431_p3 = {{p_Val2_4_reg_739}, {2'd0}};

assign shl_ln_fu_269_p3 = {{mul_ln1192_fu_263_p2}, {3'd0}};

assign sub_ln1192_10_fu_633_p2 = ($signed(sub_ln1192_9_fu_616_p2) - $signed(sext_ln1192_11_fu_629_p1));

assign sub_ln1192_11_fu_695_p2 = ($signed(sext_ln1192_12_fu_677_p1) - $signed(shl_ln1192_s_fu_687_p3));

assign sub_ln1192_1_fu_325_p2 = ($signed(add_ln1192_fu_308_p2) - $signed(sext_ln1192_3_fu_321_p1));

assign sub_ln1192_2_fu_365_p2 = (shl_ln1192_3_fu_358_p3 - shl_ln1192_2_fu_351_p3);

assign sub_ln1192_3_fu_425_p2 = (add_ln1192_2_fu_399_p2 - shl_ln1192_5_fu_417_p3);

assign sub_ln1192_4_fu_456_p2 = (sub_ln1192_3_fu_425_p2 - rhs_V_2_fu_448_p3);

assign sub_ln1192_5_fu_489_p2 = ($signed(16'd0) - $signed(rhs_V_8_fu_482_p3));

assign sub_ln1192_6_fu_524_p2 = (sub_ln1192_5_fu_489_p2 - shl_ln1192_6_fu_516_p3);

assign sub_ln1192_7_fu_537_p2 = ($signed(shl_ln1192_7_fu_530_p3) - $signed(sext_ln1192_7_fu_502_p1));

assign sub_ln1192_8_fu_599_p2 = ($signed(sext_ln1192_9_fu_595_p1) - $signed(shl_ln1192_9_fu_580_p3));

assign sub_ln1192_9_fu_616_p2 = ($signed(sub_ln1192_8_fu_599_p2) - $signed(sext_ln1192_10_fu_612_p1));

assign sub_ln1192_fu_288_p2 = ($signed(sext_ln1192_2_fu_284_p1) - $signed(shl_ln_fu_269_p3));

assign tmp_fu_167_p4 = {{x_V_in_sig[111:105]}};

assign trunc_ln1192_fu_225_p1 = r_V_5_fu_215_p2[12:0];

assign y_0_V = {{ret_V_fu_331_p2[15:9]}};

assign y_1_V = {{ret_V_1_fu_462_p2[18:12]}};

assign y_2_V = {{ret_V_2_fu_557_p2[15:9]}};

assign y_3_V = {{ret_V_3_fu_639_p2[15:9]}};

assign y_4_V = {{ret_V_5_fu_701_p2[18:12]}};

endmodule //myproject
