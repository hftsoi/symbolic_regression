-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (159 downto 0);
    y_0_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.233000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=609,HLS_SYN_LUT=1405,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv160_lc_1 : STD_LOGIC_VECTOR (159 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv26_3F90000 : STD_LOGIC_VECTOR (25 downto 0) := "11111110010000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv22_3F5000 : STD_LOGIC_VECTOR (21 downto 0) := "1111110101000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv26_3F30000 : STD_LOGIC_VECTOR (25 downto 0) := "11111100110000000000000000";
    constant ap_const_lv14_1D : STD_LOGIC_VECTOR (13 downto 0) := "00000000011101";
    constant ap_const_lv22_3FB000 : STD_LOGIC_VECTOR (21 downto 0) := "1111111011000000000000";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv22_3F8000 : STD_LOGIC_VECTOR (21 downto 0) := "1111111000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_preg : STD_LOGIC_VECTOR (159 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (159 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_1_fu_175_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_reg_982 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_reg_982_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_reg_992 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_reg_992_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_1_fu_199_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1118_1_reg_1000 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_fu_203_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_reg_1006 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_5_fu_209_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_5_reg_1011 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_5_reg_1011_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_reg_1022 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_14_fu_237_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_14_reg_1028 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_14_reg_1028_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_15_fu_895_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_15_reg_1033 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_4_fu_249_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_4_reg_1038 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1192_1_fu_255_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln1192_1_reg_1043 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_5_fu_258_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_1048 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_1048_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_8_fu_272_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_8_reg_1057 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_902_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln1192_reg_1062 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln1192_fu_324_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln1192_reg_1067 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_910_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_2_reg_1072 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_3_fu_918_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_3_reg_1077 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln1192_5_fu_392_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1192_5_reg_1082 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1192_6_fu_938_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_6_reg_1087 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_7_fu_943_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_7_reg_1092 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1192_8_fu_498_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1192_8_reg_1097 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_13_fu_967_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_13_reg_1102 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_14_fu_507_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_14_reg_1107 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_15_fu_513_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_15_reg_1112 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_4_reg_1117 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln1117_fu_171_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_fu_203_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_fu_203_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_4_fu_249_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_4_fu_219_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_4_fu_249_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_8_fu_272_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_8_fu_272_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_fu_291_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1192_1_fu_298_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln_fu_281_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_13_fu_311_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1117_fu_278_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_13_fu_311_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_13_fu_311_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_18_fu_328_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_2_fu_339_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1192_4_fu_924_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_5_fu_931_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1192_5_fu_372_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln1192_4_fu_359_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sub_ln1192_3_fu_379_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln1192_6_fu_385_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_5_fu_398_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_7_fu_405_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1118_3_fu_350_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_16_fu_413_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1192_9_fu_439_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_9_fu_439_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1192_14_fu_426_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_9_fu_439_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_949_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1192_9_fu_444_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_10_fu_457_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1192_fu_288_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_10_fu_457_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_10_fu_457_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1192_7_fu_452_p2 : STD_LOGIC_VECTOR (21 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sub_ln1192_7_fu_452_p2 : signal is "no";
    signal shl_ln1192_s_fu_463_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_19_fu_480_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_958_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln1192_8_fu_471_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1192_10_fu_491_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_14_fu_507_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_14_fu_507_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_13_fu_504_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_15_fu_513_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1192_13_fu_423_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_15_fu_513_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_2_fu_335_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln700_fu_308_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal lhs_V_fu_519_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_20_fu_527_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal rhs_V_8_fu_537_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln703_fu_533_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln728_fu_545_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_973_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_4_fu_549_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln1192_15_fu_555_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sub_ln1192_13_fu_562_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_5_fu_568_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln1192_1_fu_584_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln1192_1_fu_591_p2 : STD_LOGIC_VECTOR (21 downto 0);
    attribute use_dsp48 of add_ln1192_1_fu_591_p2 : signal is "no";
    signal shl_ln1192_2_fu_596_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal rhs_V_1_fu_609_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1192_1_fu_603_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1192_5_fu_616_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln1192_2_fu_620_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1192_3_fu_626_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal rhs_V_2_fu_639_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln1192_3_fu_633_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1192_7_fu_646_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1192_2_fu_650_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ret_V_fu_656_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1192_7_fu_676_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1192_6_fu_683_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln1192_8_fu_688_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln1118_6_fu_701_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1118_9_fu_708_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_6_fu_673_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_17_fu_712_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln1192_4_fu_695_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal rhs_V_3_fu_718_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sub_ln1192_5_fu_726_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_1_fu_732_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1192_12_fu_752_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_12_fu_752_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln1192_11_fu_758_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln1192_9_fu_766_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ret_V_2_fu_771_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1192_12_fu_788_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1192_9_fu_795_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1192_13_fu_801_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1192_10_fu_808_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1192_14_fu_814_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal rhs_V_5_fu_827_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln1192_11_fu_821_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1192_18_fu_834_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal rhs_V_6_fu_844_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1192_12_fu_838_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1192_19_fu_851_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal rhs_V_7_fu_861_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1192_11_fu_855_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1192_20_fu_868_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1192_12_fu_872_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ret_V_3_fu_878_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_902_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_910_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_910_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_910_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_3_fu_918_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_5_fu_931_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1192_11_fu_369_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_6_fu_938_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_6_fu_938_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_8_fu_409_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_7_fu_943_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_949_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_949_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_958_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_11_fu_477_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_958_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_12_fu_487_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_958_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_13_fu_967_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_13_fu_967_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_973_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_973_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_973_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mul_mul_10s_11s_21_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component myproject_mac_muladd_10s_20s_22ns_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_am_addmul_10s_12s_10s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component myproject_mul_mul_10s_11s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component myproject_mul_mul_10s_21s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_mul_mul_10s_20s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_mul_mul_10s_12s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component myproject_mul_mul_10s_13s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component myproject_mac_mul_sub_10s_20s_22ns_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_am_submul_12s_10s_10s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    myproject_mul_mul_10s_11s_21_1_1_U1 : component myproject_mul_mul_10s_11s_21_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 21)
    port map (
        din0 => p_Val2_5_fu_209_p4,
        din1 => r_V_14_fu_237_p3,
        dout => r_V_15_fu_895_p2);

    myproject_mac_muladd_10s_20s_22ns_22_1_1_U2 : component myproject_mac_muladd_10s_20s_22ns_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 20,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => tmp_2_reg_992,
        din1 => r_V_13_fu_311_p2,
        din2 => grp_fu_902_p2,
        dout => grp_fu_902_p3);

    myproject_am_addmul_10s_12s_10s_18_1_1_U3 : component myproject_am_addmul_10s_12s_10s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 12,
        din2_WIDTH => 10,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_910_p0,
        din1 => grp_fu_910_p1,
        din2 => grp_fu_910_p2,
        dout => grp_fu_910_p3);

    myproject_mul_mul_10s_11s_18_1_1_U4 : component myproject_mul_mul_10s_11s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln1192_3_fu_918_p0,
        din1 => r_V_2_fu_339_p3,
        dout => mul_ln1192_3_fu_918_p2);

    myproject_mul_mul_10s_21s_22_1_1_U5 : component myproject_mul_mul_10s_21s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 21,
        dout_WIDTH => 22)
    port map (
        din0 => tmp_1_reg_982,
        din1 => r_V_15_reg_1033,
        dout => mul_ln1192_4_fu_924_p2);

    myproject_mul_mul_10s_20s_22_1_1_U6 : component myproject_mul_mul_10s_20s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 20,
        dout_WIDTH => 22)
    port map (
        din0 => mul_ln1192_5_fu_931_p0,
        din1 => r_V_4_reg_1038,
        dout => mul_ln1192_5_fu_931_p2);

    myproject_mul_mul_10s_12s_18_1_1_U7 : component myproject_mul_mul_10s_12s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 12,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln1192_6_fu_938_p0,
        din1 => mul_ln1192_6_fu_938_p1,
        dout => mul_ln1192_6_fu_938_p2);

    myproject_mul_mul_10s_13s_18_1_1_U8 : component myproject_mul_mul_10s_13s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 13,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln1192_7_fu_943_p0,
        din1 => r_V_16_fu_413_p2,
        dout => mul_ln1192_7_fu_943_p2);

    myproject_mac_mul_sub_10s_20s_22ns_22_1_1_U9 : component myproject_mac_mul_sub_10s_20s_22ns_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 20,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_949_p0,
        din1 => r_V_8_reg_1057,
        din2 => grp_fu_949_p2,
        dout => grp_fu_949_p3);

    myproject_am_addmul_10s_12s_10s_18_1_1_U10 : component myproject_am_addmul_10s_12s_10s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 12,
        din2_WIDTH => 10,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_958_p0,
        din1 => grp_fu_958_p1,
        din2 => grp_fu_958_p2,
        dout => grp_fu_958_p3);

    myproject_mul_mul_10s_12s_18_1_1_U11 : component myproject_mul_mul_10s_12s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 12,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln1192_13_fu_967_p0,
        din1 => mul_ln1192_13_fu_967_p1,
        dout => mul_ln1192_13_fu_967_p2);

    myproject_am_submul_12s_10s_10s_18_1_1_U12 : component myproject_am_submul_12s_10s_10s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_973_p0,
        din1 => grp_fu_973_p1,
        din2 => grp_fu_973_p2,
        dout => grp_fu_973_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv160_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln1192_5_reg_1082(25 downto 4) <= add_ln1192_5_fu_392_p2(25 downto 4);
                mul_ln1192_13_reg_1102 <= mul_ln1192_13_fu_967_p2;
                mul_ln1192_14_reg_1107 <= mul_ln1192_14_fu_507_p2;
                mul_ln1192_15_reg_1112 <= mul_ln1192_15_fu_513_p2;
                mul_ln1192_3_reg_1077 <= mul_ln1192_3_fu_918_p2;
                mul_ln1192_6_reg_1087 <= mul_ln1192_6_fu_938_p2;
                mul_ln1192_7_reg_1092 <= mul_ln1192_7_fu_943_p2;
                mul_ln1192_reg_1006 <= mul_ln1192_fu_203_p2;
                p_Val2_5_reg_1011 <= x_V_in_sig(149 downto 140);
                p_Val2_5_reg_1011_pp0_iter1_reg <= p_Val2_5_reg_1011;
                    r_V_14_reg_1028(10 downto 1) <= r_V_14_fu_237_p3(10 downto 1);
                    r_V_14_reg_1028_pp0_iter1_reg(10 downto 1) <= r_V_14_reg_1028(10 downto 1);
                r_V_15_reg_1033 <= r_V_15_fu_895_p2;
                r_V_4_reg_1038 <= r_V_4_fu_249_p2;
                r_V_8_reg_1057 <= r_V_8_fu_272_p2;
                sext_ln1118_1_reg_1000 <= sext_ln1118_1_fu_199_p1;
                sub_ln1192_8_reg_1097 <= sub_ln1192_8_fu_498_p2;
                tmp_1_reg_982 <= x_V_in_sig(159 downto 150);
                tmp_1_reg_982_pp0_iter1_reg <= tmp_1_reg_982;
                tmp_2_reg_992 <= x_V_in_sig(29 downto 20);
                tmp_2_reg_992_pp0_iter1_reg <= tmp_2_reg_992;
                tmp_4_reg_1022 <= x_V_in_sig(49 downto 40);
                tmp_5_reg_1048 <= x_V_in_sig(39 downto 30);
                tmp_5_reg_1048_pp0_iter1_reg <= tmp_5_reg_1048;
                trunc_ln1192_1_reg_1043 <= trunc_ln1192_1_fu_255_p1;
                trunc_ln1192_reg_1067 <= trunc_ln1192_fu_324_p1;
                trunc_ln708_4_reg_1117 <= ret_V_5_fu_568_p2(25 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1192_reg_1062 <= grp_fu_902_p3;
                mul_ln1192_2_reg_1072 <= grp_fu_910_p3;
            end if;
        end if;
    end process;
    r_V_14_reg_1028(0) <= '0';
    r_V_14_reg_1028_pp0_iter1_reg(0) <= '0';
    add_ln1192_5_reg_1082(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1192_11_fu_821_p2 <= std_logic_vector(unsigned(sub_ln1192_10_fu_808_p2) + unsigned(shl_ln1192_14_fu_814_p3));
    add_ln1192_12_fu_838_p2 <= std_logic_vector(unsigned(add_ln1192_11_fu_821_p2) + unsigned(sext_ln1192_18_fu_834_p1));
    add_ln1192_1_fu_591_p2 <= std_logic_vector(signed(add_ln1192_reg_1062) + signed(shl_ln1192_1_fu_584_p3));
    add_ln1192_2_fu_620_p2 <= std_logic_vector(unsigned(sub_ln1192_1_fu_603_p2) + unsigned(sext_ln1192_5_fu_616_p1));
    add_ln1192_3_fu_633_p2 <= std_logic_vector(unsigned(add_ln1192_2_fu_620_p2) + unsigned(shl_ln1192_3_fu_626_p3));
    add_ln1192_5_fu_392_p2 <= std_logic_vector(unsigned(sub_ln1192_3_fu_379_p2) + unsigned(shl_ln1192_6_fu_385_p3));
    add_ln1192_6_fu_683_p2 <= std_logic_vector(unsigned(add_ln1192_5_reg_1082) + unsigned(shl_ln1192_7_fu_676_p3));
    add_ln1192_8_fu_471_p2 <= std_logic_vector(unsigned(sub_ln1192_7_fu_452_p2) + unsigned(shl_ln1192_s_fu_463_p3));
    add_ln1192_9_fu_766_p2 <= std_logic_vector(unsigned(sub_ln1192_8_reg_1097) + unsigned(shl_ln1192_11_fu_758_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_902_p2 <= std_logic_vector(signed(sext_ln1192_1_fu_298_p1) - signed(shl_ln_fu_281_p3));
    grp_fu_910_p0 <= sext_ln700_fu_308_p1(10 - 1 downto 0);
    grp_fu_910_p1 <= sext_ln1118_2_fu_335_p1(12 - 1 downto 0);
    grp_fu_910_p2 <= sext_ln1192_fu_288_p1(10 - 1 downto 0);
    grp_fu_949_p0 <= sext_ln1192_11_fu_369_p1(10 - 1 downto 0);
    grp_fu_949_p2 <= (p_Val2_5_reg_1011 & ap_const_lv12_0);
    grp_fu_958_p0 <= sext_ln1118_11_fu_477_p1(10 - 1 downto 0);
    grp_fu_958_p1 <= sext_ln1118_12_fu_487_p1(12 - 1 downto 0);
    grp_fu_958_p2 <= sext_ln1192_14_fu_426_p1(10 - 1 downto 0);
    grp_fu_973_p0 <= sext_ln1118_12_fu_487_p1(12 - 1 downto 0);
    grp_fu_973_p1 <= sext_ln1118_11_fu_477_p1(10 - 1 downto 0);
    grp_fu_973_p2 <= sext_ln1192_14_fu_426_p1(10 - 1 downto 0);
    lhs_V_fu_519_p3 <= (r_V_16_fu_413_p2 & ap_const_lv12_0);
    mul_ln1192_10_fu_457_p0 <= sext_ln1192_fu_288_p1(10 - 1 downto 0);
    mul_ln1192_10_fu_457_p1 <= sext_ln1192_14_fu_426_p1(10 - 1 downto 0);
    mul_ln1192_10_fu_457_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_10_fu_457_p0) * signed(mul_ln1192_10_fu_457_p1))), 18));
    mul_ln1192_12_fu_752_p1 <= tmp_5_reg_1048_pp0_iter1_reg;
    mul_ln1192_12_fu_752_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv14_1D) * signed(mul_ln1192_12_fu_752_p1))), 14));
    mul_ln1192_13_fu_967_p0 <= sext_ln1118_13_fu_504_p1(10 - 1 downto 0);
    mul_ln1192_13_fu_967_p1 <= sext_ln1118_8_fu_409_p1(12 - 1 downto 0);
    mul_ln1192_14_fu_507_p0 <= sext_ln1192_fu_288_p1(10 - 1 downto 0);
    mul_ln1192_14_fu_507_p1 <= sext_ln1118_13_fu_504_p1(10 - 1 downto 0);
    mul_ln1192_14_fu_507_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_14_fu_507_p0) * signed(mul_ln1192_14_fu_507_p1))), 18));
    mul_ln1192_15_fu_513_p0 <= sext_ln1192_13_fu_423_p1(10 - 1 downto 0);
    mul_ln1192_15_fu_513_p1 <= sext_ln1118_13_fu_504_p1(10 - 1 downto 0);
    mul_ln1192_15_fu_513_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_15_fu_513_p0) * signed(mul_ln1192_15_fu_513_p1))), 18));
    mul_ln1192_3_fu_918_p0 <= sext_ln1192_fu_288_p1(10 - 1 downto 0);
    mul_ln1192_5_fu_931_p0 <= sext_ln1192_11_fu_369_p1(10 - 1 downto 0);
    mul_ln1192_6_fu_938_p0 <= sext_ln1118_1_reg_1000(10 - 1 downto 0);
    mul_ln1192_6_fu_938_p1 <= sext_ln1118_8_fu_409_p1(12 - 1 downto 0);
    mul_ln1192_7_fu_943_p0 <= sext_ln1192_13_fu_423_p1(10 - 1 downto 0);
    mul_ln1192_9_fu_439_p0 <= sext_ln1118_1_reg_1000(10 - 1 downto 0);
    mul_ln1192_9_fu_439_p1 <= sext_ln1192_14_fu_426_p1(10 - 1 downto 0);
    mul_ln1192_9_fu_439_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_9_fu_439_p0) * signed(mul_ln1192_9_fu_439_p1))), 18));
    mul_ln1192_fu_203_p0 <= tmp_1_fu_175_p4;
    mul_ln1192_fu_203_p1 <= trunc_ln1117_fu_171_p1;
    mul_ln1192_fu_203_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_fu_203_p0) * signed(mul_ln1192_fu_203_p1))), 18));
    p_Val2_5_fu_209_p4 <= x_V_in_sig(149 downto 140);
    r_V_13_fu_311_p0 <= sext_ln1117_fu_278_p1(10 - 1 downto 0);
    r_V_13_fu_311_p1 <= sext_ln1117_fu_278_p1(10 - 1 downto 0);
    r_V_13_fu_311_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_13_fu_311_p0) * signed(r_V_13_fu_311_p1))), 20));
    r_V_14_fu_237_p3 <= (p_Val2_5_fu_209_p4 & ap_const_lv1_0);
    r_V_16_fu_413_p2 <= std_logic_vector(signed(sext_ln1118_7_fu_405_p1) - signed(sext_ln1118_3_fu_350_p1));
    r_V_17_fu_712_p2 <= std_logic_vector(signed(sext_ln1118_9_fu_708_p1) - signed(sext_ln1118_6_fu_673_p1));
    r_V_18_fu_328_p3 <= (tmp_1_reg_982 & ap_const_lv2_0);
    r_V_19_fu_480_p3 <= (tmp_5_reg_1048 & ap_const_lv2_0);
    r_V_20_fu_527_p2 <= std_logic_vector(signed(sext_ln1118_2_fu_335_p1) - signed(sext_ln700_fu_308_p1));
    r_V_2_fu_339_p3 <= (tmp_2_reg_992 & ap_const_lv1_0);
    r_V_4_fu_249_p0 <= sext_ln1118_4_fu_219_p1(10 - 1 downto 0);
    r_V_4_fu_249_p1 <= sext_ln1118_4_fu_219_p1(10 - 1 downto 0);
    r_V_4_fu_249_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_4_fu_249_p0) * signed(r_V_4_fu_249_p1))), 20));
    r_V_5_fu_398_p3 <= (p_Val2_5_reg_1011 & ap_const_lv2_0);
    r_V_8_fu_272_p0 <= tmp_5_fu_258_p4;
    r_V_8_fu_272_p1 <= sext_ln1118_4_fu_219_p1(10 - 1 downto 0);
    r_V_8_fu_272_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_8_fu_272_p0) * signed(r_V_8_fu_272_p1))), 20));
    ret_V_1_fu_732_p2 <= std_logic_vector(signed(ap_const_lv26_3F30000) + signed(sub_ln1192_5_fu_726_p2));
    ret_V_2_fu_771_p2 <= std_logic_vector(signed(ap_const_lv22_3FB000) + signed(add_ln1192_9_fu_766_p2));
    ret_V_3_fu_878_p2 <= std_logic_vector(signed(ap_const_lv22_3F8000) + signed(sub_ln1192_12_fu_872_p2));
    ret_V_4_fu_549_p2 <= std_logic_vector(signed(sext_ln703_fu_533_p1) - signed(sext_ln728_fu_545_p1));
    ret_V_5_fu_568_p2 <= std_logic_vector(signed(ap_const_lv26_3F90000) + signed(sub_ln1192_13_fu_562_p2));
    ret_V_fu_656_p2 <= std_logic_vector(signed(ap_const_lv22_3F5000) + signed(sub_ln1192_2_fu_650_p2));
    rhs_V_1_fu_609_p3 <= (tmp_1_reg_982_pp0_iter1_reg & ap_const_lv11_0);
    rhs_V_2_fu_639_p3 <= (tmp_2_reg_992_pp0_iter1_reg & ap_const_lv11_0);
    rhs_V_3_fu_718_p3 <= (r_V_17_fu_712_p2 & ap_const_lv12_0);
    rhs_V_5_fu_827_p3 <= (p_Val2_5_reg_1011_pp0_iter1_reg & ap_const_lv9_0);
    rhs_V_6_fu_844_p3 <= (tmp_1_reg_982_pp0_iter1_reg & ap_const_lv10_0);
    rhs_V_7_fu_861_p3 <= (tmp_5_reg_1048_pp0_iter1_reg & ap_const_lv10_0);
    rhs_V_8_fu_537_p3 <= (r_V_20_fu_527_p2 & ap_const_lv12_0);
    rhs_V_fu_291_p3 <= (p_Val2_5_reg_1011 & ap_const_lv8_0);
        sext_ln1117_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_982),20));

        sext_ln1118_11_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1048),13));

        sext_ln1118_12_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_19_fu_480_p3),13));

        sext_ln1118_13_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_reg_1011),18));

        sext_ln1118_1_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_175_p4),18));

        sext_ln1118_2_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_18_fu_328_p3),13));

        sext_ln1118_3_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_reg_1011),13));

        sext_ln1118_4_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_fu_209_p4),20));

        sext_ln1118_6_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_14_reg_1028_pp0_iter1_reg),14));

        sext_ln1118_7_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_fu_398_p3),13));

        sext_ln1118_8_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_fu_398_p3),18));

        sext_ln1118_9_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_6_fu_701_p3),14));

        sext_ln1192_11_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1022),22));

        sext_ln1192_13_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1022),18));

        sext_ln1192_14_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1048),18));

        sext_ln1192_18_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_5_fu_827_p3),22));

        sext_ln1192_19_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_6_fu_844_p3),22));

        sext_ln1192_1_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_291_p3),22));

        sext_ln1192_20_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_7_fu_861_p3),22));

        sext_ln1192_5_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1_fu_609_p3),22));

        sext_ln1192_7_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_2_fu_639_p3),22));

        sext_ln1192_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_992),18));

        sext_ln700_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_982),13));

        sext_ln703_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_519_p3),26));

        sext_ln728_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_8_fu_537_p3),26));

    shl_ln1118_6_fu_701_p3 <= (p_Val2_5_reg_1011_pp0_iter1_reg & ap_const_lv3_0);
    shl_ln1192_10_fu_491_p3 <= (grp_fu_958_p3 & ap_const_lv4_0);
    shl_ln1192_11_fu_758_p3 <= (mul_ln1192_12_fu_752_p2 & ap_const_lv8_0);
    shl_ln1192_12_fu_788_p3 <= (mul_ln1192_13_reg_1102 & ap_const_lv4_0);
    shl_ln1192_13_fu_801_p3 <= (mul_ln1192_14_reg_1107 & ap_const_lv4_0);
    shl_ln1192_14_fu_814_p3 <= (mul_ln1192_15_reg_1112 & ap_const_lv4_0);
    shl_ln1192_15_fu_555_p3 <= (grp_fu_973_p3 & ap_const_lv8_0);
    shl_ln1192_1_fu_584_p3 <= (trunc_ln1192_reg_1067 & ap_const_lv4_0);
    shl_ln1192_2_fu_596_p3 <= (mul_ln1192_2_reg_1072 & ap_const_lv4_0);
    shl_ln1192_3_fu_626_p3 <= (mul_ln1192_3_reg_1077 & ap_const_lv4_0);
    shl_ln1192_4_fu_359_p3 <= (mul_ln1192_4_fu_924_p2 & ap_const_lv4_0);
    shl_ln1192_5_fu_372_p3 <= (mul_ln1192_5_fu_931_p2 & ap_const_lv4_0);
    shl_ln1192_6_fu_385_p3 <= (trunc_ln1192_1_reg_1043 & ap_const_lv8_0);
    shl_ln1192_7_fu_676_p3 <= (mul_ln1192_6_reg_1087 & ap_const_lv8_0);
    shl_ln1192_8_fu_688_p3 <= (mul_ln1192_7_reg_1092 & ap_const_lv8_0);
    shl_ln1192_9_fu_444_p3 <= (mul_ln1192_9_fu_439_p2 & ap_const_lv4_0);
    shl_ln1192_s_fu_463_p3 <= (mul_ln1192_10_fu_457_p2 & ap_const_lv4_0);
    shl_ln_fu_281_p3 <= (mul_ln1192_reg_1006 & ap_const_lv4_0);
    sub_ln1192_10_fu_808_p2 <= std_logic_vector(unsigned(sub_ln1192_9_fu_795_p2) - unsigned(shl_ln1192_13_fu_801_p3));
    sub_ln1192_11_fu_855_p2 <= std_logic_vector(unsigned(add_ln1192_12_fu_838_p2) - unsigned(sext_ln1192_19_fu_851_p1));
    sub_ln1192_12_fu_872_p2 <= std_logic_vector(unsigned(sub_ln1192_11_fu_855_p2) - unsigned(sext_ln1192_20_fu_868_p1));
    sub_ln1192_13_fu_562_p2 <= std_logic_vector(unsigned(ret_V_4_fu_549_p2) - unsigned(shl_ln1192_15_fu_555_p3));
    sub_ln1192_1_fu_603_p2 <= std_logic_vector(unsigned(add_ln1192_1_fu_591_p2) - unsigned(shl_ln1192_2_fu_596_p3));
    sub_ln1192_2_fu_650_p2 <= std_logic_vector(unsigned(add_ln1192_3_fu_633_p2) - unsigned(sext_ln1192_7_fu_646_p1));
    sub_ln1192_3_fu_379_p2 <= std_logic_vector(unsigned(shl_ln1192_5_fu_372_p3) - unsigned(shl_ln1192_4_fu_359_p3));
    sub_ln1192_4_fu_695_p2 <= std_logic_vector(unsigned(add_ln1192_6_fu_683_p2) - unsigned(shl_ln1192_8_fu_688_p3));
    sub_ln1192_5_fu_726_p2 <= std_logic_vector(unsigned(sub_ln1192_4_fu_695_p2) - unsigned(rhs_V_3_fu_718_p3));
    sub_ln1192_7_fu_452_p2 <= std_logic_vector(signed(grp_fu_949_p3) - signed(shl_ln1192_9_fu_444_p3));
    sub_ln1192_8_fu_498_p2 <= std_logic_vector(unsigned(add_ln1192_8_fu_471_p2) - unsigned(shl_ln1192_10_fu_491_p3));
    sub_ln1192_9_fu_795_p2 <= std_logic_vector(unsigned(ap_const_lv22_0) - unsigned(shl_ln1192_12_fu_788_p3));
    tmp_1_fu_175_p4 <= x_V_in_sig(159 downto 150);
    tmp_5_fu_258_p4 <= x_V_in_sig(39 downto 30);
    trunc_ln1117_fu_171_p1 <= x_V_in_sig(10 - 1 downto 0);
    trunc_ln1192_1_fu_255_p1 <= r_V_15_fu_895_p2(18 - 1 downto 0);
    trunc_ln1192_fu_324_p1 <= r_V_13_fu_311_p2(18 - 1 downto 0);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, x_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V_ap_vld, x_V, x_V_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

    y_0_V <= ret_V_fu_656_p2(21 downto 12);

    y_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_V <= ret_V_1_fu_732_p2(25 downto 16);

    y_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= ret_V_2_fu_771_p2(21 downto 12);

    y_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_3_V <= ret_V_3_fu_878_p2(21 downto 12);

    y_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= trunc_ln708_4_reg_1117;

    y_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
