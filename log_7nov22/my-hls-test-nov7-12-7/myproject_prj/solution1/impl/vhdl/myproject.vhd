-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (191 downto 0);
    y_0_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.367812,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=38,HLS_SYN_FF=1672,HLS_SYN_LUT=1610,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv192_lc_1 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv17_B : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv32_FF300000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111001100000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv27_7F50000 : STD_LOGIC_VECTOR (26 downto 0) := "111111101010000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_FE600000 : STD_LOGIC_VECTOR (31 downto 0) := "11111110011000000000000000000000";
    constant ap_const_lv27_7FB0000 : STD_LOGIC_VECTOR (26 downto 0) := "111111110110000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv27_7F88000 : STD_LOGIC_VECTOR (26 downto 0) := "111111110001000000000000000";
    constant ap_const_lv17_3A : STD_LOGIC_VECTOR (16 downto 0) := "00000000000111010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_preg : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (191 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal trunc_ln1117_fu_177_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1117_reg_1394 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_181_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_reg_1399 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_reg_1399_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_reg_1399_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1192_fu_191_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1192_reg_1410 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1192_reg_1410_pp0_iter1_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1117_fu_195_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1117_reg_1415 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_fu_203_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_reg_1421 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_reg_1421_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_reg_1421_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_fu_1143_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_reg_1431 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1192_2_fu_225_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1192_2_reg_1436 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1192_2_reg_1436_pp0_iter1_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_1_fu_1149_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_1_reg_1443 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Val2_6_fu_233_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_6_reg_1448 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_6_reg_1448_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_2_fu_243_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_2_reg_1464 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_2_reg_1464_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_48_fu_1155_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_48_reg_1469 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln1192_fu_255_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln1192_reg_1474 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_13_fu_258_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1118_13_reg_1479 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_reg_1485 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_reg_1485_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_reg_1485_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_fu_272_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_reg_1492 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_reg_1492_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_reg_1492_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_36_fu_1162_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_36_reg_1504 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_43_fu_1168_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_43_reg_1509 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_45_fu_1174_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_45_reg_1514 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_1_fu_286_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln1192_1_reg_1519 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_8_fu_318_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_8_reg_1524 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_47_fu_329_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_47_reg_1529 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1192_2_fu_363_p2 : STD_LOGIC_VECTOR (26 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln1192_2_fu_363_p2 : signal is "no";
    signal add_ln1192_2_reg_1534 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_12_fu_1189_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_12_reg_1539 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_22_fu_1194_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_22_reg_1544 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_1_fu_378_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_1_reg_1549 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_23_fu_1200_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_23_reg_1555 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_50_fu_389_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_50_reg_1560 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_50_reg_1560_pp0_iter2_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_51_fu_1206_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_51_reg_1566 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_32_fu_1211_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_32_reg_1571 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1192_19_fu_398_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1192_19_reg_1576 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1192_19_reg_1576_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_35_fu_401_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_35_reg_1581 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_fu_1217_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1118_reg_1586 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_20_fu_1222_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1192_20_reg_1591 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln1192_1_fu_410_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln1192_1_reg_1596 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_27_fu_1228_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_27_reg_1601 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_24_fu_1234_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1192_24_reg_1606 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1192_25_fu_1240_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1192_25_reg_1611 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln1192_2_fu_464_p2 : STD_LOGIC_VECTOR (26 downto 0);
    attribute use_dsp48 of sub_ln1192_2_fu_464_p2 : signal is "no";
    signal sub_ln1192_2_reg_1616 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1192_5_fu_1261_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_5_reg_1621 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln1192_6_fu_535_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1192_6_reg_1626 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1192_9_fu_1287_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1192_9_reg_1631 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1192_10_fu_1293_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1192_10_reg_1636 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_1299_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_11_reg_1641 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1306_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_12_reg_1646 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_52_fu_569_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_52_reg_1651 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1192_10_fu_618_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1192_10_reg_1656 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1192_16_fu_1341_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_16_reg_1661 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_17_fu_1347_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_17_reg_1666 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln1192_13_fu_659_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1192_13_reg_1671 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1192_22_fu_1368_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_22_reg_1676 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1192_19_fu_668_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1192_19_reg_1681 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1192_23_fu_1373_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_23_reg_1686 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln708_4_reg_1691 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal r_V_fu_213_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln1192_1_fu_302_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln_fu_289_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln1118_6_fu_325_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1118_4_fu_315_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal rhs_V_fu_335_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1192_3_fu_343_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln1192_fu_309_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1192_2_fu_356_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_1180_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_35_fu_401_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_53_fu_446_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1253_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1246_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1192_3_fu_457_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_6_fu_472_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1192_6_fu_1266_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1192_7_fu_1273_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1192_6_fu_509_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1192_5_fu_493_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1192_8_fu_1280_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1192_7_fu_528_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1192_4_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_fu_544_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1118_6_fu_558_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_20_fu_565_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_5_fu_431_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln1118_7_fu_588_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1323_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1314_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1192_11_fu_599_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_1332_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1192_12_fu_611_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln1192_9_fu_606_p2 : STD_LOGIC_VECTOR (26 downto 0);
    attribute use_dsp48 of sub_ln1192_9_fu_606_p2 : signal is "no";
    signal mul_ln1192_21_fu_1361_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1353_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1192_16_fu_640_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1192_17_fu_652_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln1192_13_fu_647_p2 : STD_LOGIC_VECTOR (26 downto 0);
    attribute use_dsp48 of sub_ln1192_13_fu_647_p2 : signal is "no";
    signal r_V_54_fu_678_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln1192_18_fu_689_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln1118_19_fu_551_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_3_fu_428_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_55_fu_701_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_9_fu_707_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sub_ln1192_19_fu_695_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln1192_29_fu_715_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1192_18_fu_719_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1192_22_fu_733_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1192_21_fu_725_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1118_8_fu_453_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln700_fu_434_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_56_fu_746_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_10_fu_752_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln1192_19_fu_740_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1192_32_fu_760_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1192_23_fu_770_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1192_20_fu_764_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1379_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln1192_20_fu_777_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1192_24_fu_783_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1192_21_fu_790_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_4_fu_796_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_fu_812_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1192_7_fu_819_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1118_5_fu_838_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_12_fu_845_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_9_fu_828_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln1192_4_fu_831_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1192_3_fu_823_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_49_fu_849_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1192_4_fu_855_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal rhs_V_2_fu_861_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln1192_3_fu_869_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ret_V_fu_875_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1192_8_fu_892_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1192_9_fu_904_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1192_5_fu_899_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1192_s_fu_917_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1192_7_fu_911_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1192_8_fu_924_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1192_10_fu_930_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1192_6_fu_937_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_3_fu_943_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1192_7_fu_950_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_1_fu_956_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1192_13_fu_973_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln1192_10_fu_980_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1192_14_fu_985_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1192_18_fu_1388_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln1192_15_fu_998_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln1192_11_fu_992_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1192_11_fu_1005_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ret_V_2_fu_1011_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1192_18_fu_1028_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln1192_14_fu_1035_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1192_20_fu_1045_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1192_14_fu_1040_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal rhs_V_5_fu_1058_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1192_25_fu_1065_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1192_15_fu_1052_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal rhs_V_6_fu_1075_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln1192_16_fu_1069_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln1192_26_fu_1082_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal rhs_V_7_fu_1092_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln1192_15_fu_1086_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln1192_27_fu_1099_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal rhs_V_8_fu_1109_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1192_16_fu_1103_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln1192_28_fu_1116_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln1192_17_fu_1120_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ret_V_3_fu_1126_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_36_fu_1162_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_36_fu_1162_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_43_fu_1168_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_21_fu_282_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_45_fu_1174_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_45_fu_1174_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1180_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1180_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_12_fu_1189_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_23_fu_1200_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1116_3_fu_385_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_51_fu_1206_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_51_fu_1206_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_32_fu_1211_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1118_fu_1217_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_20_fu_1222_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_24_fu_1234_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1192_31_fu_422_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1192_25_fu_1240_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1246_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1253_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1253_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_5_fu_1261_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_6_fu_1266_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1192_9_fu_487_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1192_7_fu_1273_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1192_12_fu_506_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1192_8_fu_1280_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_17_fu_522_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_9_fu_1287_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_13_fu_541_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1192_9_fu_1287_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_10_fu_1293_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_10_fu_1293_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1299_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1299_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1299_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1306_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1306_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1192_16_fu_555_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1314_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1314_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_1323_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1192_17_fu_575_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1332_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_16_fu_1341_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_17_fu_1347_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_17_fu_1347_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_21_fu_1361_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_22_fu_1368_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_23_fu_1373_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1379_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_18_fu_1388_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1192_18_fu_1388_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mul_mul_13s_12s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_mul_mul_12s_12s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_mul_mul_13s_12s_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component myproject_mul_mul_12s_12s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_mac_muladd_25s_12s_27ns_27_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (26 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component myproject_mul_mul_14s_12s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mul_mul_24s_12s_27_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component myproject_mac_mulsub_24s_12s_27ns_27_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (26 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component myproject_am_addmul_13s_15s_12s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_mul_mul_14s_12s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_mul_mul_26s_12s_27_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (25 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component myproject_mul_mul_25s_12s_27_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component myproject_mul_mul_15s_12s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_am_addmul_15s_12s_12s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_am_submul_15s_13s_12s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_mac_mul_sub_25s_12s_27ns_27_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (26 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component myproject_am_submul_14s_12s_12s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_mul_mul_17s_12s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_mac_mulsub_24s_12s_27s_27_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (26 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component myproject_am_submul_15s_12s_12s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_mul_mul_7ns_12s_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;



begin
    myproject_mul_mul_13s_12s_22_1_1_U1 : component myproject_mul_mul_13s_12s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => r_V_fu_213_p3,
        din1 => tmp_1_fu_181_p4,
        dout => mul_ln1192_fu_1143_p2);

    myproject_mul_mul_12s_12s_22_1_1_U2 : component myproject_mul_mul_12s_12s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => tmp_2_fu_203_p4,
        din1 => trunc_ln1117_fu_177_p1,
        dout => mul_ln1192_1_fu_1149_p2);

    myproject_mul_mul_13s_12s_25_1_1_U3 : component myproject_mul_mul_13s_12s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 12,
        dout_WIDTH => 25)
    port map (
        din0 => r_V_2_fu_243_p3,
        din1 => tmp_1_fu_181_p4,
        dout => r_V_48_fu_1155_p2);

    myproject_mul_mul_12s_12s_24_1_1_U4 : component myproject_mul_mul_12s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_36_fu_1162_p0,
        din1 => r_V_36_fu_1162_p1,
        dout => r_V_36_fu_1162_p2);

    myproject_mul_mul_12s_12s_24_1_1_U5 : component myproject_mul_mul_12s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_43_fu_1168_p0,
        din1 => tmp_1_fu_181_p4,
        dout => r_V_43_fu_1168_p2);

    myproject_mul_mul_12s_12s_24_1_1_U6 : component myproject_mul_mul_12s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_45_fu_1174_p0,
        din1 => r_V_45_fu_1174_p1,
        dout => r_V_45_fu_1174_p2);

    myproject_mac_muladd_25s_12s_27ns_27_1_1_U7 : component myproject_mac_muladd_25s_12s_27ns_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 12,
        din2_WIDTH => 27,
        dout_WIDTH => 27)
    port map (
        din0 => r_V_48_reg_1469,
        din1 => grp_fu_1180_p1,
        din2 => grp_fu_1180_p2,
        dout => grp_fu_1180_p3);

    myproject_mul_mul_12s_12s_24_1_1_U8 : component myproject_mul_mul_12s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => tmp_2_reg_1421,
        din1 => r_V_12_fu_1189_p1,
        dout => r_V_12_fu_1189_p2);

    myproject_mul_mul_14s_12s_26_1_1_U9 : component myproject_mul_mul_14s_12s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => r_V_8_fu_318_p3,
        din1 => p_Val2_6_reg_1448,
        dout => r_V_22_fu_1194_p2);

    myproject_mul_mul_13s_12s_25_1_1_U10 : component myproject_mul_mul_13s_12s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 12,
        dout_WIDTH => 25)
    port map (
        din0 => r_V_23_fu_1200_p0,
        din1 => p_Val2_6_reg_1448,
        dout => r_V_23_fu_1200_p2);

    myproject_mul_mul_12s_12s_24_1_1_U11 : component myproject_mul_mul_12s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_51_fu_1206_p0,
        din1 => r_V_51_fu_1206_p1,
        dout => r_V_51_fu_1206_p2);

    myproject_mul_mul_13s_12s_25_1_1_U12 : component myproject_mul_mul_13s_12s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 12,
        dout_WIDTH => 25)
    port map (
        din0 => r_V_32_fu_1211_p0,
        din1 => tmp_5_reg_1492,
        dout => r_V_32_fu_1211_p2);

    myproject_mul_mul_12s_12s_24_1_1_U13 : component myproject_mul_mul_12s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => trunc_ln1117_reg_1394,
        din1 => mul_ln1118_fu_1217_p1,
        dout => mul_ln1118_fu_1217_p2);

    myproject_mul_mul_24s_12s_27_1_1_U14 : component myproject_mul_mul_24s_12s_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 12,
        dout_WIDTH => 27)
    port map (
        din0 => r_V_36_reg_1504,
        din1 => mul_ln1192_20_fu_1222_p1,
        dout => mul_ln1192_20_fu_1222_p2);

    myproject_mul_mul_12s_12s_22_1_1_U15 : component myproject_mul_mul_12s_12s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => tmp_5_reg_1492,
        din1 => p_Val2_6_reg_1448,
        dout => mul_ln1192_27_fu_1228_p2);

    myproject_mul_mul_24s_12s_27_1_1_U16 : component myproject_mul_mul_24s_12s_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 12,
        dout_WIDTH => 27)
    port map (
        din0 => r_V_43_reg_1509,
        din1 => mul_ln1192_24_fu_1234_p1,
        dout => mul_ln1192_24_fu_1234_p2);

    myproject_mul_mul_24s_12s_27_1_1_U17 : component myproject_mul_mul_24s_12s_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 12,
        dout_WIDTH => 27)
    port map (
        din0 => r_V_45_reg_1514,
        din1 => mul_ln1192_25_fu_1240_p1,
        dout => mul_ln1192_25_fu_1240_p2);

    myproject_mac_mulsub_24s_12s_27ns_27_1_1_U18 : component myproject_mac_mulsub_24s_12s_27ns_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 12,
        din2_WIDTH => 27,
        dout_WIDTH => 27)
    port map (
        din0 => r_V_12_reg_1539,
        din1 => grp_fu_1246_p1,
        din2 => add_ln1192_2_reg_1534,
        dout => grp_fu_1246_p3);

    myproject_am_addmul_13s_15s_12s_22_1_1_U19 : component myproject_am_addmul_13s_15s_12s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 15,
        din2_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => r_V_2_reg_1464_pp0_iter1_reg,
        din1 => grp_fu_1253_p1,
        din2 => grp_fu_1253_p2,
        dout => grp_fu_1253_p3);

    myproject_mul_mul_14s_12s_22_1_1_U20 : component myproject_mul_mul_14s_12s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => r_V_6_fu_472_p3,
        din1 => mul_ln1192_5_fu_1261_p1,
        dout => mul_ln1192_5_fu_1261_p2);

    myproject_mul_mul_26s_12s_27_1_1_U21 : component myproject_mul_mul_26s_12s_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 26,
        din1_WIDTH => 12,
        dout_WIDTH => 27)
    port map (
        din0 => r_V_22_reg_1544,
        din1 => mul_ln1192_6_fu_1266_p1,
        dout => mul_ln1192_6_fu_1266_p2);

    myproject_mul_mul_25s_12s_27_1_1_U22 : component myproject_mul_mul_25s_12s_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 12,
        dout_WIDTH => 27)
    port map (
        din0 => r_V_23_reg_1555,
        din1 => mul_ln1192_7_fu_1273_p1,
        dout => mul_ln1192_7_fu_1273_p2);

    myproject_mul_mul_15s_12s_22_1_1_U23 : component myproject_mul_mul_15s_12s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => r_V_50_reg_1560,
        din1 => mul_ln1192_8_fu_1280_p1,
        dout => mul_ln1192_8_fu_1280_p2);

    myproject_mul_mul_24s_12s_27_1_1_U24 : component myproject_mul_mul_24s_12s_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 12,
        dout_WIDTH => 27)
    port map (
        din0 => mul_ln1192_9_fu_1287_p0,
        din1 => mul_ln1192_9_fu_1287_p1,
        dout => mul_ln1192_9_fu_1287_p2);

    myproject_mul_mul_24s_12s_27_1_1_U25 : component myproject_mul_mul_24s_12s_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 12,
        dout_WIDTH => 27)
    port map (
        din0 => mul_ln1192_10_fu_1293_p0,
        din1 => mul_ln1192_10_fu_1293_p1,
        dout => mul_ln1192_10_fu_1293_p2);

    myproject_am_addmul_15s_12s_12s_22_1_1_U26 : component myproject_am_addmul_15s_12s_12s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_1299_p0,
        din1 => grp_fu_1299_p1,
        din2 => grp_fu_1299_p2,
        dout => grp_fu_1299_p3);

    myproject_am_submul_15s_13s_12s_22_1_1_U27 : component myproject_am_submul_15s_13s_12s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 13,
        din2_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_1306_p0,
        din1 => r_V_1_reg_1549,
        din2 => grp_fu_1306_p2,
        dout => grp_fu_1306_p3);

    myproject_mac_mul_sub_25s_12s_27ns_27_1_1_U28 : component myproject_mac_mul_sub_25s_12s_27ns_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 12,
        din2_WIDTH => 27,
        dout_WIDTH => 27)
    port map (
        din0 => r_V_32_reg_1571,
        din1 => grp_fu_1314_p1,
        din2 => grp_fu_1314_p2,
        dout => grp_fu_1314_p3);

    myproject_am_submul_14s_12s_12s_22_1_1_U29 : component myproject_am_submul_14s_12s_12s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => shl_ln1118_7_fu_588_p3,
        din1 => tmp_1_reg_1399_pp0_iter1_reg,
        din2 => grp_fu_1323_p2,
        dout => grp_fu_1323_p3);

    myproject_am_submul_14s_12s_12s_22_1_1_U30 : component myproject_am_submul_14s_12s_12s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => r_V_6_fu_472_p3,
        din1 => tmp_2_reg_1421_pp0_iter1_reg,
        din2 => grp_fu_1332_p2,
        dout => grp_fu_1332_p3);

    myproject_mul_mul_17s_12s_22_1_1_U31 : component myproject_mul_mul_17s_12s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => r_V_35_reg_1581,
        din1 => mul_ln1192_16_fu_1341_p1,
        dout => mul_ln1192_16_fu_1341_p2);

    myproject_mul_mul_12s_12s_22_1_1_U32 : component myproject_mul_mul_12s_12s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => mul_ln1192_17_fu_1347_p0,
        din1 => mul_ln1192_17_fu_1347_p1,
        dout => mul_ln1192_17_fu_1347_p2);

    myproject_mac_mulsub_24s_12s_27s_27_1_1_U33 : component myproject_mac_mulsub_24s_12s_27s_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 12,
        din2_WIDTH => 27,
        dout_WIDTH => 27)
    port map (
        din0 => mul_ln1118_reg_1586,
        din1 => p_Val2_6_reg_1448_pp0_iter1_reg,
        din2 => mul_ln1192_20_reg_1591,
        dout => grp_fu_1353_p3);

    myproject_mul_mul_15s_12s_22_1_1_U34 : component myproject_mul_mul_15s_12s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => r_V_3_fu_544_p3,
        din1 => mul_ln1192_21_fu_1361_p1,
        dout => mul_ln1192_21_fu_1361_p2);

    myproject_mul_mul_13s_12s_22_1_1_U35 : component myproject_mul_mul_13s_12s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => r_V_1_reg_1549,
        din1 => mul_ln1192_22_fu_1368_p1,
        dout => mul_ln1192_22_fu_1368_p2);

    myproject_mul_mul_15s_12s_22_1_1_U36 : component myproject_mul_mul_15s_12s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => r_V_47_reg_1529,
        din1 => mul_ln1192_23_fu_1373_p1,
        dout => mul_ln1192_23_fu_1373_p2);

    myproject_am_submul_15s_12s_12s_22_1_1_U37 : component myproject_am_submul_15s_12s_12s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => r_V_54_fu_678_p3,
        din1 => tmp_5_reg_1492_pp0_iter1_reg,
        din2 => grp_fu_1379_p2,
        dout => grp_fu_1379_p3);

    myproject_mul_mul_7ns_12s_17_1_1_U38 : component myproject_mul_mul_7ns_12s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 12,
        dout_WIDTH => 17)
    port map (
        din0 => mul_ln1192_18_fu_1388_p0,
        din1 => mul_ln1192_18_fu_1388_p1,
        dout => mul_ln1192_18_fu_1388_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv192_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln1192_10_reg_1656 <= add_ln1192_10_fu_618_p2;
                add_ln1192_13_reg_1671 <= add_ln1192_13_fu_659_p2;
                    add_ln1192_6_reg_1626(31 downto 5) <= add_ln1192_6_fu_535_p2(31 downto 5);
                mul_ln1192_10_reg_1636 <= mul_ln1192_10_fu_1293_p2;
                mul_ln1192_16_reg_1661 <= mul_ln1192_16_fu_1341_p2;
                mul_ln1192_17_reg_1666 <= mul_ln1192_17_fu_1347_p2;
                mul_ln1192_22_reg_1676 <= mul_ln1192_22_fu_1368_p2;
                mul_ln1192_23_reg_1686 <= mul_ln1192_23_fu_1373_p2;
                mul_ln1192_5_reg_1621 <= mul_ln1192_5_fu_1261_p2;
                mul_ln1192_9_reg_1631 <= mul_ln1192_9_fu_1287_p2;
                r_V_50_reg_1560_pp0_iter2_reg <= r_V_50_reg_1560;
                    r_V_52_reg_1651(16 downto 2) <= r_V_52_fu_569_p2(16 downto 2);
                sext_ln1192_19_reg_1576_pp0_iter2_reg <= sext_ln1192_19_reg_1576;
                    shl_ln1192_19_reg_1681(26 downto 5) <= shl_ln1192_19_fu_668_p3(26 downto 5);
                sub_ln1192_2_reg_1616 <= sub_ln1192_2_fu_464_p2;
                tmp_1_reg_1399_pp0_iter2_reg <= tmp_1_reg_1399_pp0_iter1_reg;
                tmp_2_reg_1421_pp0_iter2_reg <= tmp_2_reg_1421_pp0_iter1_reg;
                tmp_4_reg_1485_pp0_iter2_reg <= tmp_4_reg_1485_pp0_iter1_reg;
                tmp_5_reg_1492_pp0_iter2_reg <= tmp_5_reg_1492_pp0_iter1_reg;
                trunc_ln708_4_reg_1691 <= ret_V_4_fu_796_p2(31 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1192_2_reg_1534 <= add_ln1192_2_fu_363_p2;
                mul_ln1118_reg_1586 <= mul_ln1118_fu_1217_p2;
                mul_ln1192_1_reg_1443 <= mul_ln1192_1_fu_1149_p2;
                mul_ln1192_20_reg_1591 <= mul_ln1192_20_fu_1222_p2;
                mul_ln1192_24_reg_1606 <= mul_ln1192_24_fu_1234_p2;
                mul_ln1192_25_reg_1611 <= mul_ln1192_25_fu_1240_p2;
                mul_ln1192_27_reg_1601 <= mul_ln1192_27_fu_1228_p2;
                mul_ln1192_reg_1431 <= mul_ln1192_fu_1143_p2;
                p_Val2_6_reg_1448 <= x_V_in_sig(179 downto 168);
                p_Val2_6_reg_1448_pp0_iter1_reg <= p_Val2_6_reg_1448;
                r_V_12_reg_1539 <= r_V_12_fu_1189_p2;
                    r_V_1_reg_1549(12 downto 1) <= r_V_1_fu_378_p3(12 downto 1);
                r_V_22_reg_1544 <= r_V_22_fu_1194_p2;
                r_V_23_reg_1555 <= r_V_23_fu_1200_p2;
                    r_V_2_reg_1464(12 downto 1) <= r_V_2_fu_243_p3(12 downto 1);
                    r_V_2_reg_1464_pp0_iter1_reg(12 downto 1) <= r_V_2_reg_1464(12 downto 1);
                r_V_32_reg_1571 <= r_V_32_fu_1211_p2;
                r_V_35_reg_1581 <= r_V_35_fu_401_p2;
                r_V_36_reg_1504 <= r_V_36_fu_1162_p2;
                r_V_43_reg_1509 <= r_V_43_fu_1168_p2;
                r_V_45_reg_1514 <= r_V_45_fu_1174_p2;
                r_V_47_reg_1529 <= r_V_47_fu_329_p2;
                r_V_48_reg_1469 <= r_V_48_fu_1155_p2;
                r_V_50_reg_1560 <= r_V_50_fu_389_p2;
                r_V_51_reg_1566 <= r_V_51_fu_1206_p2;
                    r_V_8_reg_1524(13 downto 2) <= r_V_8_fu_318_p3(13 downto 2);
                sext_ln1117_reg_1415 <= sext_ln1117_fu_195_p1;
                sext_ln1118_13_reg_1479 <= sext_ln1118_13_fu_258_p1;
                sext_ln1192_19_reg_1576 <= sext_ln1192_19_fu_398_p1;
                sext_ln1192_1_reg_1519 <= sext_ln1192_1_fu_286_p1;
                sext_ln1192_2_reg_1436 <= sext_ln1192_2_fu_225_p1;
                sext_ln1192_2_reg_1436_pp0_iter1_reg <= sext_ln1192_2_reg_1436;
                sext_ln1192_reg_1410 <= sext_ln1192_fu_191_p1;
                sext_ln1192_reg_1410_pp0_iter1_reg <= sext_ln1192_reg_1410;
                tmp_1_reg_1399 <= x_V_in_sig(191 downto 180);
                tmp_1_reg_1399_pp0_iter1_reg <= tmp_1_reg_1399;
                tmp_2_reg_1421 <= x_V_in_sig(35 downto 24);
                tmp_2_reg_1421_pp0_iter1_reg <= tmp_2_reg_1421;
                tmp_4_reg_1485 <= x_V_in_sig(59 downto 48);
                tmp_4_reg_1485_pp0_iter1_reg <= tmp_4_reg_1485;
                tmp_5_reg_1492 <= x_V_in_sig(47 downto 36);
                tmp_5_reg_1492_pp0_iter1_reg <= tmp_5_reg_1492;
                trunc_ln1117_reg_1394 <= trunc_ln1117_fu_177_p1;
                trunc_ln1192_1_reg_1596 <= trunc_ln1192_1_fu_410_p1;
                trunc_ln1192_reg_1474 <= trunc_ln1192_fu_255_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                mul_ln1192_11_reg_1641 <= grp_fu_1299_p3;
                mul_ln1192_12_reg_1646 <= grp_fu_1306_p3;
            end if;
        end if;
    end process;
    r_V_2_reg_1464(0) <= '0';
    r_V_2_reg_1464_pp0_iter1_reg(0) <= '0';
    r_V_8_reg_1524(1 downto 0) <= "00";
    r_V_1_reg_1549(0) <= '0';
    add_ln1192_6_reg_1626(4 downto 0) <= "00000";
    r_V_52_reg_1651(1 downto 0) <= "00";
    shl_ln1192_19_reg_1681(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1192_10_fu_618_p2 <= std_logic_vector(unsigned(shl_ln1192_12_fu_611_p3) + unsigned(sub_ln1192_9_fu_606_p2));
    add_ln1192_11_fu_1005_p2 <= std_logic_vector(unsigned(shl_ln1192_15_fu_998_p3) + unsigned(sub_ln1192_11_fu_992_p2));
    add_ln1192_13_fu_659_p2 <= std_logic_vector(unsigned(shl_ln1192_17_fu_652_p3) + unsigned(sub_ln1192_13_fu_647_p2));
    add_ln1192_14_fu_1040_p2 <= std_logic_vector(unsigned(shl_ln1192_19_reg_1681) + unsigned(sub_ln1192_14_fu_1035_p2));
    add_ln1192_15_fu_1052_p2 <= std_logic_vector(unsigned(shl_ln1192_20_fu_1045_p3) + unsigned(add_ln1192_14_fu_1040_p2));
    add_ln1192_16_fu_1069_p2 <= std_logic_vector(signed(sext_ln1192_25_fu_1065_p1) + signed(add_ln1192_15_fu_1052_p2));
    add_ln1192_18_fu_719_p2 <= std_logic_vector(unsigned(sub_ln1192_19_fu_695_p2) + unsigned(sext_ln1192_29_fu_715_p1));
    add_ln1192_19_fu_740_p2 <= std_logic_vector(unsigned(shl_ln1192_22_fu_733_p3) + unsigned(shl_ln1192_21_fu_725_p3));
    add_ln1192_20_fu_777_p2 <= std_logic_vector(unsigned(shl_ln1192_23_fu_770_p3) + unsigned(sub_ln1192_20_fu_764_p2));
    add_ln1192_2_fu_363_p2 <= std_logic_vector(unsigned(shl_ln1192_2_fu_356_p3) + unsigned(grp_fu_1180_p3));
    add_ln1192_3_fu_823_p2 <= std_logic_vector(signed(sext_ln1192_7_fu_819_p1) + signed(sub_ln1192_2_reg_1616));
    add_ln1192_4_fu_855_p2 <= std_logic_vector(unsigned(shl_ln1192_4_fu_831_p3) + unsigned(add_ln1192_3_fu_823_p2));
    add_ln1192_6_fu_535_p2 <= std_logic_vector(unsigned(shl_ln1192_7_fu_528_p3) + unsigned(sub_ln1192_4_fu_516_p2));
    add_ln1192_7_fu_911_p2 <= std_logic_vector(unsigned(shl_ln1192_9_fu_904_p3) + unsigned(sub_ln1192_5_fu_899_p2));
    add_ln1192_8_fu_924_p2 <= std_logic_vector(unsigned(shl_ln1192_s_fu_917_p3) + unsigned(add_ln1192_7_fu_911_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1180_p1 <= sext_ln1192_1_fu_286_p1(12 - 1 downto 0);
    grp_fu_1180_p2 <= std_logic_vector(signed(sext_ln1192_3_fu_343_p1) + signed(sub_ln1192_fu_309_p2));
    grp_fu_1246_p1 <= sext_ln1192_1_reg_1519(12 - 1 downto 0);
    grp_fu_1253_p1 <= sext_ln1118_8_fu_453_p1(15 - 1 downto 0);
    grp_fu_1253_p2 <= sext_ln1192_2_reg_1436_pp0_iter1_reg(12 - 1 downto 0);
    grp_fu_1299_p0 <= sext_ln1118_19_fu_551_p1(15 - 1 downto 0);
    grp_fu_1299_p1 <= sext_ln1118_3_fu_428_p1(12 - 1 downto 0);
    grp_fu_1299_p2 <= sext_ln1192_reg_1410_pp0_iter1_reg(12 - 1 downto 0);
    grp_fu_1306_p0 <= sext_ln1118_19_fu_551_p1(15 - 1 downto 0);
    grp_fu_1306_p2 <= sext_ln1192_16_fu_555_p1(12 - 1 downto 0);
    grp_fu_1314_p1 <= sext_ln1192_12_fu_506_p1(12 - 1 downto 0);
    grp_fu_1314_p2 <= (p_Val2_6_reg_1448_pp0_iter1_reg & ap_const_lv15_0);
    grp_fu_1323_p2 <= sext_ln1192_17_fu_575_p1(12 - 1 downto 0);
    grp_fu_1332_p2 <= sext_ln1192_17_fu_575_p1(12 - 1 downto 0);
    grp_fu_1379_p2 <= sext_ln1192_17_fu_575_p1(12 - 1 downto 0);
    mul_ln1118_fu_1217_p1 <= sext_ln1118_13_reg_1479(12 - 1 downto 0);
    mul_ln1192_10_fu_1293_p0 <= sext_ln1192_13_fu_541_p1(24 - 1 downto 0);
    mul_ln1192_10_fu_1293_p1 <= sext_ln1192_12_fu_506_p1(12 - 1 downto 0);
    mul_ln1192_16_fu_1341_p1 <= sext_ln1192_17_fu_575_p1(12 - 1 downto 0);
    mul_ln1192_17_fu_1347_p0 <= sext_ln1192_16_fu_555_p1(12 - 1 downto 0);
    mul_ln1192_17_fu_1347_p1 <= sext_ln1192_17_fu_575_p1(12 - 1 downto 0);
    mul_ln1192_18_fu_1388_p0 <= ap_const_lv17_3A(7 - 1 downto 0);
    mul_ln1192_18_fu_1388_p1 <= sext_ln1192_19_reg_1576_pp0_iter2_reg(12 - 1 downto 0);
    mul_ln1192_20_fu_1222_p1 <= sext_ln1192_1_fu_286_p1(12 - 1 downto 0);
    mul_ln1192_21_fu_1361_p1 <= sext_ln1118_17_fu_522_p1(12 - 1 downto 0);
    mul_ln1192_22_fu_1368_p1 <= sext_ln1192_2_reg_1436_pp0_iter1_reg(12 - 1 downto 0);
    mul_ln1192_23_fu_1373_p1 <= sext_ln1192_16_fu_555_p1(12 - 1 downto 0);
    mul_ln1192_24_fu_1234_p1 <= sext_ln1192_31_fu_422_p1(12 - 1 downto 0);
    mul_ln1192_25_fu_1240_p1 <= sext_ln1192_31_fu_422_p1(12 - 1 downto 0);
    mul_ln1192_5_fu_1261_p1 <= sext_ln1192_2_reg_1436_pp0_iter1_reg(12 - 1 downto 0);
    mul_ln1192_6_fu_1266_p1 <= sext_ln1192_9_fu_487_p1(12 - 1 downto 0);
    mul_ln1192_7_fu_1273_p1 <= sext_ln1192_12_fu_506_p1(12 - 1 downto 0);
    mul_ln1192_8_fu_1280_p1 <= sext_ln1118_17_fu_522_p1(12 - 1 downto 0);
    mul_ln1192_9_fu_1287_p0 <= sext_ln1192_13_fu_541_p1(24 - 1 downto 0);
    mul_ln1192_9_fu_1287_p1 <= sext_ln1192_9_fu_487_p1(12 - 1 downto 0);
    p_Val2_6_fu_233_p4 <= x_V_in_sig(179 downto 168);
    r_V_12_fu_1189_p1 <= sext_ln1117_reg_1415(12 - 1 downto 0);
    r_V_1_fu_378_p3 <= (p_Val2_6_reg_1448 & ap_const_lv1_0);
    r_V_23_fu_1200_p0 <= sext_ln1116_3_fu_385_p1(13 - 1 downto 0);
    r_V_2_fu_243_p3 <= (tmp_1_fu_181_p4 & ap_const_lv1_0);
    r_V_32_fu_1211_p0 <= sext_ln1116_3_fu_385_p1(13 - 1 downto 0);
    r_V_35_fu_401_p1 <= tmp_5_reg_1492;
    r_V_35_fu_401_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv17_B) * signed(r_V_35_fu_401_p1))), 17));
    r_V_36_fu_1162_p0 <= sext_ln1118_13_fu_258_p1(12 - 1 downto 0);
    r_V_36_fu_1162_p1 <= sext_ln1118_13_fu_258_p1(12 - 1 downto 0);
    r_V_3_fu_544_p3 <= (p_Val2_6_reg_1448_pp0_iter1_reg & ap_const_lv3_0);
    r_V_43_fu_1168_p0 <= sext_ln1118_21_fu_282_p1(12 - 1 downto 0);
    r_V_45_fu_1174_p0 <= sext_ln1118_21_fu_282_p1(12 - 1 downto 0);
    r_V_45_fu_1174_p1 <= sext_ln1118_21_fu_282_p1(12 - 1 downto 0);
    r_V_47_fu_329_p2 <= std_logic_vector(signed(sext_ln1118_6_fu_325_p1) - signed(sext_ln1118_4_fu_315_p1));
    r_V_49_fu_849_p2 <= std_logic_vector(signed(sext_ln1118_12_fu_845_p1) + signed(sext_ln1118_9_fu_828_p1));
    r_V_50_fu_389_p2 <= std_logic_vector(signed(sext_ln1118_6_fu_325_p1) + signed(sext_ln1118_4_fu_315_p1));
    r_V_51_fu_1206_p0 <= sext_ln1118_13_reg_1479(12 - 1 downto 0);
    r_V_51_fu_1206_p1 <= sext_ln1117_reg_1415(12 - 1 downto 0);
    r_V_52_fu_569_p2 <= std_logic_vector(signed(sext_ln1118_20_fu_565_p1) - signed(sext_ln1118_5_fu_431_p1));
    r_V_53_fu_446_p3 <= (tmp_1_reg_1399_pp0_iter1_reg & ap_const_lv3_0);
    r_V_54_fu_678_p3 <= (tmp_5_reg_1492_pp0_iter1_reg & ap_const_lv3_0);
    r_V_55_fu_701_p2 <= std_logic_vector(signed(sext_ln1118_19_fu_551_p1) - signed(sext_ln1118_3_fu_428_p1));
    r_V_56_fu_746_p2 <= std_logic_vector(signed(sext_ln1118_8_fu_453_p1) - signed(sext_ln700_fu_434_p1));
    r_V_6_fu_472_p3 <= (tmp_2_reg_1421_pp0_iter1_reg & ap_const_lv2_0);
    r_V_8_fu_318_p3 <= (p_Val2_6_reg_1448 & ap_const_lv2_0);
    r_V_fu_213_p3 <= (trunc_ln1117_fu_177_p1 & ap_const_lv1_0);
    ret_V_1_fu_956_p2 <= std_logic_vector(signed(ap_const_lv32_FE600000) + signed(sub_ln1192_7_fu_950_p2));
    ret_V_2_fu_1011_p2 <= std_logic_vector(signed(ap_const_lv27_7FB0000) + signed(add_ln1192_11_fu_1005_p2));
    ret_V_3_fu_1126_p2 <= std_logic_vector(signed(ap_const_lv27_7F88000) + signed(sub_ln1192_17_fu_1120_p2));
    ret_V_4_fu_796_p2 <= std_logic_vector(signed(ap_const_lv32_FF300000) + signed(sub_ln1192_21_fu_790_p2));
    ret_V_fu_875_p2 <= std_logic_vector(signed(ap_const_lv27_7F50000) + signed(sub_ln1192_3_fu_869_p2));
    rhs_V_10_fu_752_p3 <= (r_V_56_fu_746_p2 & ap_const_lv15_0);
    rhs_V_1_fu_812_p3 <= (tmp_1_reg_1399_pp0_iter2_reg & ap_const_lv14_0);
    rhs_V_2_fu_861_p3 <= (r_V_49_fu_849_p2 & ap_const_lv10_0);
    rhs_V_3_fu_943_p3 <= (r_V_52_reg_1651 & ap_const_lv15_0);
    rhs_V_5_fu_1058_p3 <= (r_V_50_reg_1560_pp0_iter2_reg & ap_const_lv10_0);
    rhs_V_6_fu_1075_p3 <= (tmp_1_reg_1399_pp0_iter2_reg & ap_const_lv13_0);
    rhs_V_7_fu_1092_p3 <= (tmp_5_reg_1492_pp0_iter2_reg & ap_const_lv13_0);
    rhs_V_8_fu_1109_p3 <= (tmp_4_reg_1485_pp0_iter2_reg & ap_const_lv10_0);
    rhs_V_9_fu_707_p3 <= (r_V_55_fu_701_p2 & ap_const_lv10_0);
    rhs_V_fu_335_p3 <= (r_V_47_fu_329_p2 & ap_const_lv10_0);
        sext_ln1116_3_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_fu_378_p3),25));

        sext_ln1117_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_181_p4),24));

        sext_ln1118_12_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_5_fu_838_p3),17));

        sext_ln1118_13_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_6_fu_233_p4),24));

        sext_ln1118_17_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_6_reg_1448_pp0_iter1_reg),22));

        sext_ln1118_19_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_3_fu_544_p3),16));

        sext_ln1118_20_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_6_fu_558_p3),17));

        sext_ln1118_21_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_272_p4),24));

        sext_ln1118_3_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_6_reg_1448_pp0_iter1_reg),16));

        sext_ln1118_4_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_6_reg_1448),15));

        sext_ln1118_5_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_8_reg_1524),17));

        sext_ln1118_6_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_8_fu_318_p3),15));

        sext_ln1118_8_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_53_fu_446_p3),16));

        sext_ln1118_9_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_1421_pp0_iter2_reg),17));

        sext_ln1192_12_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1485_pp0_iter1_reg),27));

        sext_ln1192_13_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_51_reg_1566),27));

        sext_ln1192_16_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1485_pp0_iter1_reg),22));

        sext_ln1192_17_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1492_pp0_iter1_reg),22));

        sext_ln1192_19_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1492),17));

        sext_ln1192_1_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_1421),27));

        sext_ln1192_25_fu_1065_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_5_fu_1058_p3),27));

        sext_ln1192_26_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_6_fu_1075_p3),27));

        sext_ln1192_27_fu_1099_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_7_fu_1092_p3),27));

        sext_ln1192_28_fu_1116_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_8_fu_1109_p3),27));

        sext_ln1192_29_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_9_fu_707_p3),27));

        sext_ln1192_2_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_203_p4),22));

        sext_ln1192_31_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1492),27));

        sext_ln1192_32_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_10_fu_752_p3),32));

        sext_ln1192_3_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_335_p3),27));

        sext_ln1192_7_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1_fu_812_p3),27));

        sext_ln1192_9_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_1399_pp0_iter1_reg),27));

        sext_ln1192_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_181_p4),22));

        sext_ln700_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_1399_pp0_iter1_reg),16));

    shl_ln1118_5_fu_838_p3 <= (tmp_2_reg_1421_pp0_iter2_reg & ap_const_lv4_0);
    shl_ln1118_6_fu_558_p3 <= (p_Val2_6_reg_1448_pp0_iter1_reg & ap_const_lv4_0);
    shl_ln1118_7_fu_588_p3 <= (tmp_1_reg_1399_pp0_iter1_reg & ap_const_lv2_0);
    shl_ln1192_10_fu_930_p3 <= (mul_ln1192_12_reg_1646 & ap_const_lv10_0);
    shl_ln1192_11_fu_599_p3 <= (grp_fu_1323_p3 & ap_const_lv5_0);
    shl_ln1192_12_fu_611_p3 <= (grp_fu_1332_p3 & ap_const_lv5_0);
    shl_ln1192_13_fu_973_p3 <= (mul_ln1192_16_reg_1661 & ap_const_lv5_0);
    shl_ln1192_14_fu_985_p3 <= (mul_ln1192_17_reg_1666 & ap_const_lv5_0);
    shl_ln1192_15_fu_998_p3 <= (mul_ln1192_18_fu_1388_p2 & ap_const_lv10_0);
    shl_ln1192_16_fu_640_p3 <= (mul_ln1192_21_fu_1361_p2 & ap_const_lv5_0);
    shl_ln1192_17_fu_652_p3 <= (trunc_ln1192_1_reg_1596 & ap_const_lv5_0);
    shl_ln1192_18_fu_1028_p3 <= (mul_ln1192_22_reg_1676 & ap_const_lv5_0);
    shl_ln1192_19_fu_668_p3 <= (mul_ln1192_27_reg_1601 & ap_const_lv5_0);
    shl_ln1192_1_fu_302_p3 <= (mul_ln1192_1_reg_1443 & ap_const_lv5_0);
    shl_ln1192_20_fu_1045_p3 <= (mul_ln1192_23_reg_1686 & ap_const_lv5_0);
    shl_ln1192_21_fu_725_p3 <= (add_ln1192_18_fu_719_p2 & ap_const_lv5_0);
    shl_ln1192_22_fu_733_p3 <= (mul_ln1192_24_reg_1606 & ap_const_lv5_0);
    shl_ln1192_23_fu_770_p3 <= (mul_ln1192_25_reg_1611 & ap_const_lv5_0);
    shl_ln1192_24_fu_783_p3 <= (grp_fu_1379_p3 & ap_const_lv10_0);
    shl_ln1192_2_fu_356_p3 <= (trunc_ln1192_reg_1474 & ap_const_lv5_0);
    shl_ln1192_3_fu_457_p3 <= (grp_fu_1253_p3 & ap_const_lv5_0);
    shl_ln1192_4_fu_831_p3 <= (mul_ln1192_5_reg_1621 & ap_const_lv5_0);
    shl_ln1192_5_fu_493_p3 <= (mul_ln1192_6_fu_1266_p2 & ap_const_lv5_0);
    shl_ln1192_6_fu_509_p3 <= (mul_ln1192_7_fu_1273_p2 & ap_const_lv5_0);
    shl_ln1192_7_fu_528_p3 <= (mul_ln1192_8_fu_1280_p2 & ap_const_lv10_0);
    shl_ln1192_8_fu_892_p3 <= (mul_ln1192_9_reg_1631 & ap_const_lv5_0);
    shl_ln1192_9_fu_904_p3 <= (mul_ln1192_10_reg_1636 & ap_const_lv5_0);
    shl_ln1192_s_fu_917_p3 <= (mul_ln1192_11_reg_1641 & ap_const_lv10_0);
    shl_ln_fu_289_p3 <= (mul_ln1192_reg_1431 & ap_const_lv5_0);
    sub_ln1192_10_fu_980_p2 <= std_logic_vector(unsigned(add_ln1192_10_reg_1656) - unsigned(shl_ln1192_13_fu_973_p3));
    sub_ln1192_11_fu_992_p2 <= std_logic_vector(unsigned(sub_ln1192_10_fu_980_p2) - unsigned(shl_ln1192_14_fu_985_p3));
    sub_ln1192_13_fu_647_p2 <= std_logic_vector(signed(grp_fu_1353_p3) - signed(shl_ln1192_16_fu_640_p3));
    sub_ln1192_14_fu_1035_p2 <= std_logic_vector(unsigned(add_ln1192_13_reg_1671) - unsigned(shl_ln1192_18_fu_1028_p3));
    sub_ln1192_15_fu_1086_p2 <= std_logic_vector(unsigned(add_ln1192_16_fu_1069_p2) - unsigned(sext_ln1192_26_fu_1082_p1));
    sub_ln1192_16_fu_1103_p2 <= std_logic_vector(unsigned(sub_ln1192_15_fu_1086_p2) - unsigned(sext_ln1192_27_fu_1099_p1));
    sub_ln1192_17_fu_1120_p2 <= std_logic_vector(unsigned(sub_ln1192_16_fu_1103_p2) - unsigned(sext_ln1192_28_fu_1116_p1));
    sub_ln1192_18_fu_689_p2 <= std_logic_vector(unsigned(ap_const_lv27_0) - unsigned(shl_ln1192_17_fu_652_p3));
    sub_ln1192_19_fu_695_p2 <= std_logic_vector(unsigned(sub_ln1192_18_fu_689_p2) - unsigned(shl_ln1192_19_fu_668_p3));
    sub_ln1192_20_fu_764_p2 <= std_logic_vector(unsigned(add_ln1192_19_fu_740_p2) - unsigned(sext_ln1192_32_fu_760_p1));
    sub_ln1192_21_fu_790_p2 <= std_logic_vector(unsigned(add_ln1192_20_fu_777_p2) - unsigned(shl_ln1192_24_fu_783_p3));
    sub_ln1192_2_fu_464_p2 <= std_logic_vector(signed(grp_fu_1246_p3) - signed(shl_ln1192_3_fu_457_p3));
    sub_ln1192_3_fu_869_p2 <= std_logic_vector(unsigned(add_ln1192_4_fu_855_p2) - unsigned(rhs_V_2_fu_861_p3));
    sub_ln1192_4_fu_516_p2 <= std_logic_vector(unsigned(shl_ln1192_6_fu_509_p3) - unsigned(shl_ln1192_5_fu_493_p3));
    sub_ln1192_5_fu_899_p2 <= std_logic_vector(unsigned(add_ln1192_6_reg_1626) - unsigned(shl_ln1192_8_fu_892_p3));
    sub_ln1192_6_fu_937_p2 <= std_logic_vector(unsigned(add_ln1192_8_fu_924_p2) - unsigned(shl_ln1192_10_fu_930_p3));
    sub_ln1192_7_fu_950_p2 <= std_logic_vector(unsigned(sub_ln1192_6_fu_937_p2) - unsigned(rhs_V_3_fu_943_p3));
    sub_ln1192_9_fu_606_p2 <= std_logic_vector(signed(grp_fu_1314_p3) - signed(shl_ln1192_11_fu_599_p3));
    sub_ln1192_fu_309_p2 <= std_logic_vector(unsigned(shl_ln1192_1_fu_302_p3) - unsigned(shl_ln_fu_289_p3));
    tmp_1_fu_181_p4 <= x_V_in_sig(191 downto 180);
    tmp_2_fu_203_p4 <= x_V_in_sig(35 downto 24);
    tmp_5_fu_272_p4 <= x_V_in_sig(47 downto 36);
    trunc_ln1117_fu_177_p1 <= x_V_in_sig(12 - 1 downto 0);
    trunc_ln1192_1_fu_410_p1 <= r_V_51_fu_1206_p2(22 - 1 downto 0);
    trunc_ln1192_fu_255_p1 <= r_V_48_fu_1155_p2(22 - 1 downto 0);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, x_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V_ap_vld, x_V, x_V_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

    y_0_V <= ret_V_fu_875_p2(26 downto 15);

    y_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_V <= ret_V_1_fu_956_p2(31 downto 20);

    y_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= ret_V_2_fu_1011_p2(26 downto 15);

    y_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_3_V <= ret_V_3_fu_1126_p2(26 downto 15);

    y_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= trunc_ln708_4_reg_1691;

    y_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
