-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (191 downto 0);
    y_0_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.125125,HLS_SYN_LAT=5,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=51,HLS_SYN_FF=2502,HLS_SYN_LUT=2045,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv192_lc_1 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv17_B : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv36_FCD000000 : STD_LOGIC_VECTOR (35 downto 0) := "111111001101000000000000000000000000";
    constant ap_const_lv30_3FB40000 : STD_LOGIC_VECTOR (29 downto 0) := "111111101101000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv30_3F8C0000 : STD_LOGIC_VECTOR (29 downto 0) := "111111100011000000000000000000";
    constant ap_const_lv36_FE6000000 : STD_LOGIC_VECTOR (35 downto 0) := "111111100110000000000000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv30_3F540000 : STD_LOGIC_VECTOR (29 downto 0) := "111111010101000000000000000000";
    constant ap_const_lv18_17 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010111";
    constant ap_const_lv18_15 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010101";
    constant ap_const_lv18_75 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001110101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_preg : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (191 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal trunc_ln1117_fu_183_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1117_reg_1663 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1117_reg_1663_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_191_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_reg_1669 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_reg_1669_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_reg_1669_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_reg_1669_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1192_fu_201_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_reg_1684 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_reg_1684_pp0_iter1_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_fu_1344_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_reg_1692 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_reg_1697 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_reg_1697_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_reg_1697_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1193_1_fu_1350_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1193_1_reg_1709 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_5_fu_227_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_5_reg_1714 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_5_reg_1714_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1116_3_fu_237_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln1116_3_reg_1729 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln1116_5_fu_241_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1116_5_reg_1735 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1116_5_reg_1735_pp0_iter1_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_40_fu_1356_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_40_reg_1741 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_reg_1746 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_reg_1746_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_reg_1746_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_reg_1755 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_reg_1755_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_reg_1755_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1362_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_72_reg_1770 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_91_fu_1370_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_91_reg_1775 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_1_fu_276_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1192_1_reg_1780 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1118_1_fu_279_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln1118_1_reg_1787 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln1192_3_fu_299_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_3_reg_1792 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_3_reg_1792_pp0_iter2_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1_fu_327_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1_reg_1799 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1118_9_fu_334_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_9_reg_1804 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1193_1_fu_356_p2 : STD_LOGIC_VECTOR (29 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln1193_1_fu_356_p2 : signal is "no";
    signal add_ln1193_1_reg_1809 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_19_fu_1392_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_19_reg_1814 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_7_fu_365_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_7_reg_1819 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1396_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_24_reg_1824 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_24_reg_1824_pp0_iter2_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_41_fu_1404_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_41_reg_1829 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1410_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_47_reg_1835 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_65_fu_382_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_65_reg_1840 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_48_fu_393_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_48_reg_1845 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_56_fu_1418_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_56_reg_1850 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_88_fu_403_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_88_reg_1855 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_60_fu_409_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_60_reg_1860 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_89_fu_1423_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_89_reg_1865 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln1118_26_fu_426_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_26_reg_1870 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_66_fu_1430_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_66_reg_1877 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1192_21_fu_446_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1192_21_reg_1882 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1192_21_reg_1882_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_69_fu_1436_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_69_reg_1887 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_70_fu_449_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_70_reg_1892 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1442_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln1192_14_reg_1898 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_74_fu_1450_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_74_reg_1903 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_1455_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_22_reg_1908 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1192_fu_470_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1192_reg_1913 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln728_fu_473_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_reg_1918 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_reg_1918_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1462_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_82_reg_1923 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_84_fu_1470_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_84_reg_1928 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1192_2_fu_477_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1192_2_reg_1933 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1192_2_reg_1933_pp0_iter3_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1476_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln1192_reg_1939 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_1_fu_1482_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_1_reg_1944 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_8_fu_492_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_8_reg_1949 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_37_fu_1487_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_37_reg_1955 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1118_18_fu_510_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_18_reg_1960 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1118_6_fu_514_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln1118_6_reg_1965 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1192_5_fu_540_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln1192_5_reg_1970 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln1192_6_fu_549_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln1192_6_reg_1975 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln1192_7_fu_1493_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_7_reg_1980 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_8_fu_1498_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_8_reg_1985 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_9_fu_1504_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_9_reg_1990 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_10_fu_1509_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_10_reg_1995 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_11_fu_1514_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_11_reg_2000 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1520_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_12_reg_2005 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1526_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_13_reg_2010 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_90_fu_601_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_90_reg_2015 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln1192_11_fu_650_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln1192_11_reg_2020 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_17_fu_1560_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_17_reg_2025 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_18_fu_1566_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_18_reg_2030 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1192_14_fu_703_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln1192_14_reg_2035 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_24_fu_1586_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_24_reg_2040 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1592_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_25_reg_2045 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1192_22_fu_769_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln1192_22_reg_2050 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_26_fu_1606_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_26_reg_2055 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_27_fu_1612_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_27_reg_2060 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1618_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_28_reg_2065 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1192_1_fu_794_p2 : STD_LOGIC_VECTOR (29 downto 0);
    attribute use_dsp48 of add_ln1192_1_fu_794_p2 : signal is "no";
    signal add_ln1192_1_reg_2070 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_33_fu_1633_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_33_reg_2075 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_3_fu_1639_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_3_reg_2080 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1644_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_4_reg_2085 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_87_fu_825_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_87_reg_2090 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_87_reg_2090_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_1_reg_2095 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln708_1_reg_2095_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln708_2_reg_2100 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln708_2_reg_2100_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln708_3_reg_2105 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln708_3_reg_2105_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln708_4_reg_2110 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln708_4_reg_2110_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1192_3_fu_1309_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln1192_3_reg_2115 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal r_V_1_fu_215_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_2_fu_292_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1193_2_fu_1385_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1193_1_fu_306_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1376_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1118_6_fu_321_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_86_fu_338_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_fu_344_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1193_1_fu_352_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln1193_fu_313_p2 : STD_LOGIC_VECTOR (29 downto 0);
    attribute use_dsp48 of add_ln1193_fu_313_p2 : signal is "no";
    signal sext_ln1118_24_fu_389_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1118_7_fu_324_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_88_fu_403_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_5_fu_318_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln1118_8_fu_419_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1118_4_fu_503_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_V_fu_525_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_5_fu_536_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1192_9_fu_532_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln1192_5_fu_536_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln1192_6_fu_549_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_3_fu_572_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln1118_s_fu_590_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_29_fu_597_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1118_8_fu_480_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln1118_1_fu_620_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1542_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1533_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1192_s_fu_631_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1551_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_10_fu_643_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln1192_10_fu_638_p2 : STD_LOGIC_VECTOR (29 downto 0);
    attribute use_dsp48 of sub_ln1192_10_fu_638_p2 : signal is "no";
    signal grp_fu_1572_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1192_14_fu_668_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1192_15_fu_680_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln1192_13_fu_675_p2 : STD_LOGIC_VECTOR (29 downto 0);
    attribute use_dsp48 of sub_ln1192_13_fu_675_p2 : signal is "no";
    signal mul_ln1192_23_fu_1580_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1192_16_fu_687_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1192_16_fu_696_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_93_fu_712_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1192_29_fu_1599_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1192_18_fu_726_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1192_19_fu_739_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1118_27_fu_579_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_95_fu_752_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_11_fu_757_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sub_ln1192_19_fu_746_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1192_32_fu_765_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln2_fu_787_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1626_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1118_5_fu_811_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_20_fu_822_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1118_19_fu_818_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1192_4_fu_831_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln1192_3_fu_835_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln1192_4_fu_848_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sub_ln1192_5_fu_842_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln1192_5_fu_861_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln1192_6_fu_855_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln1192_7_fu_868_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln1192_6_fu_874_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln1192_7_fu_887_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sub_ln1192_6_fu_881_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln1192_8_fu_900_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln1192_8_fu_894_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln1192_9_fu_907_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln1192_9_fu_913_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sub_ln1192_7_fu_920_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal rhs_V_3_fu_926_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sub_ln1192_8_fu_933_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal ret_V_1_fu_939_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln1192_11_fu_955_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln1192_11_fu_962_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1192_12_fu_967_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_19_fu_1650_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln1192_13_fu_980_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln1192_12_fu_974_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln1192_12_fu_987_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_2_fu_993_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1192_17_fu_1009_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1192_18_fu_1021_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln1192_17_fu_1016_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_V_6_fu_1034_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1192_26_fu_1041_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln1192_18_fu_1028_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_92_fu_1051_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_7_fu_1062_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln1192_19_fu_1045_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1192_27_fu_1069_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_V_8_fu_1079_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_28_fu_1086_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln1192_15_fu_1073_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_V_9_fu_1096_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln1192_20_fu_1090_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1192_29_fu_1103_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1118_2_fu_1116_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_46_fu_1123_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1118_45_fu_1113_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_94_fu_1127_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal rhs_V_10_fu_1133_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln1192_16_fu_1107_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1192_30_fu_1141_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln1192_17_fu_1145_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_3_fu_1151_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1192_21_fu_1174_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln1192_20_fu_1167_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln1118_43_fu_1058_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_15_fu_799_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_96_fu_1187_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_12_fu_1193_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1192_23_fu_1181_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln1192_34_fu_1201_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln1192_22_fu_1211_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sub_ln1192_20_fu_1205_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln1192_24_fu_1218_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln1192_23_fu_1224_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal rhs_V_13_fu_1237_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln1192_21_fu_1231_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln1192_37_fu_1244_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal sub_ln1192_22_fu_1248_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal ret_V_4_fu_1254_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1656_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1192_1_fu_1273_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_V_1_fu_1285_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln1192_7_fu_1292_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln1192_2_fu_1280_p2 : STD_LOGIC_VECTOR (29 downto 0);
    attribute use_dsp48 of sub_ln1192_2_fu_1280_p2 : signal is "no";
    signal shl_ln1192_2_fu_1302_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln1192_2_fu_1296_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_V_2_fu_1315_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln1192_3_fu_1322_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_fu_1327_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_fu_1344_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_fu_1344_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1116_fu_187_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1193_1_fu_1350_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_40_fu_1356_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_40_fu_1356_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_91_fu_1370_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_91_fu_1370_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1376_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_19_fu_1392_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_19_fu_1392_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1396_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_13_fu_372_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1396_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_11_fu_362_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1396_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_fu_273_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_1410_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1410_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_56_fu_1418_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_89_fu_1423_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1116_8_fu_415_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_89_fu_1423_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_69_fu_1436_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1442_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_74_fu_1450_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_74_fu_1450_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1455_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1455_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1462_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1462_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1476_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_1_fu_1482_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_37_fu_1487_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln1192_7_fu_1493_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_8_fu_1498_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1192_12_fu_560_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_9_fu_1504_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_10_fu_1509_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln1192_14_fu_569_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_10_fu_1509_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_11_fu_1514_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1192_11_fu_1514_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1520_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1520_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1520_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1526_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1526_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1192_17_fu_587_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1533_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1533_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1542_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1192_18_fu_607_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1551_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_17_fu_1560_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_18_fu_1566_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_23_fu_1580_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_24_fu_1586_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1592_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1592_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_26_fu_1606_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1192_31_fu_723_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_27_fu_1612_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1618_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1626_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_3_fu_1639_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1644_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1644_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_19_fu_1650_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1192_19_fu_1650_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1656_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mul_mul_12s_12s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_mul_mul_14s_12s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_am_submul_12s_14s_12s_27_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component myproject_mac_mul_sub_24s_12s_30ns_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (29 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component myproject_mul_mul_13s_12s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_am_addmul_14s_12s_12s_27_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component myproject_mul_mul_24s_12s_36_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component myproject_am_addmul_15s_12s_12s_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component myproject_mul_mul_15s_12s_27_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component myproject_mul_mul_14s_12s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mul_mul_6ns_12s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component myproject_mac_muladd_27s_12s_30ns_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (26 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (29 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component myproject_am_addmul_16s_12s_12s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_am_submul_14s_12s_12s_27_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component myproject_mul_mul_13s_12s_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component myproject_mac_mulsub_24s_12s_30ns_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (29 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component myproject_mul_mul_28s_12s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component myproject_mul_mul_27s_12s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (26 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component myproject_mul_mul_17s_12s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_am_addmul_13s_16s_12s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_am_submul_16s_14s_12s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_mac_mul_sub_26s_12s_30ns_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (25 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (29 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component myproject_am_submul_15s_13s_12s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_mul_mul_18s_12s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_mac_muladd_27s_12s_30s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (26 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (29 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component myproject_mul_mul_15s_12s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_mul_mul_25s_12s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component myproject_am_submul_16s_13s_12s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_am_addmul_15s_12s_12s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_mul_mul_8ns_12s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component myproject_mac_mulsub_25s_12s_30ns_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (29 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    myproject_mul_mul_12s_12s_24_1_1_U1 : component myproject_mul_mul_12s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_fu_1344_p0,
        din1 => r_V_fu_1344_p1,
        dout => r_V_fu_1344_p2);

    myproject_mul_mul_14s_12s_24_1_1_U2 : component myproject_mul_mul_14s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_1_fu_215_p3,
        din1 => mul_ln1193_1_fu_1350_p1,
        dout => mul_ln1193_1_fu_1350_p2);

    myproject_mul_mul_12s_12s_24_1_1_U3 : component myproject_mul_mul_12s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_40_fu_1356_p0,
        din1 => r_V_40_fu_1356_p1,
        dout => r_V_40_fu_1356_p2);

    myproject_am_submul_12s_14s_12s_27_1_1_U4 : component myproject_am_submul_12s_14s_12s_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 14,
        din2_WIDTH => 12,
        dout_WIDTH => 27)
    port map (
        din0 => trunc_ln1117_fu_183_p1,
        din1 => r_V_1_fu_215_p3,
        din2 => p_Val2_5_fu_227_p4,
        dout => grp_fu_1362_p3);

    myproject_mul_mul_12s_12s_24_1_1_U5 : component myproject_mul_mul_12s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_91_fu_1370_p0,
        din1 => r_V_91_fu_1370_p1,
        dout => r_V_91_fu_1370_p2);

    myproject_mac_mul_sub_24s_12s_30ns_30_1_1_U6 : component myproject_mac_mul_sub_24s_12s_30ns_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 12,
        din2_WIDTH => 30,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_reg_1692,
        din1 => tmp_1_reg_1669,
        din2 => grp_fu_1376_p2,
        dout => grp_fu_1376_p3);

    myproject_mul_mul_13s_12s_24_1_1_U7 : component myproject_mul_mul_13s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_2_fu_292_p3,
        din1 => tmp_2_reg_1697,
        dout => mul_ln1193_2_fu_1385_p2);

    myproject_mul_mul_12s_12s_24_1_1_U8 : component myproject_mul_mul_12s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_19_fu_1392_p0,
        din1 => r_V_19_fu_1392_p1,
        dout => r_V_19_fu_1392_p2);

    myproject_am_addmul_14s_12s_12s_27_1_1_U9 : component myproject_am_addmul_14s_12s_12s_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        dout_WIDTH => 27)
    port map (
        din0 => grp_fu_1396_p0,
        din1 => grp_fu_1396_p1,
        din2 => grp_fu_1396_p2,
        dout => grp_fu_1396_p3);

    myproject_mul_mul_24s_12s_36_1_1_U10 : component myproject_mul_mul_24s_12s_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        din0 => r_V_40_reg_1741,
        din1 => tmp_1_reg_1669,
        dout => r_V_41_fu_1404_p2);

    myproject_am_addmul_15s_12s_12s_28_1_1_U11 : component myproject_am_addmul_15s_12s_12s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        din0 => grp_fu_1410_p0,
        din1 => grp_fu_1410_p1,
        din2 => p_Val2_5_reg_1714,
        dout => grp_fu_1410_p3);

    myproject_mul_mul_15s_12s_27_1_1_U12 : component myproject_mul_mul_15s_12s_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 12,
        dout_WIDTH => 27)
    port map (
        din0 => r_V_48_fu_393_p2,
        din1 => r_V_56_fu_1418_p1,
        dout => r_V_56_fu_1418_p2);

    myproject_mul_mul_15s_12s_27_1_1_U13 : component myproject_mul_mul_15s_12s_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 12,
        dout_WIDTH => 27)
    port map (
        din0 => r_V_89_fu_1423_p0,
        din1 => r_V_89_fu_1423_p1,
        dout => r_V_89_fu_1423_p2);

    myproject_mul_mul_14s_12s_26_1_1_U14 : component myproject_mul_mul_14s_12s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => r_V_65_fu_382_p3,
        din1 => tmp_5_reg_1755,
        dout => r_V_66_fu_1430_p2);

    myproject_mul_mul_6ns_12s_18_1_1_U15 : component myproject_mul_mul_6ns_12s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 12,
        dout_WIDTH => 18)
    port map (
        din0 => r_V_69_fu_1436_p0,
        din1 => tmp_5_reg_1755,
        dout => r_V_69_fu_1436_p2);

    myproject_mac_muladd_27s_12s_30ns_30_1_1_U16 : component myproject_mac_muladd_27s_12s_30ns_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 27,
        din1_WIDTH => 12,
        din2_WIDTH => 30,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_72_reg_1770,
        din1 => p_Val2_5_reg_1714,
        din2 => grp_fu_1442_p2,
        dout => grp_fu_1442_p3);

    myproject_mul_mul_15s_12s_27_1_1_U17 : component myproject_mul_mul_15s_12s_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 12,
        dout_WIDTH => 27)
    port map (
        din0 => r_V_74_fu_1450_p0,
        din1 => r_V_74_fu_1450_p1,
        dout => r_V_74_fu_1450_p2);

    myproject_am_addmul_16s_12s_12s_24_1_1_U18 : component myproject_am_addmul_16s_12s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => shl_ln1118_8_fu_419_p3,
        din1 => grp_fu_1455_p1,
        din2 => grp_fu_1455_p2,
        dout => grp_fu_1455_p3);

    myproject_am_submul_14s_12s_12s_27_1_1_U19 : component myproject_am_submul_14s_12s_12s_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        dout_WIDTH => 27)
    port map (
        din0 => grp_fu_1462_p0,
        din1 => grp_fu_1462_p1,
        din2 => tmp_5_reg_1755,
        dout => grp_fu_1462_p3);

    myproject_mul_mul_13s_12s_25_1_1_U20 : component myproject_mul_mul_13s_12s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 12,
        dout_WIDTH => 25)
    port map (
        din0 => r_V_70_fu_449_p3,
        din1 => tmp_5_reg_1755,
        dout => r_V_84_fu_1470_p2);

    myproject_mac_mulsub_24s_12s_30ns_30_1_1_U21 : component myproject_mac_mulsub_24s_12s_30ns_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 12,
        din2_WIDTH => 30,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_19_reg_1814,
        din1 => grp_fu_1476_p1,
        din2 => add_ln1193_1_reg_1809,
        dout => grp_fu_1476_p3);

    myproject_mul_mul_14s_12s_24_1_1_U22 : component myproject_mul_mul_14s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_7_reg_1819,
        din1 => mul_ln1192_1_fu_1482_p1,
        dout => mul_ln1192_1_fu_1482_p2);

    myproject_mul_mul_6ns_12s_18_1_1_U23 : component myproject_mul_mul_6ns_12s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 12,
        dout_WIDTH => 18)
    port map (
        din0 => r_V_37_fu_1487_p0,
        din1 => tmp_1_reg_1669_pp0_iter1_reg,
        dout => r_V_37_fu_1487_p2);

    myproject_mul_mul_28s_12s_30_1_1_U24 : component myproject_mul_mul_28s_12s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 12,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_47_reg_1835,
        din1 => mul_ln1192_7_fu_1493_p1,
        dout => mul_ln1192_7_fu_1493_p2);

    myproject_mul_mul_27s_12s_30_1_1_U25 : component myproject_mul_mul_27s_12s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 27,
        din1_WIDTH => 12,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_56_reg_1850,
        din1 => mul_ln1192_8_fu_1498_p1,
        dout => mul_ln1192_8_fu_1498_p2);

    myproject_mul_mul_17s_12s_24_1_1_U26 : component myproject_mul_mul_17s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_88_reg_1855,
        din1 => mul_ln1192_9_fu_1504_p1,
        dout => mul_ln1192_9_fu_1504_p2);

    myproject_mul_mul_27s_12s_30_1_1_U27 : component myproject_mul_mul_27s_12s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 27,
        din1_WIDTH => 12,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln1192_10_fu_1509_p0,
        din1 => mul_ln1192_10_fu_1509_p1,
        dout => mul_ln1192_10_fu_1509_p2);

    myproject_mul_mul_27s_12s_30_1_1_U28 : component myproject_mul_mul_27s_12s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 27,
        din1_WIDTH => 12,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln1192_11_fu_1514_p0,
        din1 => mul_ln1192_11_fu_1514_p1,
        dout => mul_ln1192_11_fu_1514_p2);

    myproject_am_addmul_13s_16s_12s_24_1_1_U29 : component myproject_am_addmul_13s_16s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        din2_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_1520_p0,
        din1 => grp_fu_1520_p1,
        din2 => grp_fu_1520_p2,
        dout => grp_fu_1520_p3);

    myproject_am_submul_16s_14s_12s_24_1_1_U30 : component myproject_am_submul_16s_14s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_1526_p0,
        din1 => r_V_65_reg_1840,
        din2 => grp_fu_1526_p2,
        dout => grp_fu_1526_p3);

    myproject_mac_mul_sub_26s_12s_30ns_30_1_1_U31 : component myproject_mac_mul_sub_26s_12s_30ns_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 26,
        din1_WIDTH => 12,
        din2_WIDTH => 30,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_66_reg_1877,
        din1 => grp_fu_1533_p1,
        din2 => grp_fu_1533_p2,
        dout => grp_fu_1533_p3);

    myproject_am_submul_15s_13s_12s_24_1_1_U32 : component myproject_am_submul_15s_13s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 13,
        din2_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => shl_ln1118_1_fu_620_p3,
        din1 => r_V_8_fu_492_p3,
        din2 => grp_fu_1542_p2,
        dout => grp_fu_1542_p3);

    myproject_am_submul_15s_13s_12s_24_1_1_U33 : component myproject_am_submul_15s_13s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 13,
        din2_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => shl_ln1118_4_fu_503_p3,
        din1 => shl_ln1118_6_fu_514_p3,
        din2 => grp_fu_1551_p2,
        dout => grp_fu_1551_p3);

    myproject_mul_mul_18s_12s_24_1_1_U34 : component myproject_mul_mul_18s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_69_reg_1887,
        din1 => mul_ln1192_17_fu_1560_p1,
        dout => mul_ln1192_17_fu_1560_p2);

    myproject_mul_mul_13s_12s_24_1_1_U35 : component myproject_mul_mul_13s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_70_reg_1892,
        din1 => mul_ln1192_18_fu_1566_p1,
        dout => mul_ln1192_18_fu_1566_p2);

    myproject_mac_muladd_27s_12s_30s_30_1_1_U36 : component myproject_mac_muladd_27s_12s_30s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 27,
        din1_WIDTH => 12,
        din2_WIDTH => 30,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_74_reg_1903,
        din1 => tmp_2_reg_1697_pp0_iter1_reg,
        din2 => add_ln1192_14_reg_1898,
        dout => grp_fu_1572_p3);

    myproject_mul_mul_15s_12s_24_1_1_U37 : component myproject_mul_mul_15s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_48_reg_1845,
        din1 => mul_ln1192_23_fu_1580_p1,
        dout => mul_ln1192_23_fu_1580_p2);

    myproject_mul_mul_15s_12s_24_1_1_U38 : component myproject_mul_mul_15s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_60_reg_1860,
        din1 => mul_ln1192_24_fu_1586_p1,
        dout => mul_ln1192_24_fu_1586_p2);

    myproject_am_submul_15s_13s_12s_24_1_1_U39 : component myproject_am_submul_15s_13s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 13,
        din2_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_1592_p0,
        din1 => r_V_3_fu_572_p3,
        din2 => grp_fu_1592_p2,
        dout => grp_fu_1592_p3);

    myproject_mul_mul_13s_12s_24_1_1_U40 : component myproject_mul_mul_13s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_3_fu_572_p3,
        din1 => tmp_5_reg_1755_pp0_iter1_reg,
        dout => mul_ln1192_29_fu_1599_p2);

    myproject_mul_mul_27s_12s_30_1_1_U41 : component myproject_mul_mul_27s_12s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 27,
        din1_WIDTH => 12,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_82_reg_1923,
        din1 => mul_ln1192_26_fu_1606_p1,
        dout => mul_ln1192_26_fu_1606_p2);

    myproject_mul_mul_25s_12s_30_1_1_U42 : component myproject_mul_mul_25s_12s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 12,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_84_reg_1928,
        din1 => mul_ln1192_27_fu_1612_p1,
        dout => mul_ln1192_27_fu_1612_p2);

    myproject_am_submul_16s_13s_12s_24_1_1_U43 : component myproject_am_submul_16s_13s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_93_fu_712_p3,
        din1 => r_V_70_reg_1892,
        din2 => grp_fu_1618_p2,
        dout => grp_fu_1618_p3);

    myproject_mac_muladd_27s_12s_30s_30_1_1_U44 : component myproject_mac_muladd_27s_12s_30s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 27,
        din1_WIDTH => 12,
        din2_WIDTH => 30,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_24_reg_1824_pp0_iter2_reg,
        din1 => grp_fu_1626_p1,
        din2 => sub_ln1192_reg_1939,
        dout => grp_fu_1626_p3);

    myproject_mul_mul_13s_12s_25_1_1_U45 : component myproject_mul_mul_13s_12s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 12,
        dout_WIDTH => 25)
    port map (
        din0 => r_V_8_reg_1949,
        din1 => tmp_2_reg_1697_pp0_iter2_reg,
        dout => r_V_33_fu_1633_p2);

    myproject_mul_mul_18s_12s_24_1_1_U46 : component myproject_mul_mul_18s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_37_reg_1955,
        din1 => mul_ln1192_3_fu_1639_p1,
        dout => mul_ln1192_3_fu_1639_p2);

    myproject_am_addmul_15s_12s_12s_24_1_1_U47 : component myproject_am_addmul_15s_12s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_1644_p0,
        din1 => tmp_2_reg_1697_pp0_iter2_reg,
        din2 => grp_fu_1644_p2,
        dout => grp_fu_1644_p3);

    myproject_mul_mul_8ns_12s_18_1_1_U48 : component myproject_mul_mul_8ns_12s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 12,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln1192_19_fu_1650_p0,
        din1 => mul_ln1192_19_fu_1650_p1,
        dout => mul_ln1192_19_fu_1650_p2);

    myproject_mac_mulsub_25s_12s_30ns_30_1_1_U49 : component myproject_mac_mulsub_25s_12s_30ns_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 12,
        din2_WIDTH => 30,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_33_reg_2075,
        din1 => grp_fu_1656_p1,
        din2 => add_ln1192_1_reg_2070,
        dout => grp_fu_1656_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv192_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln1192_11_reg_2020 <= add_ln1192_11_fu_650_p2;
                add_ln1192_1_reg_2070 <= add_ln1192_1_fu_794_p2;
                    add_ln1192_22_reg_2050(29 downto 6) <= add_ln1192_22_fu_769_p2(29 downto 6);
                add_ln1192_3_reg_2115 <= add_ln1192_3_fu_1309_p2;
                add_ln1192_5_reg_1970 <= add_ln1192_5_fu_540_p2;
                mul_ln1192_10_reg_1995 <= mul_ln1192_10_fu_1509_p2;
                mul_ln1192_11_reg_2000 <= mul_ln1192_11_fu_1514_p2;
                mul_ln1192_17_reg_2025 <= mul_ln1192_17_fu_1560_p2;
                mul_ln1192_18_reg_2030 <= mul_ln1192_18_fu_1566_p2;
                mul_ln1192_1_reg_1944 <= mul_ln1192_1_fu_1482_p2;
                mul_ln1192_24_reg_2040 <= mul_ln1192_24_fu_1586_p2;
                mul_ln1192_26_reg_2055 <= mul_ln1192_26_fu_1606_p2;
                mul_ln1192_27_reg_2060 <= mul_ln1192_27_fu_1612_p2;
                mul_ln1192_3_reg_2080 <= mul_ln1192_3_fu_1639_p2;
                mul_ln1192_6_reg_1975 <= mul_ln1192_6_fu_549_p2;
                mul_ln1192_7_reg_1980 <= mul_ln1192_7_fu_1493_p2;
                mul_ln1192_8_reg_1985 <= mul_ln1192_8_fu_1498_p2;
                mul_ln1192_9_reg_1990 <= mul_ln1192_9_fu_1504_p2;
                r_V_24_reg_1824_pp0_iter2_reg <= r_V_24_reg_1824;
                r_V_33_reg_2075 <= r_V_33_fu_1633_p2;
                r_V_37_reg_1955 <= r_V_37_fu_1487_p2;
                    r_V_87_reg_2090(17 downto 1) <= r_V_87_fu_825_p2(17 downto 1);
                    r_V_87_reg_2090_pp0_iter4_reg(17 downto 1) <= r_V_87_reg_2090(17 downto 1);
                    r_V_8_reg_1949(12 downto 1) <= r_V_8_fu_492_p3(12 downto 1);
                    r_V_90_reg_2015(17 downto 3) <= r_V_90_fu_601_p2(17 downto 3);
                    sext_ln1118_18_reg_1960(15 downto 3) <= sext_ln1118_18_fu_510_p1(15 downto 3);
                sext_ln1192_21_reg_1882_pp0_iter2_reg <= sext_ln1192_21_reg_1882;
                sext_ln1192_2_reg_1933 <= sext_ln1192_2_fu_477_p1;
                sext_ln1192_2_reg_1933_pp0_iter3_reg <= sext_ln1192_2_reg_1933;
                sext_ln1192_3_reg_1792_pp0_iter2_reg <= sext_ln1192_3_reg_1792;
                    shl_ln1118_6_reg_1965(12 downto 1) <= shl_ln1118_6_fu_514_p3(12 downto 1);
                sub_ln1192_14_reg_2035 <= sub_ln1192_14_fu_703_p2;
                tmp_1_reg_1669_pp0_iter2_reg <= tmp_1_reg_1669_pp0_iter1_reg;
                tmp_1_reg_1669_pp0_iter3_reg <= tmp_1_reg_1669_pp0_iter2_reg;
                tmp_2_reg_1697_pp0_iter2_reg <= tmp_2_reg_1697_pp0_iter1_reg;
                tmp_4_reg_1746_pp0_iter2_reg <= tmp_4_reg_1746_pp0_iter1_reg;
                tmp_5_reg_1755_pp0_iter2_reg <= tmp_5_reg_1755_pp0_iter1_reg;
                trunc_ln708_1_reg_2095 <= ret_V_1_fu_939_p2(35 downto 24);
                trunc_ln708_1_reg_2095_pp0_iter4_reg <= trunc_ln708_1_reg_2095;
                trunc_ln708_2_reg_2100 <= ret_V_2_fu_993_p2(29 downto 18);
                trunc_ln708_2_reg_2100_pp0_iter4_reg <= trunc_ln708_2_reg_2100;
                trunc_ln708_3_reg_2105 <= ret_V_3_fu_1151_p2(29 downto 18);
                trunc_ln708_3_reg_2105_pp0_iter4_reg <= trunc_ln708_3_reg_2105;
                trunc_ln708_4_reg_2110 <= ret_V_4_fu_1254_p2(35 downto 24);
                trunc_ln708_4_reg_2110_pp0_iter4_reg <= trunc_ln708_4_reg_2110;
                trunc_ln728_reg_1918_pp0_iter2_reg <= trunc_ln728_reg_1918;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1192_14_reg_1898 <= grp_fu_1442_p3;
                mul_ln1192_22_reg_1908 <= grp_fu_1455_p3;
                r_V_24_reg_1824 <= grp_fu_1396_p3;
                r_V_47_reg_1835 <= grp_fu_1410_p3;
                r_V_82_reg_1923 <= grp_fu_1462_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1193_1_reg_1809 <= add_ln1193_1_fu_356_p2;
                mul_ln1193_1_reg_1709 <= mul_ln1193_1_fu_1350_p2;
                p_Val2_5_reg_1714 <= x_V_in_sig(179 downto 168);
                p_Val2_5_reg_1714_pp0_iter1_reg <= p_Val2_5_reg_1714;
                r_V_19_reg_1814 <= r_V_19_fu_1392_p2;
                r_V_40_reg_1741 <= r_V_40_fu_1356_p2;
                r_V_41_reg_1829 <= r_V_41_fu_1404_p2;
                r_V_48_reg_1845 <= r_V_48_fu_393_p2;
                r_V_56_reg_1850 <= r_V_56_fu_1418_p2;
                r_V_60_reg_1860 <= r_V_60_fu_409_p2;
                    r_V_65_reg_1840(13 downto 2) <= r_V_65_fu_382_p3(13 downto 2);
                r_V_66_reg_1877 <= r_V_66_fu_1430_p2;
                r_V_69_reg_1887 <= r_V_69_fu_1436_p2;
                    r_V_70_reg_1892(12 downto 1) <= r_V_70_fu_449_p3(12 downto 1);
                r_V_74_reg_1903 <= r_V_74_fu_1450_p2;
                    r_V_7_reg_1819(13 downto 2) <= r_V_7_fu_365_p3(13 downto 2);
                r_V_84_reg_1928 <= r_V_84_fu_1470_p2;
                r_V_88_reg_1855 <= r_V_88_fu_403_p2;
                r_V_89_reg_1865 <= r_V_89_fu_1423_p2;
                r_V_91_reg_1775 <= r_V_91_fu_1370_p2;
                r_V_reg_1692 <= r_V_fu_1344_p2;
                sext_ln1116_3_reg_1729 <= sext_ln1116_3_fu_237_p1;
                sext_ln1116_5_reg_1735 <= sext_ln1116_5_fu_241_p1;
                sext_ln1116_5_reg_1735_pp0_iter1_reg <= sext_ln1116_5_reg_1735;
                sext_ln1118_1_reg_1787 <= sext_ln1118_1_fu_279_p1;
                    sext_ln1118_26_reg_1870(16 downto 4) <= sext_ln1118_26_fu_426_p1(16 downto 4);
                    sext_ln1118_9_reg_1804(15 downto 3) <= sext_ln1118_9_fu_334_p1(15 downto 3);
                sext_ln1192_1_reg_1780 <= sext_ln1192_1_fu_276_p1;
                sext_ln1192_21_reg_1882 <= sext_ln1192_21_fu_446_p1;
                sext_ln1192_3_reg_1792 <= sext_ln1192_3_fu_299_p1;
                sext_ln1192_reg_1684 <= sext_ln1192_fu_201_p1;
                sext_ln1192_reg_1684_pp0_iter1_reg <= sext_ln1192_reg_1684;
                    shl_ln1_reg_1799(14 downto 3) <= shl_ln1_fu_327_p3(14 downto 3);
                tmp_1_reg_1669 <= x_V_in_sig(191 downto 180);
                tmp_1_reg_1669_pp0_iter1_reg <= tmp_1_reg_1669;
                tmp_2_reg_1697 <= x_V_in_sig(35 downto 24);
                tmp_2_reg_1697_pp0_iter1_reg <= tmp_2_reg_1697;
                tmp_4_reg_1746 <= x_V_in_sig(59 downto 48);
                tmp_4_reg_1746_pp0_iter1_reg <= tmp_4_reg_1746;
                tmp_5_reg_1755 <= x_V_in_sig(47 downto 36);
                tmp_5_reg_1755_pp0_iter1_reg <= tmp_5_reg_1755;
                trunc_ln1117_reg_1663 <= trunc_ln1117_fu_183_p1;
                trunc_ln1117_reg_1663_pp0_iter1_reg <= trunc_ln1117_reg_1663;
                trunc_ln1192_reg_1913 <= trunc_ln1192_fu_470_p1;
                trunc_ln728_reg_1918 <= trunc_ln728_fu_473_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                mul_ln1192_12_reg_2005 <= grp_fu_1520_p3;
                mul_ln1192_13_reg_2010 <= grp_fu_1526_p3;
                mul_ln1192_25_reg_2045 <= grp_fu_1592_p3;
                mul_ln1192_28_reg_2065 <= grp_fu_1618_p3;
                sub_ln1192_reg_1939 <= grp_fu_1476_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                mul_ln1192_4_reg_2085 <= grp_fu_1644_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                r_V_72_reg_1770 <= grp_fu_1362_p3;
            end if;
        end if;
    end process;
    shl_ln1_reg_1799(2 downto 0) <= "000";
    sext_ln1118_9_reg_1804(2 downto 0) <= "000";
    r_V_7_reg_1819(1 downto 0) <= "00";
    r_V_65_reg_1840(1 downto 0) <= "00";
    sext_ln1118_26_reg_1870(3 downto 0) <= "0000";
    r_V_70_reg_1892(0) <= '0';
    r_V_8_reg_1949(0) <= '0';
    sext_ln1118_18_reg_1960(2 downto 0) <= "000";
    shl_ln1118_6_reg_1965(0) <= '0';
    r_V_90_reg_2015(2 downto 0) <= "000";
    add_ln1192_22_reg_2050(5 downto 0) <= "000000";
    r_V_87_reg_2090(0) <= '0';
    r_V_87_reg_2090_pp0_iter4_reg(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1192_11_fu_650_p2 <= std_logic_vector(unsigned(shl_ln1192_10_fu_643_p3) + unsigned(sub_ln1192_10_fu_638_p2));
    add_ln1192_12_fu_987_p2 <= std_logic_vector(unsigned(shl_ln1192_13_fu_980_p3) + unsigned(sub_ln1192_12_fu_974_p2));
    add_ln1192_16_fu_687_p2 <= std_logic_vector(unsigned(shl_ln1192_15_fu_680_p3) + unsigned(sub_ln1192_13_fu_675_p2));
    add_ln1192_17_fu_1016_p2 <= std_logic_vector(unsigned(shl_ln1192_17_fu_1009_p3) + unsigned(sub_ln1192_14_reg_2035));
    add_ln1192_18_fu_1028_p2 <= std_logic_vector(unsigned(shl_ln1192_18_fu_1021_p3) + unsigned(add_ln1192_17_fu_1016_p2));
    add_ln1192_19_fu_1045_p2 <= std_logic_vector(signed(sext_ln1192_26_fu_1041_p1) + signed(add_ln1192_18_fu_1028_p2));
    add_ln1192_1_fu_794_p2 <= std_logic_vector(unsigned(shl_ln2_fu_787_p3) + unsigned(grp_fu_1626_p3));
    add_ln1192_20_fu_1090_p2 <= std_logic_vector(signed(sext_ln1192_28_fu_1086_p1) + signed(sub_ln1192_15_fu_1073_p2));
    add_ln1192_22_fu_769_p2 <= std_logic_vector(unsigned(sub_ln1192_19_fu_746_p2) + unsigned(sext_ln1192_32_fu_765_p1));
    add_ln1192_23_fu_1181_p2 <= std_logic_vector(unsigned(shl_ln1192_21_fu_1174_p3) + unsigned(shl_ln1192_20_fu_1167_p3));
    add_ln1192_24_fu_1218_p2 <= std_logic_vector(unsigned(shl_ln1192_22_fu_1211_p3) + unsigned(sub_ln1192_20_fu_1205_p2));
    add_ln1192_2_fu_1296_p2 <= std_logic_vector(signed(sext_ln1192_7_fu_1292_p1) + signed(sub_ln1192_2_fu_1280_p2));
    add_ln1192_3_fu_1309_p2 <= std_logic_vector(unsigned(shl_ln1192_2_fu_1302_p3) + unsigned(add_ln1192_2_fu_1296_p2));
    add_ln1192_5_fu_540_p2 <= std_logic_vector(signed(sext_ln1192_9_fu_532_p1) + signed(mul_ln1192_5_fu_536_p2));
    add_ln1192_6_fu_855_p2 <= std_logic_vector(unsigned(shl_ln1192_4_fu_848_p3) + unsigned(sub_ln1192_5_fu_842_p2));
    add_ln1192_7_fu_868_p2 <= std_logic_vector(unsigned(shl_ln1192_5_fu_861_p3) + unsigned(add_ln1192_6_fu_855_p2));
    add_ln1192_8_fu_894_p2 <= std_logic_vector(unsigned(shl_ln1192_7_fu_887_p3) + unsigned(sub_ln1192_6_fu_881_p2));
    add_ln1192_9_fu_907_p2 <= std_logic_vector(unsigned(shl_ln1192_8_fu_900_p3) + unsigned(add_ln1192_8_fu_894_p2));
    add_ln1193_1_fu_356_p2 <= std_logic_vector(signed(sext_ln1193_1_fu_352_p1) + signed(add_ln1193_fu_313_p2));
    add_ln1193_fu_313_p2 <= std_logic_vector(unsigned(shl_ln1193_1_fu_306_p3) + unsigned(grp_fu_1376_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to4)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1376_p2 <= (mul_ln1193_1_reg_1709 & ap_const_lv6_0);
    grp_fu_1396_p0 <= sext_ln1118_13_fu_372_p1(14 - 1 downto 0);
    grp_fu_1396_p1 <= sext_ln1118_11_fu_362_p1(12 - 1 downto 0);
    grp_fu_1396_p2 <= sext_ln1118_fu_273_p1(12 - 1 downto 0);
    grp_fu_1410_p0 <= sext_ln1118_9_fu_334_p1(15 - 1 downto 0);
    grp_fu_1410_p1 <= sext_ln1118_6_fu_321_p1(12 - 1 downto 0);
    grp_fu_1442_p2 <= (r_V_91_reg_1775 & ap_const_lv6_0);
    grp_fu_1455_p1 <= sext_ln1118_5_fu_318_p1(12 - 1 downto 0);
    grp_fu_1455_p2 <= sext_ln1116_5_reg_1735(12 - 1 downto 0);
    grp_fu_1462_p0 <= sext_ln1118_13_fu_372_p1(14 - 1 downto 0);
    grp_fu_1462_p1 <= sext_ln1118_11_fu_362_p1(12 - 1 downto 0);
    grp_fu_1476_p1 <= sext_ln1192_1_reg_1780(12 - 1 downto 0);
    grp_fu_1520_p0 <= sext_ln1118_27_fu_579_p1(13 - 1 downto 0);
    grp_fu_1520_p1 <= sext_ln1118_26_reg_1870(16 - 1 downto 0);
    grp_fu_1520_p2 <= sext_ln1192_reg_1684_pp0_iter1_reg(12 - 1 downto 0);
    grp_fu_1526_p0 <= sext_ln1118_26_reg_1870(16 - 1 downto 0);
    grp_fu_1526_p2 <= sext_ln1192_17_fu_587_p1(12 - 1 downto 0);
    grp_fu_1533_p1 <= sext_ln1192_12_fu_560_p1(12 - 1 downto 0);
    grp_fu_1533_p2 <= (p_Val2_5_reg_1714_pp0_iter1_reg & ap_const_lv18_0);
    grp_fu_1542_p2 <= sext_ln1192_18_fu_607_p1(12 - 1 downto 0);
    grp_fu_1551_p2 <= sext_ln1192_18_fu_607_p1(12 - 1 downto 0);
    grp_fu_1592_p0 <= sext_ln1118_9_reg_1804(15 - 1 downto 0);
    grp_fu_1592_p2 <= sext_ln1192_17_fu_587_p1(12 - 1 downto 0);
    grp_fu_1618_p2 <= sext_ln1192_18_fu_607_p1(12 - 1 downto 0);
    grp_fu_1626_p1 <= sext_ln1192_2_reg_1933(12 - 1 downto 0);
    grp_fu_1644_p0 <= sext_ln1118_18_reg_1960(15 - 1 downto 0);
    grp_fu_1644_p2 <= sext_ln1192_3_reg_1792_pp0_iter2_reg(12 - 1 downto 0);
    grp_fu_1656_p1 <= sext_ln1192_2_reg_1933_pp0_iter3_reg(12 - 1 downto 0);
    lhs_V_fu_525_p3 <= (trunc_ln1117_reg_1663_pp0_iter1_reg & ap_const_lv18_0);
    mul_ln1192_10_fu_1509_p0 <= sext_ln1192_14_fu_569_p1(27 - 1 downto 0);
    mul_ln1192_10_fu_1509_p1 <= sext_ln1192_1_reg_1780(12 - 1 downto 0);
    mul_ln1192_11_fu_1514_p0 <= sext_ln1192_14_fu_569_p1(27 - 1 downto 0);
    mul_ln1192_11_fu_1514_p1 <= sext_ln1192_12_fu_560_p1(12 - 1 downto 0);
    mul_ln1192_17_fu_1560_p1 <= sext_ln1192_18_fu_607_p1(12 - 1 downto 0);
    mul_ln1192_18_fu_1566_p1 <= sext_ln1192_17_fu_587_p1(12 - 1 downto 0);
    mul_ln1192_19_fu_1650_p0 <= ap_const_lv18_75(8 - 1 downto 0);
    mul_ln1192_19_fu_1650_p1 <= sext_ln1192_21_reg_1882_pp0_iter2_reg(12 - 1 downto 0);
    mul_ln1192_1_fu_1482_p1 <= sext_ln1192_reg_1684_pp0_iter1_reg(12 - 1 downto 0);
    mul_ln1192_23_fu_1580_p1 <= sext_ln1192_3_reg_1792(12 - 1 downto 0);
    mul_ln1192_24_fu_1586_p1 <= sext_ln1192_18_fu_607_p1(12 - 1 downto 0);
    mul_ln1192_26_fu_1606_p1 <= sext_ln1192_31_fu_723_p1(12 - 1 downto 0);
    mul_ln1192_27_fu_1612_p1 <= sext_ln1192_31_fu_723_p1(12 - 1 downto 0);
    mul_ln1192_3_fu_1639_p1 <= sext_ln1192_3_reg_1792_pp0_iter2_reg(12 - 1 downto 0);
    mul_ln1192_5_fu_536_p1 <= sext_ln1118_1_reg_1787(12 - 1 downto 0);
    mul_ln1192_5_fu_536_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_41_reg_1829) * signed(mul_ln1192_5_fu_536_p1))), 36));
    mul_ln1192_6_fu_549_p1 <= tmp_4_reg_1746_pp0_iter1_reg;
    mul_ln1192_6_fu_549_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_41_reg_1829) * signed(mul_ln1192_6_fu_549_p1))), 36));
    mul_ln1192_7_fu_1493_p1 <= sext_ln1192_1_reg_1780(12 - 1 downto 0);
    mul_ln1192_8_fu_1498_p1 <= sext_ln1192_12_fu_560_p1(12 - 1 downto 0);
    mul_ln1192_9_fu_1504_p1 <= sext_ln1116_5_reg_1735_pp0_iter1_reg(12 - 1 downto 0);
    mul_ln1193_1_fu_1350_p1 <= sext_ln1192_fu_201_p1(12 - 1 downto 0);
    p_Val2_5_fu_227_p4 <= x_V_in_sig(179 downto 168);
    r_V_19_fu_1392_p0 <= sext_ln1192_reg_1684(12 - 1 downto 0);
    r_V_19_fu_1392_p1 <= sext_ln1192_reg_1684(12 - 1 downto 0);
    r_V_1_fu_215_p3 <= (trunc_ln1117_fu_183_p1 & ap_const_lv2_0);
    r_V_2_fu_292_p3 <= (trunc_ln1117_reg_1663 & ap_const_lv1_0);
    r_V_37_fu_1487_p0 <= ap_const_lv18_15(6 - 1 downto 0);
    r_V_3_fu_572_p3 <= (p_Val2_5_reg_1714_pp0_iter1_reg & ap_const_lv1_0);
    r_V_40_fu_1356_p0 <= sext_ln1116_5_fu_241_p1(12 - 1 downto 0);
    r_V_40_fu_1356_p1 <= sext_ln1116_5_fu_241_p1(12 - 1 downto 0);
    r_V_48_fu_393_p2 <= std_logic_vector(signed(sext_ln1118_24_fu_389_p1) + signed(sext_ln1118_7_fu_324_p1));
    r_V_56_fu_1418_p1 <= sext_ln1116_3_reg_1729(12 - 1 downto 0);
    r_V_60_fu_409_p2 <= std_logic_vector(signed(sext_ln1118_24_fu_389_p1) - signed(sext_ln1118_7_fu_324_p1));
    r_V_65_fu_382_p3 <= (p_Val2_5_reg_1714 & ap_const_lv2_0);
    r_V_69_fu_1436_p0 <= ap_const_lv18_17(6 - 1 downto 0);
    r_V_70_fu_449_p3 <= (tmp_5_reg_1755 & ap_const_lv1_0);
    r_V_74_fu_1450_p0 <= sext_ln1116_8_fu_415_p1(15 - 1 downto 0);
    r_V_74_fu_1450_p1 <= sext_ln1116_3_reg_1729(12 - 1 downto 0);
    r_V_7_fu_365_p3 <= (tmp_1_reg_1669 & ap_const_lv2_0);
    r_V_86_fu_338_p2 <= std_logic_vector(signed(sext_ln1118_9_fu_334_p1) - signed(sext_ln1118_6_fu_321_p1));
    r_V_87_fu_825_p2 <= std_logic_vector(signed(sext_ln1118_20_fu_822_p1) + signed(sext_ln1118_19_fu_818_p1));
    r_V_88_fu_403_p1 <= sext_ln1118_5_fu_318_p1(12 - 1 downto 0);
    r_V_88_fu_403_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv17_B) * signed(r_V_88_fu_403_p1))), 17));
    r_V_89_fu_1423_p0 <= sext_ln1116_8_fu_415_p1(15 - 1 downto 0);
    r_V_89_fu_1423_p1 <= sext_ln1118_fu_273_p1(12 - 1 downto 0);
    r_V_8_fu_492_p3 <= (tmp_1_reg_1669_pp0_iter1_reg & ap_const_lv1_0);
    r_V_90_fu_601_p2 <= std_logic_vector(signed(sext_ln1118_29_fu_597_p1) - signed(sext_ln1118_8_fu_480_p1));
    r_V_91_fu_1370_p0 <= sext_ln1116_5_fu_241_p1(12 - 1 downto 0);
    r_V_91_fu_1370_p1 <= sext_ln1116_fu_187_p1(12 - 1 downto 0);
    r_V_92_fu_1051_p3 <= (tmp_1_reg_1669_pp0_iter2_reg & ap_const_lv4_0);
    r_V_93_fu_712_p3 <= (tmp_5_reg_1755_pp0_iter1_reg & ap_const_lv4_0);
    r_V_94_fu_1127_p2 <= std_logic_vector(signed(sext_ln1118_46_fu_1123_p1) - signed(sext_ln1118_45_fu_1113_p1));
    r_V_95_fu_752_p2 <= std_logic_vector(signed(sext_ln1118_26_reg_1870) - signed(sext_ln1118_27_fu_579_p1));
    r_V_96_fu_1187_p2 <= std_logic_vector(signed(sext_ln1118_43_fu_1058_p1) - signed(sext_ln1118_15_fu_799_p1));
    r_V_fu_1344_p0 <= sext_ln1192_fu_201_p1(12 - 1 downto 0);
    r_V_fu_1344_p1 <= sext_ln1116_fu_187_p1(12 - 1 downto 0);
    ret_V_1_fu_939_p2 <= std_logic_vector(signed(ap_const_lv36_FCD000000) + signed(sub_ln1192_8_fu_933_p2));
    ret_V_2_fu_993_p2 <= std_logic_vector(signed(ap_const_lv30_3FB40000) + signed(add_ln1192_12_fu_987_p2));
    ret_V_3_fu_1151_p2 <= std_logic_vector(signed(ap_const_lv30_3F8C0000) + signed(sub_ln1192_17_fu_1145_p2));
    ret_V_4_fu_1254_p2 <= std_logic_vector(signed(ap_const_lv36_FE6000000) + signed(sub_ln1192_22_fu_1248_p2));
    ret_V_fu_1327_p2 <= std_logic_vector(signed(ap_const_lv30_3F540000) + signed(sub_ln1192_3_fu_1322_p2));
    rhs_V_10_fu_1133_p3 <= (r_V_94_fu_1127_p2 & ap_const_lv12_0);
    rhs_V_11_fu_757_p3 <= (r_V_95_fu_752_p2 & ap_const_lv12_0);
    rhs_V_12_fu_1193_p3 <= (r_V_96_fu_1187_p2 & ap_const_lv18_0);
    rhs_V_13_fu_1237_p3 <= (tmp_5_reg_1755_pp0_iter2_reg & ap_const_lv18_0);
    rhs_V_1_fu_1285_p3 <= (tmp_1_reg_1669_pp0_iter3_reg & ap_const_lv17_0);
    rhs_V_2_fu_1315_p3 <= (r_V_87_reg_2090_pp0_iter4_reg & ap_const_lv12_0);
    rhs_V_3_fu_926_p3 <= (r_V_90_reg_2015 & ap_const_lv18_0);
    rhs_V_6_fu_1034_p3 <= (trunc_ln728_reg_1918_pp0_iter2_reg & ap_const_lv12_0);
    rhs_V_7_fu_1062_p3 <= (tmp_1_reg_1669_pp0_iter2_reg & ap_const_lv16_0);
    rhs_V_8_fu_1079_p3 <= (tmp_2_reg_1697_pp0_iter2_reg & ap_const_lv12_0);
    rhs_V_9_fu_1096_p3 <= (tmp_5_reg_1755_pp0_iter2_reg & ap_const_lv16_0);
    rhs_V_fu_344_p3 <= (r_V_86_fu_338_p2 & ap_const_lv12_0);
        sext_ln1116_3_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_fu_227_p4),27));

        sext_ln1116_5_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_fu_227_p4),24));

        sext_ln1116_8_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_60_fu_409_p2),27));

        sext_ln1116_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1117_fu_183_p1),24));

        sext_ln1118_11_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_1669),15));

        sext_ln1118_13_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_7_fu_365_p3),15));

        sext_ln1118_15_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_8_reg_1949),17));

        sext_ln1118_18_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_4_fu_503_p3),16));

        sext_ln1118_19_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_5_fu_811_p3),18));

        sext_ln1118_1_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_1669),36));

        sext_ln1118_20_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_6_reg_1965),18));

        sext_ln1118_24_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_65_fu_382_p3),15));

        sext_ln1118_26_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_8_fu_419_p3),17));

        sext_ln1118_27_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_3_fu_572_p3),17));

        sext_ln1118_29_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_s_fu_590_p3),18));

        sext_ln1118_43_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_92_fu_1051_p3),17));

        sext_ln1118_45_fu_1113_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1746_pp0_iter2_reg),15));

        sext_ln1118_46_fu_1123_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_2_fu_1116_p3),15));

        sext_ln1118_5_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_reg_1714),17));

        sext_ln1118_6_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_reg_1714),16));

        sext_ln1118_7_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_reg_1714),15));

        sext_ln1118_8_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_reg_1799),18));

        sext_ln1118_9_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_fu_327_p3),16));

        sext_ln1118_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_1669),27));

        sext_ln1192_12_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1746_pp0_iter1_reg),30));

        sext_ln1192_14_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_89_reg_1865),30));

        sext_ln1192_17_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1746_pp0_iter1_reg),24));

        sext_ln1192_18_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1755_pp0_iter1_reg),24));

        sext_ln1192_1_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_1669),30));

        sext_ln1192_21_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1755),18));

        sext_ln1192_26_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_6_fu_1034_p3),30));

        sext_ln1192_27_fu_1069_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_7_fu_1062_p3),30));

        sext_ln1192_28_fu_1086_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_8_fu_1079_p3),30));

        sext_ln1192_29_fu_1103_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_9_fu_1096_p3),30));

        sext_ln1192_2_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_1697_pp0_iter1_reg),30));

        sext_ln1192_30_fu_1141_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_10_fu_1133_p3),30));

        sext_ln1192_31_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1755_pp0_iter1_reg),30));

        sext_ln1192_32_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_11_fu_757_p3),30));

        sext_ln1192_34_fu_1201_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_12_fu_1193_p3),36));

        sext_ln1192_37_fu_1244_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_13_fu_1237_p3),36));

        sext_ln1192_3_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_1697),24));

        sext_ln1192_7_fu_1292_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1_fu_1285_p3),30));

        sext_ln1192_9_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_525_p3),36));

        sext_ln1192_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_191_p4),24));

        sext_ln1193_1_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_344_p3),30));

    shl_ln1118_1_fu_620_p3 <= (tmp_1_reg_1669_pp0_iter1_reg & ap_const_lv3_0);
    shl_ln1118_2_fu_1116_p3 <= (tmp_4_reg_1746_pp0_iter2_reg & ap_const_lv2_0);
    shl_ln1118_4_fu_503_p3 <= (tmp_2_reg_1697_pp0_iter1_reg & ap_const_lv3_0);
    shl_ln1118_5_fu_811_p3 <= (tmp_2_reg_1697_pp0_iter2_reg & ap_const_lv5_0);
    shl_ln1118_6_fu_514_p3 <= (tmp_2_reg_1697_pp0_iter1_reg & ap_const_lv1_0);
    shl_ln1118_8_fu_419_p3 <= (p_Val2_5_reg_1714 & ap_const_lv4_0);
    shl_ln1118_s_fu_590_p3 <= (p_Val2_5_reg_1714_pp0_iter1_reg & ap_const_lv5_0);
    shl_ln1192_10_fu_643_p3 <= (grp_fu_1551_p3 & ap_const_lv6_0);
    shl_ln1192_11_fu_955_p3 <= (mul_ln1192_17_reg_2025 & ap_const_lv6_0);
    shl_ln1192_12_fu_967_p3 <= (mul_ln1192_18_reg_2030 & ap_const_lv6_0);
    shl_ln1192_13_fu_980_p3 <= (mul_ln1192_19_fu_1650_p2 & ap_const_lv12_0);
    shl_ln1192_14_fu_668_p3 <= (mul_ln1192_22_reg_1908 & ap_const_lv6_0);
    shl_ln1192_15_fu_680_p3 <= (trunc_ln1192_reg_1913 & ap_const_lv6_0);
    shl_ln1192_16_fu_696_p3 <= (mul_ln1192_23_fu_1580_p2 & ap_const_lv6_0);
    shl_ln1192_17_fu_1009_p3 <= (mul_ln1192_24_reg_2040 & ap_const_lv6_0);
    shl_ln1192_18_fu_1021_p3 <= (mul_ln1192_25_reg_2045 & ap_const_lv6_0);
    shl_ln1192_19_fu_739_p3 <= (mul_ln1192_29_fu_1599_p2 & ap_const_lv6_0);
    shl_ln1192_1_fu_1273_p3 <= (mul_ln1192_3_reg_2080 & ap_const_lv6_0);
    shl_ln1192_20_fu_1167_p3 <= (add_ln1192_22_reg_2050 & ap_const_lv6_0);
    shl_ln1192_21_fu_1174_p3 <= (mul_ln1192_26_reg_2055 & ap_const_lv6_0);
    shl_ln1192_22_fu_1211_p3 <= (mul_ln1192_27_reg_2060 & ap_const_lv6_0);
    shl_ln1192_23_fu_1224_p3 <= (mul_ln1192_28_reg_2065 & ap_const_lv12_0);
    shl_ln1192_2_fu_1302_p3 <= (mul_ln1192_4_reg_2085 & ap_const_lv6_0);
    shl_ln1192_3_fu_835_p3 <= (mul_ln1192_7_reg_1980 & ap_const_lv6_0);
    shl_ln1192_4_fu_848_p3 <= (mul_ln1192_8_reg_1985 & ap_const_lv6_0);
    shl_ln1192_5_fu_861_p3 <= (mul_ln1192_9_reg_1990 & ap_const_lv12_0);
    shl_ln1192_6_fu_874_p3 <= (mul_ln1192_10_reg_1995 & ap_const_lv6_0);
    shl_ln1192_7_fu_887_p3 <= (mul_ln1192_11_reg_2000 & ap_const_lv6_0);
    shl_ln1192_8_fu_900_p3 <= (mul_ln1192_12_reg_2005 & ap_const_lv12_0);
    shl_ln1192_9_fu_913_p3 <= (mul_ln1192_13_reg_2010 & ap_const_lv12_0);
    shl_ln1192_s_fu_631_p3 <= (grp_fu_1542_p3 & ap_const_lv6_0);
    shl_ln1193_1_fu_306_p3 <= (mul_ln1193_2_fu_1385_p2 & ap_const_lv6_0);
    shl_ln1_fu_327_p3 <= (p_Val2_5_reg_1714 & ap_const_lv3_0);
    shl_ln2_fu_787_p3 <= (mul_ln1192_1_reg_1944 & ap_const_lv6_0);
    sub_ln1192_10_fu_638_p2 <= std_logic_vector(signed(grp_fu_1533_p3) - signed(shl_ln1192_s_fu_631_p3));
    sub_ln1192_11_fu_962_p2 <= std_logic_vector(unsigned(add_ln1192_11_reg_2020) - unsigned(shl_ln1192_11_fu_955_p3));
    sub_ln1192_12_fu_974_p2 <= std_logic_vector(unsigned(sub_ln1192_11_fu_962_p2) - unsigned(shl_ln1192_12_fu_967_p3));
    sub_ln1192_13_fu_675_p2 <= std_logic_vector(signed(grp_fu_1572_p3) - signed(shl_ln1192_14_fu_668_p3));
    sub_ln1192_14_fu_703_p2 <= std_logic_vector(unsigned(add_ln1192_16_fu_687_p2) - unsigned(shl_ln1192_16_fu_696_p3));
    sub_ln1192_15_fu_1073_p2 <= std_logic_vector(unsigned(add_ln1192_19_fu_1045_p2) - unsigned(sext_ln1192_27_fu_1069_p1));
    sub_ln1192_16_fu_1107_p2 <= std_logic_vector(unsigned(add_ln1192_20_fu_1090_p2) - unsigned(sext_ln1192_29_fu_1103_p1));
    sub_ln1192_17_fu_1145_p2 <= std_logic_vector(unsigned(sub_ln1192_16_fu_1107_p2) - unsigned(sext_ln1192_30_fu_1141_p1));
    sub_ln1192_18_fu_726_p2 <= std_logic_vector(unsigned(ap_const_lv30_0) - unsigned(shl_ln1192_15_fu_680_p3));
    sub_ln1192_19_fu_746_p2 <= std_logic_vector(unsigned(sub_ln1192_18_fu_726_p2) - unsigned(shl_ln1192_19_fu_739_p3));
    sub_ln1192_20_fu_1205_p2 <= std_logic_vector(unsigned(add_ln1192_23_fu_1181_p2) - unsigned(sext_ln1192_34_fu_1201_p1));
    sub_ln1192_21_fu_1231_p2 <= std_logic_vector(unsigned(add_ln1192_24_fu_1218_p2) - unsigned(shl_ln1192_23_fu_1224_p3));
    sub_ln1192_22_fu_1248_p2 <= std_logic_vector(unsigned(sub_ln1192_21_fu_1231_p2) - unsigned(sext_ln1192_37_fu_1244_p1));
    sub_ln1192_2_fu_1280_p2 <= std_logic_vector(signed(grp_fu_1656_p3) - signed(shl_ln1192_1_fu_1273_p3));
    sub_ln1192_3_fu_1322_p2 <= std_logic_vector(unsigned(add_ln1192_3_reg_2115) - unsigned(rhs_V_2_fu_1315_p3));
    sub_ln1192_4_fu_831_p2 <= std_logic_vector(unsigned(add_ln1192_5_reg_1970) - unsigned(mul_ln1192_6_reg_1975));
    sub_ln1192_5_fu_842_p2 <= std_logic_vector(unsigned(sub_ln1192_4_fu_831_p2) - unsigned(shl_ln1192_3_fu_835_p3));
    sub_ln1192_6_fu_881_p2 <= std_logic_vector(unsigned(add_ln1192_7_fu_868_p2) - unsigned(shl_ln1192_6_fu_874_p3));
    sub_ln1192_7_fu_920_p2 <= std_logic_vector(unsigned(add_ln1192_9_fu_907_p2) - unsigned(shl_ln1192_9_fu_913_p3));
    sub_ln1192_8_fu_933_p2 <= std_logic_vector(unsigned(sub_ln1192_7_fu_920_p2) - unsigned(rhs_V_3_fu_926_p3));
    tmp_1_fu_191_p4 <= x_V_in_sig(191 downto 180);
    trunc_ln1117_fu_183_p1 <= x_V_in_sig(12 - 1 downto 0);
    trunc_ln1192_fu_470_p1 <= r_V_89_fu_1423_p2(24 - 1 downto 0);
    trunc_ln728_fu_473_p1 <= r_V_88_fu_403_p2(16 - 1 downto 0);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, x_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V_ap_vld, x_V, x_V_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

    y_0_V <= ret_V_fu_1327_p2(29 downto 18);

    y_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_V <= trunc_ln708_1_reg_2095_pp0_iter4_reg;

    y_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= trunc_ln708_2_reg_2100_pp0_iter4_reg;

    y_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_3_V <= trunc_ln708_3_reg_2105_pp0_iter4_reg;

    y_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= trunc_ln708_4_reg_2110_pp0_iter4_reg;

    y_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
