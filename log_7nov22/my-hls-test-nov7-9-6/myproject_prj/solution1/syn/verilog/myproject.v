// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.993000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=233,HLS_SYN_LUT=956,HLS_VERSION=2020_1}" *)

module myproject (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V_ap_vld,
        x_V,
        y_0_V,
        y_0_V_ap_vld,
        y_1_V,
        y_1_V_ap_vld,
        y_2_V,
        y_2_V_ap_vld,
        y_3_V,
        y_3_V_ap_vld,
        y_4_V,
        y_4_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   x_V_ap_vld;
input  [143:0] x_V;
output  [8:0] y_0_V;
output   y_0_V_ap_vld;
output  [8:0] y_1_V;
output   y_1_V_ap_vld;
output  [8:0] y_2_V;
output   y_2_V_ap_vld;
output  [8:0] y_3_V;
output   y_3_V_ap_vld;
output  [8:0] y_4_V;
output   y_4_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_0_V_ap_vld;
reg y_1_V_ap_vld;
reg y_2_V_ap_vld;
reg y_3_V_ap_vld;
reg y_4_V_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    x_V_ap_vld_in_sig;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [143:0] x_V_preg;
reg   [143:0] x_V_in_sig;
reg    x_V_ap_vld_preg;
reg    x_V_blk_n;
wire    ap_block_pp0_stage0;
wire  signed [8:0] tmp_fu_167_p4;
reg  signed [8:0] tmp_reg_720;
reg  signed [8:0] tmp_1_reg_729;
wire  signed [8:0] p_Val2_4_fu_187_p4;
reg  signed [8:0] p_Val2_4_reg_735;
reg   [8:0] tmp_3_reg_745;
wire  signed [17:0] mul_ln1192_2_fu_714_p2;
reg  signed [17:0] mul_ln1192_2_reg_750;
wire   [14:0] trunc_ln1192_fu_221_p1;
reg   [14:0] trunc_ln1192_reg_755;
reg  signed [8:0] tmp_4_reg_760;
reg   [7:0] tmp_s_reg_767;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire  signed [8:0] r_V_5_fu_215_p0;
wire  signed [17:0] sext_ln1118_1_fu_197_p1;
wire  signed [8:0] r_V_5_fu_215_p1;
wire  signed [17:0] r_V_5_fu_215_p2;
wire   [9:0] r_V_fu_248_p3;
wire  signed [8:0] mul_ln1192_fu_259_p0;
wire  signed [14:0] sext_ln1192_fu_245_p1;
wire  signed [9:0] mul_ln1192_fu_259_p1;
wire   [14:0] mul_ln1192_fu_259_p2;
wire   [16:0] rhs_V_fu_273_p3;
wire  signed [17:0] sext_ln1192_2_fu_280_p1;
wire   [17:0] shl_ln_fu_265_p3;
wire  signed [8:0] mul_ln1192_1_fu_290_p0;
wire  signed [8:0] mul_ln1192_1_fu_290_p1;
wire   [14:0] mul_ln1192_1_fu_290_p2;
wire   [17:0] sub_ln1192_fu_284_p2;
wire   [17:0] shl_ln1192_1_fu_296_p3;
wire   [16:0] rhs_V_1_fu_310_p3;
wire   [17:0] add_ln1192_fu_304_p2;
wire  signed [17:0] sext_ln1192_3_fu_317_p1;
wire   [17:0] sub_ln1192_1_fu_321_p2;
wire   [17:0] ret_V_fu_327_p2;
wire   [20:0] shl_ln1192_3_fu_354_p3;
wire   [20:0] shl_ln1192_2_fu_347_p3;
wire   [9:0] r_V_2_fu_370_p3;
wire  signed [8:0] mul_ln1192_3_fu_381_p0;
wire  signed [9:0] mul_ln1192_3_fu_381_p1;
wire  signed [14:0] sext_ln1192_6_fu_377_p1;
wire   [14:0] mul_ln1192_3_fu_381_p2;
wire   [20:0] sub_ln1192_2_fu_361_p2;
wire   [20:0] shl_ln1192_4_fu_387_p3;
wire  signed [8:0] mul_ln1192_4_fu_407_p0;
wire  signed [8:0] mul_ln1192_4_fu_407_p1;
wire  signed [14:0] sext_ln1118_2_fu_401_p1;
wire   [14:0] mul_ln1192_4_fu_407_p2;
wire   [20:0] add_ln1192_2_fu_395_p2;
wire   [20:0] shl_ln1192_5_fu_413_p3;
wire   [10:0] shl_ln1_fu_427_p3;
wire  signed [11:0] sext_ln1118_4_fu_434_p1;
wire  signed [11:0] sext_ln1118_fu_344_p1;
wire   [11:0] r_V_6_fu_438_p2;
wire   [20:0] sub_ln1192_3_fu_421_p2;
wire   [20:0] rhs_V_2_fu_444_p3;
wire   [20:0] sub_ln1192_4_fu_452_p2;
wire   [20:0] ret_V_1_fu_458_p2;
wire  signed [17:0] rhs_V_8_fu_478_p3;
wire  signed [9:0] r_V_7_fu_491_p3;
wire  signed [8:0] mul_ln1192_5_fu_506_p0;
wire  signed [14:0] sext_ln1192_7_fu_475_p1;
wire  signed [9:0] mul_ln1192_5_fu_506_p1;
wire   [14:0] mul_ln1192_5_fu_506_p2;
wire   [17:0] sub_ln1192_5_fu_485_p2;
wire   [17:0] shl_ln1192_6_fu_512_p3;
wire   [11:0] shl_ln1192_7_fu_526_p3;
wire  signed [11:0] sext_ln1192_8_fu_498_p1;
wire   [11:0] sub_ln1192_7_fu_533_p2;
wire   [17:0] sub_ln1192_6_fu_520_p2;
wire   [17:0] shl_ln1192_8_fu_539_p3;
wire   [17:0] add_ln1192_4_fu_547_p2;
wire   [17:0] ret_V_2_fu_553_p2;
wire  signed [8:0] mul_ln1192_6_fu_570_p0;
wire  signed [9:0] mul_ln1192_6_fu_570_p1;
wire   [14:0] mul_ln1192_6_fu_570_p2;
wire   [14:0] rhs_V_9_fu_584_p3;
wire  signed [17:0] sext_ln1192_10_fu_591_p1;
wire   [17:0] shl_ln1192_9_fu_576_p3;
wire   [15:0] rhs_V_5_fu_601_p3;
wire   [17:0] sub_ln1192_8_fu_595_p2;
wire  signed [17:0] sext_ln1192_11_fu_608_p1;
wire   [15:0] rhs_V_6_fu_618_p3;
wire   [17:0] sub_ln1192_9_fu_612_p2;
wire  signed [17:0] sext_ln1192_12_fu_625_p1;
wire   [17:0] sub_ln1192_10_fu_629_p2;
wire   [17:0] ret_V_3_fu_635_p2;
wire   [17:0] rhs_V_7_fu_656_p3;
wire  signed [18:0] sext_ln703_fu_652_p1;
wire  signed [18:0] sext_ln728_fu_663_p1;
wire   [18:0] ret_V_4_fu_667_p2;
wire  signed [8:0] mul_ln1192_7_fu_677_p0;
wire  signed [8:0] mul_ln1192_7_fu_677_p1;
wire   [14:0] mul_ln1192_7_fu_677_p2;
wire  signed [20:0] sext_ln1192_13_fu_673_p1;
wire   [20:0] shl_ln1192_s_fu_683_p3;
wire   [20:0] sub_ln1192_11_fu_691_p2;
wire   [20:0] ret_V_5_fu_697_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 x_V_preg = 144'd0;
#0 x_V_ap_vld_preg = 1'b0;
end

myproject_mul_mul_9s_18s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
myproject_mul_mul_9s_18s_18_1_1_U1(
    .din0(tmp_fu_167_p4),
    .din1(r_V_5_fu_215_p2),
    .dout(mul_ln1192_2_fu_714_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_V_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_V_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (x_V_ap_vld == 1'b1))) begin
            x_V_ap_vld_preg <= x_V_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_V_preg <= 144'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (x_V_ap_vld == 1'b1))) begin
            x_V_preg <= x_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln1192_2_reg_750 <= mul_ln1192_2_fu_714_p2;
        p_Val2_4_reg_735 <= {{x_V_in_sig[134:126]}};
        tmp_1_reg_729 <= {{x_V_in_sig[26:18]}};
        tmp_3_reg_745 <= {{x_V_in_sig[44:36]}};
        tmp_4_reg_760 <= {{x_V_in_sig[35:27]}};
        tmp_reg_720 <= {{x_V_in_sig[143:135]}};
        tmp_s_reg_767 <= {{x_V_in_sig[34:27]}};
        trunc_ln1192_reg_755 <= trunc_ln1192_fu_221_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((x_V_ap_vld == 1'b1)) begin
        x_V_ap_vld_in_sig = x_V_ap_vld;
    end else begin
        x_V_ap_vld_in_sig = x_V_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_V_blk_n = x_V_ap_vld;
    end else begin
        x_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x_V_ap_vld == 1'b1)) begin
        x_V_in_sig = x_V;
    end else begin
        x_V_in_sig = x_V_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_0_V_ap_vld = 1'b1;
    end else begin
        y_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_1_V_ap_vld = 1'b1;
    end else begin
        y_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_2_V_ap_vld = 1'b1;
    end else begin
        y_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_3_V_ap_vld = 1'b1;
    end else begin
        y_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_4_V_ap_vld = 1'b1;
    end else begin
        y_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_2_fu_395_p2 = (sub_ln1192_2_fu_361_p2 + shl_ln1192_4_fu_387_p3);

assign add_ln1192_4_fu_547_p2 = (sub_ln1192_6_fu_520_p2 + shl_ln1192_8_fu_539_p3);

assign add_ln1192_fu_304_p2 = (sub_ln1192_fu_284_p2 + shl_ln1192_1_fu_296_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign mul_ln1192_1_fu_290_p0 = sext_ln1192_fu_245_p1;

assign mul_ln1192_1_fu_290_p1 = sext_ln1192_fu_245_p1;

assign mul_ln1192_1_fu_290_p2 = ($signed(mul_ln1192_1_fu_290_p0) * $signed(mul_ln1192_1_fu_290_p1));

assign mul_ln1192_3_fu_381_p0 = tmp_reg_720;

assign mul_ln1192_3_fu_381_p1 = sext_ln1192_6_fu_377_p1;

assign mul_ln1192_3_fu_381_p2 = ($signed(mul_ln1192_3_fu_381_p0) * $signed(mul_ln1192_3_fu_381_p1));

assign mul_ln1192_4_fu_407_p0 = tmp_3_reg_745;

assign mul_ln1192_4_fu_407_p1 = sext_ln1118_2_fu_401_p1;

assign mul_ln1192_4_fu_407_p2 = ($signed(mul_ln1192_4_fu_407_p0) * $signed(mul_ln1192_4_fu_407_p1));

assign mul_ln1192_5_fu_506_p0 = sext_ln1192_7_fu_475_p1;

assign mul_ln1192_5_fu_506_p1 = r_V_7_fu_491_p3;

assign mul_ln1192_5_fu_506_p2 = ($signed(mul_ln1192_5_fu_506_p0) * $signed(mul_ln1192_5_fu_506_p1));

assign mul_ln1192_6_fu_570_p0 = sext_ln1118_2_fu_401_p1;

assign mul_ln1192_6_fu_570_p1 = sext_ln1192_6_fu_377_p1;

assign mul_ln1192_6_fu_570_p2 = ($signed(mul_ln1192_6_fu_570_p0) * $signed(mul_ln1192_6_fu_570_p1));

assign mul_ln1192_7_fu_677_p0 = sext_ln1192_7_fu_475_p1;

assign mul_ln1192_7_fu_677_p1 = sext_ln1192_7_fu_475_p1;

assign mul_ln1192_7_fu_677_p2 = ($signed(mul_ln1192_7_fu_677_p0) * $signed(mul_ln1192_7_fu_677_p1));

assign mul_ln1192_fu_259_p0 = sext_ln1192_fu_245_p1;

assign mul_ln1192_fu_259_p1 = r_V_fu_248_p3;

assign mul_ln1192_fu_259_p2 = ($signed(mul_ln1192_fu_259_p0) * $signed(mul_ln1192_fu_259_p1));

assign p_Val2_4_fu_187_p4 = {{x_V_in_sig[134:126]}};

assign r_V_2_fu_370_p3 = {{p_Val2_4_reg_735}, {1'd0}};

assign r_V_5_fu_215_p0 = sext_ln1118_1_fu_197_p1;

assign r_V_5_fu_215_p1 = sext_ln1118_1_fu_197_p1;

assign r_V_5_fu_215_p2 = ($signed(r_V_5_fu_215_p0) * $signed(r_V_5_fu_215_p1));

assign r_V_6_fu_438_p2 = ($signed(sext_ln1118_4_fu_434_p1) - $signed(sext_ln1118_fu_344_p1));

assign r_V_7_fu_491_p3 = {{tmp_4_reg_760}, {1'd0}};

assign r_V_fu_248_p3 = {{tmp_reg_720}, {1'd0}};

assign ret_V_1_fu_458_p2 = ($signed(21'd2068480) + $signed(sub_ln1192_4_fu_452_p2));

assign ret_V_2_fu_553_p2 = ($signed(18'd260608) + $signed(add_ln1192_4_fu_547_p2));

assign ret_V_3_fu_635_p2 = ($signed(18'd260096) + $signed(sub_ln1192_10_fu_629_p2));

assign ret_V_4_fu_667_p2 = ($signed(sext_ln703_fu_652_p1) - $signed(sext_ln728_fu_663_p1));

assign ret_V_5_fu_697_p2 = ($signed(21'd2080768) + $signed(sub_ln1192_11_fu_691_p2));

assign ret_V_fu_327_p2 = ($signed(18'd259072) + $signed(sub_ln1192_1_fu_321_p2));

assign rhs_V_1_fu_310_p3 = {{tmp_1_reg_729}, {8'd0}};

assign rhs_V_2_fu_444_p3 = {{r_V_6_fu_438_p2}, {9'd0}};

assign rhs_V_5_fu_601_p3 = {{tmp_reg_720}, {7'd0}};

assign rhs_V_6_fu_618_p3 = {{tmp_4_reg_760}, {7'd0}};

assign rhs_V_7_fu_656_p3 = {{tmp_reg_720}, {9'd0}};

assign rhs_V_8_fu_478_p3 = {{p_Val2_4_reg_735}, {9'd0}};

assign rhs_V_9_fu_584_p3 = {{p_Val2_4_reg_735}, {6'd0}};

assign rhs_V_fu_273_p3 = {{tmp_reg_720}, {8'd0}};

assign sext_ln1118_1_fu_197_p1 = p_Val2_4_fu_187_p4;

assign sext_ln1118_2_fu_401_p1 = p_Val2_4_reg_735;

assign sext_ln1118_4_fu_434_p1 = $signed(shl_ln1_fu_427_p3);

assign sext_ln1118_fu_344_p1 = p_Val2_4_reg_735;

assign sext_ln1192_10_fu_591_p1 = $signed(rhs_V_9_fu_584_p3);

assign sext_ln1192_11_fu_608_p1 = $signed(rhs_V_5_fu_601_p3);

assign sext_ln1192_12_fu_625_p1 = $signed(rhs_V_6_fu_618_p3);

assign sext_ln1192_13_fu_673_p1 = $signed(ret_V_4_fu_667_p2);

assign sext_ln1192_2_fu_280_p1 = $signed(rhs_V_fu_273_p3);

assign sext_ln1192_3_fu_317_p1 = $signed(rhs_V_1_fu_310_p3);

assign sext_ln1192_6_fu_377_p1 = $signed(r_V_2_fu_370_p3);

assign sext_ln1192_7_fu_475_p1 = tmp_4_reg_760;

assign sext_ln1192_8_fu_498_p1 = r_V_7_fu_491_p3;

assign sext_ln1192_fu_245_p1 = tmp_1_reg_729;

assign sext_ln703_fu_652_p1 = rhs_V_8_fu_478_p3;

assign sext_ln728_fu_663_p1 = $signed(rhs_V_7_fu_656_p3);

assign shl_ln1192_1_fu_296_p3 = {{mul_ln1192_1_fu_290_p2}, {3'd0}};

assign shl_ln1192_2_fu_347_p3 = {{mul_ln1192_2_reg_750}, {3'd0}};

assign shl_ln1192_3_fu_354_p3 = {{trunc_ln1192_reg_755}, {6'd0}};

assign shl_ln1192_4_fu_387_p3 = {{mul_ln1192_3_fu_381_p2}, {6'd0}};

assign shl_ln1192_5_fu_413_p3 = {{mul_ln1192_4_fu_407_p2}, {6'd0}};

assign shl_ln1192_6_fu_512_p3 = {{mul_ln1192_5_fu_506_p2}, {3'd0}};

assign shl_ln1192_7_fu_526_p3 = {{tmp_s_reg_767}, {4'd0}};

assign shl_ln1192_8_fu_539_p3 = {{sub_ln1192_7_fu_533_p2}, {6'd0}};

assign shl_ln1192_9_fu_576_p3 = {{mul_ln1192_6_fu_570_p2}, {3'd0}};

assign shl_ln1192_s_fu_683_p3 = {{mul_ln1192_7_fu_677_p2}, {6'd0}};

assign shl_ln1_fu_427_p3 = {{p_Val2_4_reg_735}, {2'd0}};

assign shl_ln_fu_265_p3 = {{mul_ln1192_fu_259_p2}, {3'd0}};

assign sub_ln1192_10_fu_629_p2 = ($signed(sub_ln1192_9_fu_612_p2) - $signed(sext_ln1192_12_fu_625_p1));

assign sub_ln1192_11_fu_691_p2 = ($signed(sext_ln1192_13_fu_673_p1) - $signed(shl_ln1192_s_fu_683_p3));

assign sub_ln1192_1_fu_321_p2 = ($signed(add_ln1192_fu_304_p2) - $signed(sext_ln1192_3_fu_317_p1));

assign sub_ln1192_2_fu_361_p2 = (shl_ln1192_3_fu_354_p3 - shl_ln1192_2_fu_347_p3);

assign sub_ln1192_3_fu_421_p2 = (add_ln1192_2_fu_395_p2 - shl_ln1192_5_fu_413_p3);

assign sub_ln1192_4_fu_452_p2 = (sub_ln1192_3_fu_421_p2 - rhs_V_2_fu_444_p3);

assign sub_ln1192_5_fu_485_p2 = ($signed(18'd0) - $signed(rhs_V_8_fu_478_p3));

assign sub_ln1192_6_fu_520_p2 = (sub_ln1192_5_fu_485_p2 - shl_ln1192_6_fu_512_p3);

assign sub_ln1192_7_fu_533_p2 = ($signed(shl_ln1192_7_fu_526_p3) - $signed(sext_ln1192_8_fu_498_p1));

assign sub_ln1192_8_fu_595_p2 = ($signed(sext_ln1192_10_fu_591_p1) - $signed(shl_ln1192_9_fu_576_p3));

assign sub_ln1192_9_fu_612_p2 = ($signed(sub_ln1192_8_fu_595_p2) - $signed(sext_ln1192_11_fu_608_p1));

assign sub_ln1192_fu_284_p2 = ($signed(sext_ln1192_2_fu_280_p1) - $signed(shl_ln_fu_265_p3));

assign tmp_fu_167_p4 = {{x_V_in_sig[143:135]}};

assign trunc_ln1192_fu_221_p1 = r_V_5_fu_215_p2[14:0];

assign y_0_V = {{ret_V_fu_327_p2[17:9]}};

assign y_1_V = {{ret_V_1_fu_458_p2[20:12]}};

assign y_2_V = {{ret_V_2_fu_553_p2[17:9]}};

assign y_3_V = {{ret_V_3_fu_635_p2[17:9]}};

assign y_4_V = {{ret_V_5_fu_697_p2[20:12]}};

endmodule //myproject
