-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (143 downto 0);
    y_0_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.313687,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=10,HLS_SYN_FF=488,HLS_SYN_LUT=1381,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv144_lc_1 : STD_LOGIC_VECTOR (143 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv25_1F90000 : STD_LOGIC_VECTOR (24 downto 0) := "1111110010000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv21_1F5000 : STD_LOGIC_VECTOR (20 downto 0) := "111110101000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv25_1F30000 : STD_LOGIC_VECTOR (24 downto 0) := "1111100110000000000000000";
    constant ap_const_lv13_1D : STD_LOGIC_VECTOR (12 downto 0) := "0000000011101";
    constant ap_const_lv21_1FB000 : STD_LOGIC_VECTOR (20 downto 0) := "111111011000000000000";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv21_1F8000 : STD_LOGIC_VECTOR (20 downto 0) := "111111000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_preg : STD_LOGIC_VECTOR (143 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (143 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_1_fu_175_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_reg_996 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_fu_189_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_reg_1002 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_1_fu_203_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_1_reg_1008 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1192_fu_221_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1192_reg_1013 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_5_fu_225_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_5_reg_1020 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_925_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln1192_reg_1026 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln1192_fu_271_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln1192_reg_1031 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_933_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1192_2_reg_1036 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_14_fu_313_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_14_reg_1041 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_4_fu_941_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1192_4_reg_1046 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1192_5_fu_947_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1192_5_reg_1051 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln1192_1_fu_349_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln1192_1_reg_1056 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1192_6_fu_953_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1192_6_reg_1061 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1192_13_fu_379_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1192_13_reg_1066 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1192_7_fu_959_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1192_7_reg_1071 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_fu_383_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_reg_1076 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_965_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1192_6_reg_1082 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1118_11_fu_415_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_11_reg_1087 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_973_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1192_11_reg_1093 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_15_fu_435_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_15_reg_1098 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1192_13_fu_981_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1192_13_reg_1104 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln708_4_reg_1109 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln1117_fu_171_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_fu_207_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_fu_207_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_fu_207_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_fu_235_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1192_1_fu_243_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln_fu_213_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_13_fu_257_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1117_fu_185_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_13_fu_257_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_13_fu_257_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_18_fu_275_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_15_fu_325_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_15_fu_325_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_15_fu_325_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_4_fu_335_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_4_fu_291_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_4_fu_335_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_4_fu_335_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_fu_303_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_5_fu_353_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1118_7_fu_361_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_3_fu_287_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_16_fu_369_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_8_fu_397_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_8_fu_397_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_8_fu_397_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_19_fu_423_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1118_2_fu_283_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln700_fu_253_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_fu_439_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_20_fu_447_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal rhs_V_8_fu_457_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln703_fu_453_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln728_fu_465_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_987_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_4_fu_469_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1192_15_fu_475_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln1192_13_fu_482_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal ret_V_5_fu_488_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1192_1_fu_504_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln1192_1_fu_511_p2 : STD_LOGIC_VECTOR (20 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln1192_1_fu_511_p2 : signal is "no";
    signal shl_ln1192_2_fu_516_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal rhs_V_1_fu_529_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1192_1_fu_523_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1192_5_fu_536_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_2_fu_546_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_3_fu_557_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_3_fu_557_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_3_fu_557_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1192_2_fu_540_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1192_3_fu_562_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal rhs_V_2_fu_576_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1192_3_fu_570_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1192_7_fu_583_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1192_2_fu_587_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ret_V_fu_593_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1192_5_fu_620_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1192_4_fu_613_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln1192_3_fu_627_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1192_6_fu_633_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln1192_5_fu_640_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1192_7_fu_646_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln1192_6_fu_653_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1192_8_fu_659_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1118_6_fu_672_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_9_fu_679_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1118_6_fu_610_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_17_fu_683_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1192_4_fu_666_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal rhs_V_3_fu_689_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln1192_5_fu_697_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal ret_V_1_fu_703_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_9_fu_720_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_9_fu_720_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_9_fu_720_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln1192_9_fu_724_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1192_10_fu_737_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_10_fu_737_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_10_fu_737_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1192_7_fu_732_p2 : STD_LOGIC_VECTOR (20 downto 0);
    attribute use_dsp48 of sub_ln1192_7_fu_732_p2 : signal is "no";
    signal shl_ln1192_s_fu_741_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln1192_8_fu_749_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1192_10_fu_758_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1192_12_fu_771_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_12_fu_771_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1192_8_fu_765_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1192_11_fu_777_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln1192_9_fu_785_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ret_V_2_fu_791_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1192_12_fu_808_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1192_14_fu_821_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_14_fu_821_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_14_fu_821_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1192_9_fu_815_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1192_13_fu_825_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1192_15_fu_839_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_15_fu_839_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_15_fu_839_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1192_10_fu_833_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1192_14_fu_843_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal rhs_V_5_fu_857_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln1192_11_fu_851_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1192_16_fu_864_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal rhs_V_6_fu_874_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln1192_12_fu_868_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1192_17_fu_881_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal rhs_V_7_fu_891_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln1192_11_fu_885_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1192_18_fu_898_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1192_12_fu_902_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ret_V_3_fu_908_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_925_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_933_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_933_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1192_5_fu_947_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1192_11_fu_345_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1192_6_fu_953_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_6_fu_953_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1118_8_fu_365_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_965_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_965_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_973_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_12_fu_419_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_973_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1118_13_fu_431_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_973_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_13_fu_981_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_987_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_987_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_987_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mac_muladd_9s_18s_21ns_21_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component myproject_am_addmul_9s_11s_9s_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component myproject_mul_mul_9s_19s_21_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component myproject_mul_mul_9s_18s_21_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component myproject_mul_mul_9s_11s_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component myproject_mul_mul_9s_12s_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component myproject_mac_mul_sub_9s_18s_21ns_21_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component myproject_am_submul_11s_9s_9s_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;



begin
    myproject_mac_muladd_9s_18s_21ns_21_1_1_U1 : component myproject_mac_muladd_9s_18s_21ns_21_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 18,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => tmp_2_fu_189_p4,
        din1 => r_V_13_fu_257_p2,
        din2 => grp_fu_925_p2,
        dout => grp_fu_925_p3);

    myproject_am_addmul_9s_11s_9s_17_1_1_U2 : component myproject_am_addmul_9s_11s_9s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        din2_WIDTH => 9,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_933_p0,
        din1 => grp_fu_933_p1,
        din2 => tmp_2_fu_189_p4,
        dout => grp_fu_933_p3);

    myproject_mul_mul_9s_19s_21_1_1_U3 : component myproject_mul_mul_9s_19s_21_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 19,
        dout_WIDTH => 21)
    port map (
        din0 => tmp_1_fu_175_p4,
        din1 => r_V_15_fu_325_p2,
        dout => mul_ln1192_4_fu_941_p2);

    myproject_mul_mul_9s_18s_21_1_1_U4 : component myproject_mul_mul_9s_18s_21_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 18,
        dout_WIDTH => 21)
    port map (
        din0 => mul_ln1192_5_fu_947_p0,
        din1 => r_V_4_fu_335_p2,
        dout => mul_ln1192_5_fu_947_p2);

    myproject_mul_mul_9s_11s_17_1_1_U5 : component myproject_mul_mul_9s_11s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        din0 => mul_ln1192_6_fu_953_p0,
        din1 => mul_ln1192_6_fu_953_p1,
        dout => mul_ln1192_6_fu_953_p2);

    myproject_mul_mul_9s_12s_17_1_1_U6 : component myproject_mul_mul_9s_12s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 12,
        dout_WIDTH => 17)
    port map (
        din0 => tmp_4_fu_303_p4,
        din1 => r_V_16_fu_369_p2,
        dout => mul_ln1192_7_fu_959_p2);

    myproject_mac_mul_sub_9s_18s_21ns_21_1_1_U7 : component myproject_mac_mul_sub_9s_18s_21ns_21_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 18,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_965_p0,
        din1 => r_V_8_fu_397_p2,
        din2 => grp_fu_965_p2,
        dout => grp_fu_965_p3);

    myproject_am_addmul_9s_11s_9s_17_1_1_U8 : component myproject_am_addmul_9s_11s_9s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        din2_WIDTH => 9,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_973_p0,
        din1 => grp_fu_973_p1,
        din2 => grp_fu_973_p2,
        dout => grp_fu_973_p3);

    myproject_mul_mul_9s_11s_17_1_1_U9 : component myproject_mul_mul_9s_11s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        din0 => p_Val2_5_fu_225_p4,
        din1 => mul_ln1192_13_fu_981_p1,
        dout => mul_ln1192_13_fu_981_p2);

    myproject_am_submul_11s_9s_9s_17_1_1_U10 : component myproject_am_submul_11s_9s_9s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_987_p0,
        din1 => grp_fu_987_p1,
        din2 => grp_fu_987_p2,
        dout => grp_fu_987_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv144_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1192_reg_1026 <= grp_fu_925_p3;
                mul_ln1192_11_reg_1093 <= grp_fu_973_p3;
                mul_ln1192_2_reg_1036 <= grp_fu_933_p3;
                sub_ln1192_6_reg_1082 <= grp_fu_965_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln1192_13_reg_1104 <= mul_ln1192_13_fu_981_p2;
                mul_ln1192_4_reg_1046 <= mul_ln1192_4_fu_941_p2;
                mul_ln1192_5_reg_1051 <= mul_ln1192_5_fu_947_p2;
                mul_ln1192_6_reg_1061 <= mul_ln1192_6_fu_953_p2;
                mul_ln1192_7_reg_1071 <= mul_ln1192_7_fu_959_p2;
                p_Val2_5_reg_1020 <= x_V_in_sig(134 downto 126);
                    r_V_14_reg_1041(9 downto 1) <= r_V_14_fu_313_p3(9 downto 1);
                sext_ln1118_11_reg_1087 <= sext_ln1118_11_fu_415_p1;
                sext_ln1118_15_reg_1098 <= sext_ln1118_15_fu_435_p1;
                sext_ln1118_1_reg_1008 <= sext_ln1118_1_fu_203_p1;
                sext_ln1192_13_reg_1066 <= sext_ln1192_13_fu_379_p1;
                sext_ln1192_reg_1013 <= sext_ln1192_fu_221_p1;
                tmp_1_reg_996 <= x_V_in_sig(143 downto 135);
                tmp_2_reg_1002 <= x_V_in_sig(26 downto 18);
                tmp_5_reg_1076 <= x_V_in_sig(35 downto 27);
                    trunc_ln1192_1_reg_1056(16 downto 1) <= trunc_ln1192_1_fu_349_p1(16 downto 1);
                trunc_ln1192_reg_1031 <= trunc_ln1192_fu_271_p1;
                trunc_ln708_4_reg_1109 <= ret_V_5_fu_488_p2(24 downto 16);
            end if;
        end if;
    end process;
    r_V_14_reg_1041(0) <= '0';
    trunc_ln1192_1_reg_1056(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1192_11_fu_851_p2 <= std_logic_vector(unsigned(sub_ln1192_10_fu_833_p2) + unsigned(shl_ln1192_14_fu_843_p3));
    add_ln1192_12_fu_868_p2 <= std_logic_vector(unsigned(add_ln1192_11_fu_851_p2) + unsigned(sext_ln1192_16_fu_864_p1));
    add_ln1192_1_fu_511_p2 <= std_logic_vector(signed(add_ln1192_reg_1026) + signed(shl_ln1192_1_fu_504_p3));
    add_ln1192_2_fu_540_p2 <= std_logic_vector(unsigned(sub_ln1192_1_fu_523_p2) + unsigned(sext_ln1192_5_fu_536_p1));
    add_ln1192_3_fu_570_p2 <= std_logic_vector(unsigned(add_ln1192_2_fu_540_p2) + unsigned(shl_ln1192_3_fu_562_p3));
    add_ln1192_5_fu_640_p2 <= std_logic_vector(unsigned(sub_ln1192_3_fu_627_p2) + unsigned(shl_ln1192_6_fu_633_p3));
    add_ln1192_6_fu_653_p2 <= std_logic_vector(unsigned(add_ln1192_5_fu_640_p2) + unsigned(shl_ln1192_7_fu_646_p3));
    add_ln1192_8_fu_749_p2 <= std_logic_vector(unsigned(sub_ln1192_7_fu_732_p2) + unsigned(shl_ln1192_s_fu_741_p3));
    add_ln1192_9_fu_785_p2 <= std_logic_vector(unsigned(sub_ln1192_8_fu_765_p2) + unsigned(shl_ln1192_11_fu_777_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_925_p2 <= std_logic_vector(signed(sext_ln1192_1_fu_243_p1) - signed(shl_ln_fu_213_p3));
    grp_fu_933_p0 <= sext_ln700_fu_253_p1(9 - 1 downto 0);
    grp_fu_933_p1 <= sext_ln1118_2_fu_283_p1(11 - 1 downto 0);
    grp_fu_965_p0 <= sext_ln1192_11_fu_345_p1(9 - 1 downto 0);
    grp_fu_965_p2 <= (p_Val2_5_fu_225_p4 & ap_const_lv12_0);
    grp_fu_973_p0 <= sext_ln1118_12_fu_419_p1(9 - 1 downto 0);
    grp_fu_973_p1 <= sext_ln1118_13_fu_431_p1(11 - 1 downto 0);
    grp_fu_973_p2 <= sext_ln1118_11_fu_415_p1(9 - 1 downto 0);
    grp_fu_987_p0 <= sext_ln1118_13_fu_431_p1(11 - 1 downto 0);
    grp_fu_987_p1 <= sext_ln1118_12_fu_419_p1(9 - 1 downto 0);
    grp_fu_987_p2 <= sext_ln1118_11_fu_415_p1(9 - 1 downto 0);
    lhs_V_fu_439_p3 <= (r_V_16_fu_369_p2 & ap_const_lv12_0);
    mul_ln1192_10_fu_737_p0 <= sext_ln1192_reg_1013(9 - 1 downto 0);
    mul_ln1192_10_fu_737_p1 <= sext_ln1118_11_reg_1087(9 - 1 downto 0);
    mul_ln1192_10_fu_737_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_10_fu_737_p0) * signed(mul_ln1192_10_fu_737_p1))), 17));
    mul_ln1192_12_fu_771_p1 <= tmp_5_reg_1076;
    mul_ln1192_12_fu_771_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv13_1D) * signed(mul_ln1192_12_fu_771_p1))), 13));
    mul_ln1192_13_fu_981_p1 <= sext_ln1118_8_fu_365_p1(11 - 1 downto 0);
    mul_ln1192_14_fu_821_p0 <= sext_ln1192_reg_1013(9 - 1 downto 0);
    mul_ln1192_14_fu_821_p1 <= sext_ln1118_15_reg_1098(9 - 1 downto 0);
    mul_ln1192_14_fu_821_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_14_fu_821_p0) * signed(mul_ln1192_14_fu_821_p1))), 17));
    mul_ln1192_15_fu_839_p0 <= sext_ln1192_13_reg_1066(9 - 1 downto 0);
    mul_ln1192_15_fu_839_p1 <= sext_ln1118_15_reg_1098(9 - 1 downto 0);
    mul_ln1192_15_fu_839_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_15_fu_839_p0) * signed(mul_ln1192_15_fu_839_p1))), 17));
    mul_ln1192_3_fu_557_p0 <= sext_ln1192_reg_1013(9 - 1 downto 0);
    mul_ln1192_3_fu_557_p1 <= r_V_2_fu_546_p3;
    mul_ln1192_3_fu_557_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_3_fu_557_p0) * signed(mul_ln1192_3_fu_557_p1))), 17));
    mul_ln1192_5_fu_947_p0 <= sext_ln1192_11_fu_345_p1(9 - 1 downto 0);
    mul_ln1192_6_fu_953_p0 <= sext_ln1118_1_fu_203_p1(9 - 1 downto 0);
    mul_ln1192_6_fu_953_p1 <= sext_ln1118_8_fu_365_p1(11 - 1 downto 0);
    mul_ln1192_9_fu_720_p0 <= sext_ln1118_1_reg_1008(9 - 1 downto 0);
    mul_ln1192_9_fu_720_p1 <= sext_ln1118_11_reg_1087(9 - 1 downto 0);
    mul_ln1192_9_fu_720_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_9_fu_720_p0) * signed(mul_ln1192_9_fu_720_p1))), 17));
    mul_ln1192_fu_207_p0 <= sext_ln1118_1_fu_203_p1(9 - 1 downto 0);
    mul_ln1192_fu_207_p1 <= trunc_ln1117_fu_171_p1;
    mul_ln1192_fu_207_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_fu_207_p0) * signed(mul_ln1192_fu_207_p1))), 17));
    p_Val2_5_fu_225_p4 <= x_V_in_sig(134 downto 126);
    r_V_13_fu_257_p0 <= sext_ln1117_fu_185_p1(9 - 1 downto 0);
    r_V_13_fu_257_p1 <= sext_ln1117_fu_185_p1(9 - 1 downto 0);
    r_V_13_fu_257_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_13_fu_257_p0) * signed(r_V_13_fu_257_p1))), 18));
    r_V_14_fu_313_p3 <= (p_Val2_5_fu_225_p4 & ap_const_lv1_0);
    r_V_15_fu_325_p0 <= p_Val2_5_fu_225_p4;
    r_V_15_fu_325_p1 <= r_V_14_fu_313_p3;
    r_V_15_fu_325_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_15_fu_325_p0) * signed(r_V_15_fu_325_p1))), 19));
    r_V_16_fu_369_p2 <= std_logic_vector(signed(sext_ln1118_7_fu_361_p1) - signed(sext_ln1118_3_fu_287_p1));
    r_V_17_fu_683_p2 <= std_logic_vector(signed(sext_ln1118_9_fu_679_p1) - signed(sext_ln1118_6_fu_610_p1));
    r_V_18_fu_275_p3 <= (tmp_1_fu_175_p4 & ap_const_lv2_0);
    r_V_19_fu_423_p3 <= (tmp_5_fu_383_p4 & ap_const_lv2_0);
    r_V_20_fu_447_p2 <= std_logic_vector(signed(sext_ln1118_2_fu_283_p1) - signed(sext_ln700_fu_253_p1));
    r_V_2_fu_546_p3 <= (tmp_2_reg_1002 & ap_const_lv1_0);
    r_V_4_fu_335_p0 <= sext_ln1118_4_fu_291_p1(9 - 1 downto 0);
    r_V_4_fu_335_p1 <= sext_ln1118_4_fu_291_p1(9 - 1 downto 0);
    r_V_4_fu_335_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_4_fu_335_p0) * signed(r_V_4_fu_335_p1))), 18));
    r_V_5_fu_353_p3 <= (p_Val2_5_fu_225_p4 & ap_const_lv2_0);
    r_V_8_fu_397_p0 <= tmp_5_fu_383_p4;
    r_V_8_fu_397_p1 <= sext_ln1118_4_fu_291_p1(9 - 1 downto 0);
    r_V_8_fu_397_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_8_fu_397_p0) * signed(r_V_8_fu_397_p1))), 18));
    ret_V_1_fu_703_p2 <= std_logic_vector(signed(ap_const_lv25_1F30000) + signed(sub_ln1192_5_fu_697_p2));
    ret_V_2_fu_791_p2 <= std_logic_vector(signed(ap_const_lv21_1FB000) + signed(add_ln1192_9_fu_785_p2));
    ret_V_3_fu_908_p2 <= std_logic_vector(signed(ap_const_lv21_1F8000) + signed(sub_ln1192_12_fu_902_p2));
    ret_V_4_fu_469_p2 <= std_logic_vector(signed(sext_ln703_fu_453_p1) - signed(sext_ln728_fu_465_p1));
    ret_V_5_fu_488_p2 <= std_logic_vector(signed(ap_const_lv25_1F90000) + signed(sub_ln1192_13_fu_482_p2));
    ret_V_fu_593_p2 <= std_logic_vector(signed(ap_const_lv21_1F5000) + signed(sub_ln1192_2_fu_587_p2));
    rhs_V_1_fu_529_p3 <= (tmp_1_reg_996 & ap_const_lv11_0);
    rhs_V_2_fu_576_p3 <= (tmp_2_reg_1002 & ap_const_lv11_0);
    rhs_V_3_fu_689_p3 <= (r_V_17_fu_683_p2 & ap_const_lv12_0);
    rhs_V_5_fu_857_p3 <= (p_Val2_5_reg_1020 & ap_const_lv9_0);
    rhs_V_6_fu_874_p3 <= (tmp_1_reg_996 & ap_const_lv10_0);
    rhs_V_7_fu_891_p3 <= (tmp_5_reg_1076 & ap_const_lv10_0);
    rhs_V_8_fu_457_p3 <= (r_V_20_fu_447_p2 & ap_const_lv12_0);
    rhs_V_fu_235_p3 <= (p_Val2_5_fu_225_p4 & ap_const_lv8_0);
        sext_ln1117_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_175_p4),18));

        sext_ln1118_11_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_383_p4),17));

        sext_ln1118_12_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_383_p4),12));

        sext_ln1118_13_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_19_fu_423_p3),12));

        sext_ln1118_15_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_fu_225_p4),17));

        sext_ln1118_1_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_175_p4),17));

        sext_ln1118_2_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_18_fu_275_p3),12));

        sext_ln1118_3_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_fu_225_p4),12));

        sext_ln1118_4_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_fu_225_p4),18));

        sext_ln1118_6_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_14_reg_1041),13));

        sext_ln1118_7_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_fu_353_p3),12));

        sext_ln1118_8_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_fu_353_p3),17));

        sext_ln1118_9_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_6_fu_672_p3),13));

        sext_ln1192_11_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_303_p4),21));

        sext_ln1192_13_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_303_p4),17));

        sext_ln1192_16_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_5_fu_857_p3),21));

        sext_ln1192_17_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_6_fu_874_p3),21));

        sext_ln1192_18_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_7_fu_891_p3),21));

        sext_ln1192_1_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_235_p3),21));

        sext_ln1192_5_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1_fu_529_p3),21));

        sext_ln1192_7_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_2_fu_576_p3),21));

        sext_ln1192_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_189_p4),17));

        sext_ln700_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_175_p4),12));

        sext_ln703_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_439_p3),25));

        sext_ln728_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_8_fu_457_p3),25));

    shl_ln1118_6_fu_672_p3 <= (p_Val2_5_reg_1020 & ap_const_lv3_0);
    shl_ln1192_10_fu_758_p3 <= (mul_ln1192_11_reg_1093 & ap_const_lv4_0);
    shl_ln1192_11_fu_777_p3 <= (mul_ln1192_12_fu_771_p2 & ap_const_lv8_0);
    shl_ln1192_12_fu_808_p3 <= (mul_ln1192_13_reg_1104 & ap_const_lv4_0);
    shl_ln1192_13_fu_825_p3 <= (mul_ln1192_14_fu_821_p2 & ap_const_lv4_0);
    shl_ln1192_14_fu_843_p3 <= (mul_ln1192_15_fu_839_p2 & ap_const_lv4_0);
    shl_ln1192_15_fu_475_p3 <= (grp_fu_987_p3 & ap_const_lv8_0);
    shl_ln1192_1_fu_504_p3 <= (trunc_ln1192_reg_1031 & ap_const_lv4_0);
    shl_ln1192_2_fu_516_p3 <= (mul_ln1192_2_reg_1036 & ap_const_lv4_0);
    shl_ln1192_3_fu_562_p3 <= (mul_ln1192_3_fu_557_p2 & ap_const_lv4_0);
    shl_ln1192_4_fu_613_p3 <= (mul_ln1192_4_reg_1046 & ap_const_lv4_0);
    shl_ln1192_5_fu_620_p3 <= (mul_ln1192_5_reg_1051 & ap_const_lv4_0);
    shl_ln1192_6_fu_633_p3 <= (trunc_ln1192_1_reg_1056 & ap_const_lv8_0);
    shl_ln1192_7_fu_646_p3 <= (mul_ln1192_6_reg_1061 & ap_const_lv8_0);
    shl_ln1192_8_fu_659_p3 <= (mul_ln1192_7_reg_1071 & ap_const_lv8_0);
    shl_ln1192_9_fu_724_p3 <= (mul_ln1192_9_fu_720_p2 & ap_const_lv4_0);
    shl_ln1192_s_fu_741_p3 <= (mul_ln1192_10_fu_737_p2 & ap_const_lv4_0);
    shl_ln_fu_213_p3 <= (mul_ln1192_fu_207_p2 & ap_const_lv4_0);
    sub_ln1192_10_fu_833_p2 <= std_logic_vector(unsigned(sub_ln1192_9_fu_815_p2) - unsigned(shl_ln1192_13_fu_825_p3));
    sub_ln1192_11_fu_885_p2 <= std_logic_vector(unsigned(add_ln1192_12_fu_868_p2) - unsigned(sext_ln1192_17_fu_881_p1));
    sub_ln1192_12_fu_902_p2 <= std_logic_vector(unsigned(sub_ln1192_11_fu_885_p2) - unsigned(sext_ln1192_18_fu_898_p1));
    sub_ln1192_13_fu_482_p2 <= std_logic_vector(unsigned(ret_V_4_fu_469_p2) - unsigned(shl_ln1192_15_fu_475_p3));
    sub_ln1192_1_fu_523_p2 <= std_logic_vector(unsigned(add_ln1192_1_fu_511_p2) - unsigned(shl_ln1192_2_fu_516_p3));
    sub_ln1192_2_fu_587_p2 <= std_logic_vector(unsigned(add_ln1192_3_fu_570_p2) - unsigned(sext_ln1192_7_fu_583_p1));
    sub_ln1192_3_fu_627_p2 <= std_logic_vector(unsigned(shl_ln1192_5_fu_620_p3) - unsigned(shl_ln1192_4_fu_613_p3));
    sub_ln1192_4_fu_666_p2 <= std_logic_vector(unsigned(add_ln1192_6_fu_653_p2) - unsigned(shl_ln1192_8_fu_659_p3));
    sub_ln1192_5_fu_697_p2 <= std_logic_vector(unsigned(sub_ln1192_4_fu_666_p2) - unsigned(rhs_V_3_fu_689_p3));
    sub_ln1192_7_fu_732_p2 <= std_logic_vector(signed(sub_ln1192_6_reg_1082) - signed(shl_ln1192_9_fu_724_p3));
    sub_ln1192_8_fu_765_p2 <= std_logic_vector(unsigned(add_ln1192_8_fu_749_p2) - unsigned(shl_ln1192_10_fu_758_p3));
    sub_ln1192_9_fu_815_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1192_12_fu_808_p3));
    tmp_1_fu_175_p4 <= x_V_in_sig(143 downto 135);
    tmp_2_fu_189_p4 <= x_V_in_sig(26 downto 18);
    tmp_4_fu_303_p4 <= x_V_in_sig(44 downto 36);
    tmp_5_fu_383_p4 <= x_V_in_sig(35 downto 27);
    trunc_ln1117_fu_171_p1 <= x_V_in_sig(9 - 1 downto 0);
    trunc_ln1192_1_fu_349_p1 <= r_V_15_fu_325_p2(17 - 1 downto 0);
    trunc_ln1192_fu_271_p1 <= r_V_13_fu_257_p2(17 - 1 downto 0);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, x_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V_ap_vld, x_V, x_V_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

    y_0_V <= ret_V_fu_593_p2(20 downto 12);

    y_0_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_V <= ret_V_1_fu_703_p2(24 downto 16);

    y_1_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= ret_V_2_fu_791_p2(20 downto 12);

    y_2_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_3_V <= ret_V_3_fu_908_p2(20 downto 12);

    y_3_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= trunc_ln708_4_reg_1109;

    y_4_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
