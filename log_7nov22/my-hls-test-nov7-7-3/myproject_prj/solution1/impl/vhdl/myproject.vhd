-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (111 downto 0);
    y_0_V : OUT STD_LOGIC_VECTOR (6 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (6 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (6 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (6 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (6 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.319313,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=7,HLS_SYN_FF=365,HLS_SYN_LUT=1290,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv112_0 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv19_78000 : STD_LOGIC_VECTOR (18 downto 0) := "1111000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv23_790000 : STD_LOGIC_VECTOR (22 downto 0) := "11110010000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv19_75000 : STD_LOGIC_VECTOR (18 downto 0) := "1110101000000000000";
    constant ap_const_lv23_730000 : STD_LOGIC_VECTOR (22 downto 0) := "11100110000000000000000";
    constant ap_const_lv11_1D : STD_LOGIC_VECTOR (10 downto 0) := "00000011101";
    constant ap_const_lv19_7B000 : STD_LOGIC_VECTOR (18 downto 0) := "1111011000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_preg : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (111 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_1_fu_177_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_reg_1027 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_191_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_reg_1033 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln700_1_fu_223_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln700_1_reg_1039 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_20_fu_259_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_20_reg_1044 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_974_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln1192_reg_1049 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_982_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1192_1_reg_1054 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_23_fu_331_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_23_reg_1059 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1192_2_fu_990_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_2_reg_1064 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln728_fu_996_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln728_reg_1069 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1118_6_fu_367_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1118_6_reg_1074 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1192_4_fu_389_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1192_4_reg_1079 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_25_fu_407_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_25_reg_1084 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_413_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_reg_1089 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1002_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln1192_5_reg_1094 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_26_fu_445_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_26_reg_1099 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_27_fu_451_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_27_reg_1104 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1010_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1192_6_reg_1109 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln708_3_reg_1114 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln708_4_reg_1119 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln1117_fu_173_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_19_fu_205_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1117_fu_187_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_19_fu_205_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_19_fu_205_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_8_fu_227_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal rhs_V_1_fu_237_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln728_fu_245_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_fu_211_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_20_fu_259_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_20_fu_259_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_V_fu_249_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_30_fu_277_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_22_fu_315_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_23_fu_331_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1118_3_fu_297_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_23_fu_331_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_6_fu_341_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1118_2_fu_293_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_6_fu_341_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_6_fu_341_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_fu_305_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_7_fu_355_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_5_fu_363_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_1_fu_289_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_24_fu_371_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_4_fu_389_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1192_4_fu_389_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln1118_6_fu_395_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_9_fu_403_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1118_4_fu_323_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_10_fu_427_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1118_10_fu_423_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_10_fu_427_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_10_fu_427_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_26_fu_445_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_26_fu_445_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_27_fu_451_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln700_fu_219_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_27_fu_451_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_31_fu_461_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_8_fu_477_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1192_8_fu_477_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_8_fu_477_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1192_6_fu_483_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_28_fu_497_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_28_fu_497_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_28_fu_497_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal rhs_V_12_fu_503_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1192_8_fu_491_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1192_15_fu_511_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_29_fu_521_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_29_fu_521_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_29_fu_521_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal rhs_V_13_fu_527_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1192_9_fu_515_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1192_16_fu_535_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_14_fu_545_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1192_11_fu_539_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1192_17_fu_553_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_15_fu_563_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1192_12_fu_557_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1192_18_fu_571_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_16_fu_581_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1192_10_fu_575_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1192_19_fu_589_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln1192_11_fu_593_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_4_fu_599_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1118_fu_285_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln700_2_fu_255_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_V_fu_615_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_32_fu_623_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_17_fu_633_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln703_fu_629_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln728_3_fu_641_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1018_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_5_fu_645_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1192_7_fu_651_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1192_12_fu_658_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_6_fu_664_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_2_fu_680_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1192_3_fu_687_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln1192_1_fu_691_p2 : STD_LOGIC_VECTOR (18 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln1192_1_fu_691_p2 : signal is "no";
    signal shl_ln_fu_696_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_3_fu_709_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1192_fu_703_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1192_5_fu_716_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_2_fu_726_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_21_fu_737_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_21_fu_737_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_21_fu_737_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1192_2_fu_720_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_4_fu_742_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_5_fu_756_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln1192_3_fu_750_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1192_6_fu_763_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln1192_1_fu_767_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_1_fu_773_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_6_fu_797_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1192_1_fu_790_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1192_2_fu_804_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_7_fu_810_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1192_3_fu_826_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1192_3_fu_826_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_3_fu_826_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1192_5_fu_817_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1192_2_fu_831_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1192_6_fu_839_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1192_3_fu_845_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1192_3_fu_852_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_8_fu_858_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1192_4_fu_865_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_2_fu_871_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_10_fu_888_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1192_12_fu_895_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_11_fu_904_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1192_6_fu_899_p2 : STD_LOGIC_VECTOR (18 downto 0);
    attribute use_dsp48 of sub_ln1192_6_fu_899_p2 : signal is "no";
    signal sext_ln1192_13_fu_911_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln1192_8_fu_915_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1192_4_fu_924_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_7_fu_937_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1192_7_fu_937_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1192_7_fu_931_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1192_5_fu_943_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln1192_9_fu_951_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_3_fu_957_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_982_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_982_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln728_fu_996_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln728_2_fu_351_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1002_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1002_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1010_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1118_11_fu_457_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1010_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_12_fu_469_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1010_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1118_14_fu_473_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1018_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1018_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1018_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mac_muladd_7s_14s_18s_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component myproject_am_addmul_7s_9s_7s_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component myproject_mul_mul_7s_15s_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component myproject_mul_mul_7s_14s_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component myproject_mac_mul_sub_7s_14s_19ns_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component myproject_am_submul_9s_7s_7s_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    myproject_mac_muladd_7s_14s_18s_19_1_1_U1 : component myproject_mac_muladd_7s_14s_18s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 14,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        din0 => tmp_2_fu_191_p4,
        din1 => r_V_20_fu_259_p2,
        din2 => ret_V_fu_249_p2,
        dout => grp_fu_974_p3);

    myproject_am_addmul_7s_9s_7s_15_1_1_U2 : component myproject_am_addmul_7s_9s_7s_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 9,
        din2_WIDTH => 7,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_982_p0,
        din1 => grp_fu_982_p1,
        din2 => tmp_2_fu_191_p4,
        dout => grp_fu_982_p3);

    myproject_mul_mul_7s_15s_19_1_1_U3 : component myproject_mul_mul_7s_15s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 15,
        dout_WIDTH => 19)
    port map (
        din0 => tmp_1_fu_177_p4,
        din1 => r_V_23_fu_331_p2,
        dout => mul_ln1192_2_fu_990_p2);

    myproject_mul_mul_7s_14s_19_1_1_U4 : component myproject_mul_mul_7s_14s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 14,
        dout_WIDTH => 19)
    port map (
        din0 => mul_ln728_fu_996_p0,
        din1 => r_V_6_fu_341_p2,
        dout => mul_ln728_fu_996_p2);

    myproject_mac_mul_sub_7s_14s_19ns_19_1_1_U5 : component myproject_mac_mul_sub_7s_14s_19ns_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 14,
        din2_WIDTH => 19,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_1002_p0,
        din1 => r_V_10_fu_427_p2,
        din2 => grp_fu_1002_p2,
        dout => grp_fu_1002_p3);

    myproject_am_addmul_7s_9s_7s_15_1_1_U6 : component myproject_am_addmul_7s_9s_7s_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 9,
        din2_WIDTH => 7,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_1010_p0,
        din1 => grp_fu_1010_p1,
        din2 => grp_fu_1010_p2,
        dout => grp_fu_1010_p3);

    myproject_am_submul_9s_7s_7s_15_1_1_U7 : component myproject_am_submul_9s_7s_7s_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_1018_p0,
        din1 => grp_fu_1018_p1,
        din2 => grp_fu_1018_p2,
        dout => grp_fu_1018_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv112_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1192_reg_1049 <= grp_fu_974_p3;
                mul_ln1192_1_reg_1054 <= grp_fu_982_p3;
                mul_ln1192_6_reg_1109 <= grp_fu_1010_p3;
                sub_ln1192_5_reg_1094 <= grp_fu_1002_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln1192_2_reg_1064 <= mul_ln1192_2_fu_990_p2;
                mul_ln1192_4_reg_1079 <= mul_ln1192_4_fu_389_p2;
                mul_ln728_reg_1069 <= mul_ln728_fu_996_p2;
                r_V_20_reg_1044 <= r_V_20_fu_259_p2;
                    r_V_23_reg_1059(14 downto 1) <= r_V_23_fu_331_p2(14 downto 1);
                    r_V_25_reg_1084(10 downto 1) <= r_V_25_fu_407_p2(10 downto 1);
                r_V_26_reg_1099 <= r_V_26_fu_445_p2;
                r_V_27_reg_1104 <= r_V_27_fu_451_p2;
                    sext_ln1118_6_reg_1074(14 downto 2) <= sext_ln1118_6_fu_367_p1(14 downto 2);
                sext_ln700_1_reg_1039 <= sext_ln700_1_fu_223_p1;
                tmp_1_reg_1027 <= x_V_in_sig(111 downto 105);
                tmp_2_reg_1033 <= x_V_in_sig(20 downto 14);
                tmp_5_reg_1089 <= x_V_in_sig(27 downto 21);
                trunc_ln708_3_reg_1114 <= ret_V_4_fu_599_p2(18 downto 12);
                trunc_ln708_4_reg_1119 <= ret_V_6_fu_664_p2(22 downto 16);
            end if;
        end if;
    end process;
    r_V_23_reg_1059(0) <= '0';
    sext_ln1118_6_reg_1074(1 downto 0) <= "00";
    r_V_25_reg_1084(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1192_11_fu_539_p2 <= std_logic_vector(unsigned(sub_ln1192_9_fu_515_p2) + unsigned(sext_ln1192_16_fu_535_p1));
    add_ln1192_12_fu_557_p2 <= std_logic_vector(unsigned(add_ln1192_11_fu_539_p2) + unsigned(sext_ln1192_17_fu_553_p1));
    add_ln1192_1_fu_691_p2 <= std_logic_vector(signed(add_ln1192_reg_1049) + signed(sext_ln1192_3_fu_687_p1));
    add_ln1192_2_fu_720_p2 <= std_logic_vector(unsigned(sub_ln1192_fu_703_p2) + unsigned(sext_ln1192_5_fu_716_p1));
    add_ln1192_3_fu_750_p2 <= std_logic_vector(unsigned(add_ln1192_2_fu_720_p2) + unsigned(rhs_V_4_fu_742_p3));
    add_ln1192_5_fu_817_p2 <= std_logic_vector(unsigned(sub_ln1192_2_fu_804_p2) + unsigned(rhs_V_7_fu_810_p3));
    add_ln1192_6_fu_839_p2 <= std_logic_vector(unsigned(add_ln1192_5_fu_817_p2) + unsigned(shl_ln1192_2_fu_831_p3));
    add_ln1192_8_fu_915_p2 <= std_logic_vector(unsigned(sub_ln1192_6_fu_899_p2) + unsigned(sext_ln1192_13_fu_911_p1));
    add_ln1192_9_fu_951_p2 <= std_logic_vector(unsigned(sub_ln1192_7_fu_931_p2) + unsigned(shl_ln1192_5_fu_943_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1002_p0 <= sext_ln728_2_fu_351_p1(7 - 1 downto 0);
    grp_fu_1002_p2 <= (p_Val2_8_fu_227_p4 & ap_const_lv12_0);
    grp_fu_1010_p0 <= sext_ln1118_11_fu_457_p1(7 - 1 downto 0);
    grp_fu_1010_p1 <= sext_ln1118_12_fu_469_p1(9 - 1 downto 0);
    grp_fu_1010_p2 <= sext_ln1118_14_fu_473_p1(7 - 1 downto 0);
    grp_fu_1018_p0 <= sext_ln1118_12_fu_469_p1(9 - 1 downto 0);
    grp_fu_1018_p1 <= sext_ln1118_11_fu_457_p1(7 - 1 downto 0);
    grp_fu_1018_p2 <= sext_ln1118_14_fu_473_p1(7 - 1 downto 0);
    grp_fu_982_p0 <= sext_ln700_2_fu_255_p1(7 - 1 downto 0);
    grp_fu_982_p1 <= sext_ln1118_fu_285_p1(9 - 1 downto 0);
    lhs_V_fu_615_p3 <= (r_V_24_fu_371_p2 & ap_const_lv12_0);
    mul_ln1192_3_fu_826_p0 <= tmp_1_reg_1027;
    mul_ln1192_3_fu_826_p1 <= sext_ln1118_6_reg_1074(9 - 1 downto 0);
    mul_ln1192_3_fu_826_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_3_fu_826_p0) * signed(mul_ln1192_3_fu_826_p1))), 15));
    mul_ln1192_4_fu_389_p0 <= tmp_4_fu_305_p4;
    mul_ln1192_4_fu_389_p1 <= r_V_24_fu_371_p2;
    mul_ln1192_4_fu_389_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_4_fu_389_p0) * signed(mul_ln1192_4_fu_389_p1))), 15));
    mul_ln1192_7_fu_937_p1 <= tmp_5_reg_1089;
    mul_ln1192_7_fu_937_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv11_1D) * signed(mul_ln1192_7_fu_937_p1))), 11));
    mul_ln1192_8_fu_477_p0 <= sext_ln1118_3_fu_297_p1(7 - 1 downto 0);
    mul_ln1192_8_fu_477_p1 <= r_V_7_fu_355_p3;
    mul_ln1192_8_fu_477_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_8_fu_477_p0) * signed(mul_ln1192_8_fu_477_p1))), 15));
    mul_ln728_fu_996_p0 <= sext_ln728_2_fu_351_p1(7 - 1 downto 0);
    p_Val2_8_fu_227_p4 <= x_V_in_sig(104 downto 98);
    r_V_10_fu_427_p0 <= sext_ln1118_10_fu_423_p1(7 - 1 downto 0);
    r_V_10_fu_427_p1 <= sext_ln1118_2_fu_293_p1(7 - 1 downto 0);
    r_V_10_fu_427_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_10_fu_427_p0) * signed(r_V_10_fu_427_p1))), 14));
    r_V_19_fu_205_p0 <= sext_ln1117_fu_187_p1(7 - 1 downto 0);
    r_V_19_fu_205_p1 <= trunc_ln1117_fu_173_p1;
    r_V_19_fu_205_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_19_fu_205_p0) * signed(r_V_19_fu_205_p1))), 14));
    r_V_20_fu_259_p0 <= sext_ln1117_fu_187_p1(7 - 1 downto 0);
    r_V_20_fu_259_p1 <= sext_ln1117_fu_187_p1(7 - 1 downto 0);
    r_V_20_fu_259_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_20_fu_259_p0) * signed(r_V_20_fu_259_p1))), 14));
    r_V_21_fu_737_p0 <= sext_ln700_1_reg_1039(7 - 1 downto 0);
    r_V_21_fu_737_p1 <= r_V_2_fu_726_p3;
    r_V_21_fu_737_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_21_fu_737_p0) * signed(r_V_21_fu_737_p1))), 15));
    r_V_22_fu_315_p3 <= (p_Val2_8_fu_227_p4 & ap_const_lv1_0);
    r_V_23_fu_331_p0 <= sext_ln1118_3_fu_297_p1(7 - 1 downto 0);
    r_V_23_fu_331_p1 <= r_V_22_fu_315_p3;
    r_V_23_fu_331_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_23_fu_331_p0) * signed(r_V_23_fu_331_p1))), 15));
    r_V_24_fu_371_p2 <= std_logic_vector(signed(sext_ln1118_5_fu_363_p1) - signed(sext_ln1118_1_fu_289_p1));
    r_V_25_fu_407_p2 <= std_logic_vector(signed(sext_ln1118_9_fu_403_p1) - signed(sext_ln1118_4_fu_323_p1));
    r_V_26_fu_445_p0 <= sext_ln1117_fu_187_p1(7 - 1 downto 0);
    r_V_26_fu_445_p1 <= sext_ln1118_10_fu_423_p1(7 - 1 downto 0);
    r_V_26_fu_445_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_26_fu_445_p0) * signed(r_V_26_fu_445_p1))), 14));
    r_V_27_fu_451_p0 <= sext_ln700_fu_219_p1(7 - 1 downto 0);
    r_V_27_fu_451_p1 <= sext_ln1118_10_fu_423_p1(7 - 1 downto 0);
    r_V_27_fu_451_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_27_fu_451_p0) * signed(r_V_27_fu_451_p1))), 14));
    r_V_28_fu_497_p0 <= sext_ln700_fu_219_p1(7 - 1 downto 0);
    r_V_28_fu_497_p1 <= sext_ln1118_2_fu_293_p1(7 - 1 downto 0);
    r_V_28_fu_497_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_28_fu_497_p0) * signed(r_V_28_fu_497_p1))), 14));
    r_V_29_fu_521_p0 <= tmp_4_fu_305_p4;
    r_V_29_fu_521_p1 <= sext_ln1118_2_fu_293_p1(7 - 1 downto 0);
    r_V_29_fu_521_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_29_fu_521_p0) * signed(r_V_29_fu_521_p1))), 14));
    r_V_2_fu_726_p3 <= (tmp_2_reg_1033 & ap_const_lv1_0);
    r_V_30_fu_277_p3 <= (tmp_1_fu_177_p4 & ap_const_lv2_0);
    r_V_31_fu_461_p3 <= (tmp_5_fu_413_p4 & ap_const_lv2_0);
    r_V_32_fu_623_p2 <= std_logic_vector(signed(sext_ln1118_fu_285_p1) - signed(sext_ln700_2_fu_255_p1));
    r_V_6_fu_341_p0 <= sext_ln1118_2_fu_293_p1(7 - 1 downto 0);
    r_V_6_fu_341_p1 <= sext_ln1118_2_fu_293_p1(7 - 1 downto 0);
    r_V_6_fu_341_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_6_fu_341_p0) * signed(r_V_6_fu_341_p1))), 14));
    r_V_7_fu_355_p3 <= (p_Val2_8_fu_227_p4 & ap_const_lv2_0);
    ret_V_1_fu_773_p2 <= std_logic_vector(signed(ap_const_lv19_75000) + signed(sub_ln1192_1_fu_767_p2));
    ret_V_2_fu_871_p2 <= std_logic_vector(signed(ap_const_lv23_730000) + signed(sub_ln1192_4_fu_865_p2));
    ret_V_3_fu_957_p2 <= std_logic_vector(signed(ap_const_lv19_7B000) + signed(add_ln1192_9_fu_951_p2));
    ret_V_4_fu_599_p2 <= std_logic_vector(signed(ap_const_lv19_78000) + signed(sub_ln1192_11_fu_593_p2));
    ret_V_5_fu_645_p2 <= std_logic_vector(signed(sext_ln703_fu_629_p1) - signed(sext_ln728_3_fu_641_p1));
    ret_V_6_fu_664_p2 <= std_logic_vector(signed(ap_const_lv23_790000) + signed(sub_ln1192_12_fu_658_p2));
    ret_V_fu_249_p2 <= std_logic_vector(signed(sext_ln728_fu_245_p1) - signed(rhs_V_fu_211_p3));
    rhs_V_10_fu_888_p3 <= (r_V_26_reg_1099 & ap_const_lv4_0);
    rhs_V_11_fu_904_p3 <= (r_V_27_reg_1104 & ap_const_lv4_0);
    rhs_V_12_fu_503_p3 <= (r_V_28_fu_497_p2 & ap_const_lv4_0);
    rhs_V_13_fu_527_p3 <= (r_V_29_fu_521_p2 & ap_const_lv4_0);
    rhs_V_14_fu_545_p3 <= (p_Val2_8_fu_227_p4 & ap_const_lv9_0);
    rhs_V_15_fu_563_p3 <= (tmp_1_fu_177_p4 & ap_const_lv10_0);
    rhs_V_16_fu_581_p3 <= (tmp_5_fu_413_p4 & ap_const_lv10_0);
    rhs_V_17_fu_633_p3 <= (r_V_32_fu_623_p2 & ap_const_lv12_0);
    rhs_V_1_fu_237_p3 <= (p_Val2_8_fu_227_p4 & ap_const_lv8_0);
    rhs_V_2_fu_680_p3 <= (r_V_20_reg_1044 & ap_const_lv4_0);
    rhs_V_3_fu_709_p3 <= (tmp_1_reg_1027 & ap_const_lv11_0);
    rhs_V_4_fu_742_p3 <= (r_V_21_fu_737_p2 & ap_const_lv4_0);
    rhs_V_5_fu_756_p3 <= (tmp_2_reg_1033 & ap_const_lv11_0);
    rhs_V_6_fu_797_p3 <= (mul_ln728_reg_1069 & ap_const_lv4_0);
    rhs_V_7_fu_810_p3 <= (r_V_23_reg_1059 & ap_const_lv8_0);
    rhs_V_8_fu_858_p3 <= (r_V_25_reg_1084 & ap_const_lv12_0);
    rhs_V_fu_211_p3 <= (r_V_19_fu_205_p2 & ap_const_lv4_0);
        sext_ln1117_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_177_p4),14));

        sext_ln1118_10_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_413_p4),14));

        sext_ln1118_11_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_413_p4),10));

        sext_ln1118_12_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_31_fu_461_p3),10));

        sext_ln1118_14_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_413_p4),15));

        sext_ln1118_1_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_8_fu_227_p4),10));

        sext_ln1118_2_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_8_fu_227_p4),14));

        sext_ln1118_3_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_8_fu_227_p4),15));

        sext_ln1118_4_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_22_fu_315_p3),11));

        sext_ln1118_5_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_7_fu_355_p3),10));

        sext_ln1118_6_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_7_fu_355_p3),15));

        sext_ln1118_9_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_6_fu_395_p3),11));

        sext_ln1118_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_30_fu_277_p3),10));

        sext_ln1192_12_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_10_fu_888_p3),19));

        sext_ln1192_13_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_11_fu_904_p3),19));

        sext_ln1192_15_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_12_fu_503_p3),19));

        sext_ln1192_16_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_13_fu_527_p3),19));

        sext_ln1192_17_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_14_fu_545_p3),19));

        sext_ln1192_18_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_15_fu_563_p3),19));

        sext_ln1192_19_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_16_fu_581_p3),19));

        sext_ln1192_3_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_2_fu_680_p3),19));

        sext_ln1192_5_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_3_fu_709_p3),19));

        sext_ln1192_6_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_5_fu_756_p3),19));

        sext_ln700_1_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_191_p4),15));

        sext_ln700_2_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_177_p4),10));

        sext_ln700_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_191_p4),14));

        sext_ln703_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_615_p3),23));

        sext_ln728_2_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_305_p4),19));

        sext_ln728_3_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_17_fu_633_p3),23));

        sext_ln728_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1_fu_237_p3),18));

    shl_ln1118_6_fu_395_p3 <= (p_Val2_8_fu_227_p4 & ap_const_lv3_0);
    shl_ln1192_1_fu_790_p3 <= (mul_ln1192_2_reg_1064 & ap_const_lv4_0);
    shl_ln1192_2_fu_831_p3 <= (mul_ln1192_3_fu_826_p2 & ap_const_lv8_0);
    shl_ln1192_3_fu_845_p3 <= (mul_ln1192_4_reg_1079 & ap_const_lv8_0);
    shl_ln1192_4_fu_924_p3 <= (mul_ln1192_6_reg_1109 & ap_const_lv4_0);
    shl_ln1192_5_fu_943_p3 <= (mul_ln1192_7_fu_937_p2 & ap_const_lv8_0);
    shl_ln1192_6_fu_483_p3 <= (mul_ln1192_8_fu_477_p2 & ap_const_lv4_0);
    shl_ln1192_7_fu_651_p3 <= (grp_fu_1018_p3 & ap_const_lv8_0);
    shl_ln_fu_696_p3 <= (mul_ln1192_1_reg_1054 & ap_const_lv4_0);
    sub_ln1192_10_fu_575_p2 <= std_logic_vector(unsigned(add_ln1192_12_fu_557_p2) - unsigned(sext_ln1192_18_fu_571_p1));
    sub_ln1192_11_fu_593_p2 <= std_logic_vector(unsigned(sub_ln1192_10_fu_575_p2) - unsigned(sext_ln1192_19_fu_589_p1));
    sub_ln1192_12_fu_658_p2 <= std_logic_vector(unsigned(ret_V_5_fu_645_p2) - unsigned(shl_ln1192_7_fu_651_p3));
    sub_ln1192_1_fu_767_p2 <= std_logic_vector(unsigned(add_ln1192_3_fu_750_p2) - unsigned(sext_ln1192_6_fu_763_p1));
    sub_ln1192_2_fu_804_p2 <= std_logic_vector(unsigned(rhs_V_6_fu_797_p3) - unsigned(shl_ln1192_1_fu_790_p3));
    sub_ln1192_3_fu_852_p2 <= std_logic_vector(unsigned(add_ln1192_6_fu_839_p2) - unsigned(shl_ln1192_3_fu_845_p3));
    sub_ln1192_4_fu_865_p2 <= std_logic_vector(unsigned(sub_ln1192_3_fu_852_p2) - unsigned(rhs_V_8_fu_858_p3));
    sub_ln1192_6_fu_899_p2 <= std_logic_vector(signed(sub_ln1192_5_reg_1094) - signed(sext_ln1192_12_fu_895_p1));
    sub_ln1192_7_fu_931_p2 <= std_logic_vector(unsigned(add_ln1192_8_fu_915_p2) - unsigned(shl_ln1192_4_fu_924_p3));
    sub_ln1192_8_fu_491_p2 <= std_logic_vector(unsigned(ap_const_lv19_0) - unsigned(shl_ln1192_6_fu_483_p3));
    sub_ln1192_9_fu_515_p2 <= std_logic_vector(unsigned(sub_ln1192_8_fu_491_p2) - unsigned(sext_ln1192_15_fu_511_p1));
    sub_ln1192_fu_703_p2 <= std_logic_vector(unsigned(add_ln1192_1_fu_691_p2) - unsigned(shl_ln_fu_696_p3));
    tmp_1_fu_177_p4 <= x_V_in_sig(111 downto 105);
    tmp_2_fu_191_p4 <= x_V_in_sig(20 downto 14);
    tmp_4_fu_305_p4 <= x_V_in_sig(34 downto 28);
    tmp_5_fu_413_p4 <= x_V_in_sig(27 downto 21);
    trunc_ln1117_fu_173_p1 <= x_V_in_sig(7 - 1 downto 0);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, x_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V_ap_vld, x_V, x_V_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

    y_0_V <= ret_V_1_fu_773_p2(18 downto 12);

    y_0_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_V <= ret_V_2_fu_871_p2(22 downto 16);

    y_1_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= ret_V_3_fu_957_p2(18 downto 12);

    y_2_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_3_V <= trunc_ln708_3_reg_1114;

    y_3_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= trunc_ln708_4_reg_1119;

    y_4_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
