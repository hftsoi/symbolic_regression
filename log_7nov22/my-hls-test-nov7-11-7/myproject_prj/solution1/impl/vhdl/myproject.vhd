-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (175 downto 0);
    y_0_V : OUT STD_LOGIC_VECTOR (10 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (10 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (10 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (10 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (10 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.565062,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=21,HLS_SYN_FF=698,HLS_SYN_LUT=878,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv176_lc_1 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100101";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_9A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011010";
    constant ap_const_lv32_A4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100100";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv27_7F90000 : STD_LOGIC_VECTOR (26 downto 0) := "111111110010000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv23_7F5000 : STD_LOGIC_VECTOR (22 downto 0) := "11111110101000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv27_7F30000 : STD_LOGIC_VECTOR (26 downto 0) := "111111100110000000000000000";
    constant ap_const_lv23_7FB000 : STD_LOGIC_VECTOR (22 downto 0) := "11111111011000000000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv23_7F8000 : STD_LOGIC_VECTOR (22 downto 0) := "11111111000000000000000";
    constant ap_const_lv15_1D : STD_LOGIC_VECTOR (14 downto 0) := "000000000011101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_preg : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (175 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_1_fu_173_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_975 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_975_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1192_fu_183_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1192_reg_984 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_2_reg_990 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_reg_990_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1192_fu_832_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_reg_998 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_5_fu_205_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_5_reg_1003 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_5_reg_1003_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_13_fu_838_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_13_reg_1014 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln1192_fu_215_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln1192_reg_1019 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_4_reg_1024 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_14_fu_236_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_14_reg_1030 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_14_reg_1030_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_15_fu_845_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_15_reg_1035 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_4_fu_852_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_4_reg_1040 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln1192_1_fu_248_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln1192_1_reg_1045 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_5_fu_251_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_reg_1050 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_reg_1050_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_8_fu_858_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_8_reg_1059 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1192_1_fu_331_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1192_1_reg_1064 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1192_3_fu_882_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_3_reg_1069 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln1192_5_fu_387_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1192_5_reg_1074 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1192_6_fu_901_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_6_reg_1079 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_7_fu_906_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_7_reg_1084 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln1192_7_fu_441_p2 : STD_LOGIC_VECTOR (22 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sub_ln1192_7_fu_441_p2 : signal is "no";
    signal sub_ln1192_7_reg_1089 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1192_10_fu_927_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_10_reg_1094 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_933_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_11_reg_1099 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_13_fu_941_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_13_reg_1104 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_14_fu_947_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_14_reg_1109 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_15_fu_953_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_15_reg_1114 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln708_4_reg_1119 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln1117_fu_169_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_fu_275_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1192_2_fu_282_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln_fu_265_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_864_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1192_1_fu_301_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_18_fu_313_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_873_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln1192_1_fu_308_p2 : STD_LOGIC_VECTOR (22 downto 0);
    attribute use_dsp48 of add_ln1192_1_fu_308_p2 : signal is "no";
    signal shl_ln1192_2_fu_324_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_2_fu_337_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_4_fu_888_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1192_5_fu_894_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1192_5_fu_367_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1192_4_fu_354_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln1192_3_fu_374_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1192_6_fu_380_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_5_fu_393_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1118_6_fu_400_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_2_fu_348_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_16_fu_408_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1192_9_fu_921_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_912_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1192_9_fu_434_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_19_fu_449_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1118_1_fu_320_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln700_fu_292_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lhs_V_fu_463_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_20_fu_471_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal rhs_V_8_fu_481_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln703_fu_477_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln728_fu_489_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_959_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_4_fu_493_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1192_15_fu_499_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln1192_13_fu_506_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ret_V_5_fu_512_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal rhs_V_1_fu_528_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1192_6_fu_535_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1192_2_fu_539_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1192_3_fu_544_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_2_fu_557_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln1192_3_fu_551_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1192_8_fu_564_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1192_2_fu_568_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_fu_574_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1192_7_fu_594_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1192_6_fu_601_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1192_8_fu_606_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1118_6_fu_619_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_7_fu_626_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1118_5_fu_591_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_17_fu_630_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln1192_4_fu_613_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal rhs_V_3_fu_636_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln1192_5_fu_644_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ret_V_1_fu_650_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1192_s_fu_667_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1192_8_fu_674_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1192_10_fu_682_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1192_12_fu_968_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln1192_8_fu_689_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1192_11_fu_695_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1192_9_fu_702_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_2_fu_708_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1192_12_fu_725_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1192_9_fu_732_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1192_13_fu_738_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1192_10_fu_745_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1192_14_fu_751_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_5_fu_764_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1192_11_fu_758_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1192_20_fu_771_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_6_fu_781_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln1192_12_fu_775_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1192_21_fu_788_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_7_fu_798_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1192_11_fu_792_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1192_22_fu_805_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1192_12_fu_809_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_3_fu_815_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_13_fu_838_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1117_fu_187_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_13_fu_838_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_4_fu_852_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1118_3_fu_218_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_4_fu_852_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_8_fu_858_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_864_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_873_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_873_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_873_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1192_1_fu_272_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_3_fu_882_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1192_5_fu_894_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1192_11_fu_364_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1192_6_fu_901_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1192_6_fu_901_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1192_12_fu_404_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_7_fu_906_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1192_14_fu_418_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_912_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_912_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1192_9_fu_921_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1192_9_fu_921_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1192_15_fu_421_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_10_fu_927_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1192_10_fu_927_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_933_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1118_9_fu_446_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_933_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1118_10_fu_456_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_933_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1192_13_fu_941_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1192_19_fu_460_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_13_fu_941_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1192_14_fu_947_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1192_14_fu_947_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1192_15_fu_953_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1192_15_fu_953_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_959_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_959_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_959_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1192_12_fu_968_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mul_mul_11s_11s_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component myproject_mul_mul_11s_11s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_mul_mul_11s_12s_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component myproject_mac_muladd_11s_22s_23ns_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        din2 : IN STD_LOGIC_VECTOR (22 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component myproject_am_addmul_11s_13s_11s_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component myproject_mul_mul_11s_12s_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component myproject_mul_mul_11s_23s_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (22 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component myproject_mul_mul_11s_22s_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component myproject_mul_mul_11s_13s_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component myproject_mul_mul_11s_14s_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component myproject_mac_mul_sub_11s_22s_23ns_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        din2 : IN STD_LOGIC_VECTOR (22 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component myproject_am_submul_13s_11s_11s_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component myproject_mul_mul_6ns_11s_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    myproject_mul_mul_11s_11s_19_1_1_U1 : component myproject_mul_mul_11s_11s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 19)
    port map (
        din0 => tmp_1_fu_173_p4,
        din1 => trunc_ln1117_fu_169_p1,
        dout => mul_ln1192_fu_832_p2);

    myproject_mul_mul_11s_11s_22_1_1_U2 : component myproject_mul_mul_11s_11s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        din0 => r_V_13_fu_838_p0,
        din1 => r_V_13_fu_838_p1,
        dout => r_V_13_fu_838_p2);

    myproject_mul_mul_11s_12s_23_1_1_U3 : component myproject_mul_mul_11s_12s_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 12,
        dout_WIDTH => 23)
    port map (
        din0 => p_Val2_5_fu_205_p4,
        din1 => r_V_14_fu_236_p3,
        dout => r_V_15_fu_845_p2);

    myproject_mul_mul_11s_11s_22_1_1_U4 : component myproject_mul_mul_11s_11s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        din0 => r_V_4_fu_852_p0,
        din1 => r_V_4_fu_852_p1,
        dout => r_V_4_fu_852_p2);

    myproject_mul_mul_11s_11s_22_1_1_U5 : component myproject_mul_mul_11s_11s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        din0 => tmp_5_fu_251_p4,
        din1 => r_V_8_fu_858_p1,
        dout => r_V_8_fu_858_p2);

    myproject_mac_muladd_11s_22s_23ns_23_1_1_U6 : component myproject_mac_muladd_11s_22s_23ns_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 22,
        din2_WIDTH => 23,
        dout_WIDTH => 23)
    port map (
        din0 => tmp_2_reg_990,
        din1 => r_V_13_reg_1014,
        din2 => grp_fu_864_p2,
        dout => grp_fu_864_p3);

    myproject_am_addmul_11s_13s_11s_19_1_1_U7 : component myproject_am_addmul_11s_13s_11s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 13,
        din2_WIDTH => 11,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_873_p0,
        din1 => grp_fu_873_p1,
        din2 => grp_fu_873_p2,
        dout => grp_fu_873_p3);

    myproject_mul_mul_11s_12s_19_1_1_U8 : component myproject_mul_mul_11s_12s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 12,
        dout_WIDTH => 19)
    port map (
        din0 => mul_ln1192_3_fu_882_p0,
        din1 => r_V_2_fu_337_p3,
        dout => mul_ln1192_3_fu_882_p2);

    myproject_mul_mul_11s_23s_23_1_1_U9 : component myproject_mul_mul_11s_23s_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 23,
        dout_WIDTH => 23)
    port map (
        din0 => tmp_1_reg_975,
        din1 => r_V_15_reg_1035,
        dout => mul_ln1192_4_fu_888_p2);

    myproject_mul_mul_11s_22s_23_1_1_U10 : component myproject_mul_mul_11s_22s_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 22,
        dout_WIDTH => 23)
    port map (
        din0 => mul_ln1192_5_fu_894_p0,
        din1 => r_V_4_reg_1040,
        dout => mul_ln1192_5_fu_894_p2);

    myproject_mul_mul_11s_13s_19_1_1_U11 : component myproject_mul_mul_11s_13s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 13,
        dout_WIDTH => 19)
    port map (
        din0 => mul_ln1192_6_fu_901_p0,
        din1 => mul_ln1192_6_fu_901_p1,
        dout => mul_ln1192_6_fu_901_p2);

    myproject_mul_mul_11s_14s_19_1_1_U12 : component myproject_mul_mul_11s_14s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 14,
        dout_WIDTH => 19)
    port map (
        din0 => mul_ln1192_7_fu_906_p0,
        din1 => r_V_16_fu_408_p2,
        dout => mul_ln1192_7_fu_906_p2);

    myproject_mac_mul_sub_11s_22s_23ns_23_1_1_U13 : component myproject_mac_mul_sub_11s_22s_23ns_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 22,
        din2_WIDTH => 23,
        dout_WIDTH => 23)
    port map (
        din0 => grp_fu_912_p0,
        din1 => r_V_8_reg_1059,
        din2 => grp_fu_912_p2,
        dout => grp_fu_912_p3);

    myproject_mul_mul_11s_11s_19_1_1_U14 : component myproject_mul_mul_11s_11s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 19)
    port map (
        din0 => mul_ln1192_9_fu_921_p0,
        din1 => mul_ln1192_9_fu_921_p1,
        dout => mul_ln1192_9_fu_921_p2);

    myproject_mul_mul_11s_11s_19_1_1_U15 : component myproject_mul_mul_11s_11s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 19)
    port map (
        din0 => mul_ln1192_10_fu_927_p0,
        din1 => mul_ln1192_10_fu_927_p1,
        dout => mul_ln1192_10_fu_927_p2);

    myproject_am_addmul_11s_13s_11s_19_1_1_U16 : component myproject_am_addmul_11s_13s_11s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 13,
        din2_WIDTH => 11,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_933_p0,
        din1 => grp_fu_933_p1,
        din2 => grp_fu_933_p2,
        dout => grp_fu_933_p3);

    myproject_mul_mul_11s_13s_19_1_1_U17 : component myproject_mul_mul_11s_13s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 13,
        dout_WIDTH => 19)
    port map (
        din0 => mul_ln1192_13_fu_941_p0,
        din1 => mul_ln1192_13_fu_941_p1,
        dout => mul_ln1192_13_fu_941_p2);

    myproject_mul_mul_11s_11s_19_1_1_U18 : component myproject_mul_mul_11s_11s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 19)
    port map (
        din0 => mul_ln1192_14_fu_947_p0,
        din1 => mul_ln1192_14_fu_947_p1,
        dout => mul_ln1192_14_fu_947_p2);

    myproject_mul_mul_11s_11s_19_1_1_U19 : component myproject_mul_mul_11s_11s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 19)
    port map (
        din0 => mul_ln1192_15_fu_953_p0,
        din1 => mul_ln1192_15_fu_953_p1,
        dout => mul_ln1192_15_fu_953_p2);

    myproject_am_submul_13s_11s_11s_19_1_1_U20 : component myproject_am_submul_13s_11s_11s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 11,
        din2_WIDTH => 11,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_959_p0,
        din1 => grp_fu_959_p1,
        din2 => grp_fu_959_p2,
        dout => grp_fu_959_p3);

    myproject_mul_mul_6ns_11s_15_1_1_U21 : component myproject_mul_mul_6ns_11s_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln1192_12_fu_968_p0,
        din1 => tmp_5_reg_1050_pp0_iter1_reg,
        dout => mul_ln1192_12_fu_968_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv176_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln1192_5_reg_1074(26 downto 4) <= add_ln1192_5_fu_387_p2(26 downto 4);
                mul_ln1192_10_reg_1094 <= mul_ln1192_10_fu_927_p2;
                mul_ln1192_13_reg_1104 <= mul_ln1192_13_fu_941_p2;
                mul_ln1192_14_reg_1109 <= mul_ln1192_14_fu_947_p2;
                mul_ln1192_15_reg_1114 <= mul_ln1192_15_fu_953_p2;
                mul_ln1192_3_reg_1069 <= mul_ln1192_3_fu_882_p2;
                mul_ln1192_6_reg_1079 <= mul_ln1192_6_fu_901_p2;
                mul_ln1192_7_reg_1084 <= mul_ln1192_7_fu_906_p2;
                mul_ln1192_reg_998 <= mul_ln1192_fu_832_p2;
                p_Val2_5_reg_1003 <= x_V_in_sig(164 downto 154);
                p_Val2_5_reg_1003_pp0_iter1_reg <= p_Val2_5_reg_1003;
                r_V_13_reg_1014 <= r_V_13_fu_838_p2;
                    r_V_14_reg_1030(11 downto 1) <= r_V_14_fu_236_p3(11 downto 1);
                    r_V_14_reg_1030_pp0_iter1_reg(11 downto 1) <= r_V_14_reg_1030(11 downto 1);
                r_V_15_reg_1035 <= r_V_15_fu_845_p2;
                r_V_4_reg_1040 <= r_V_4_fu_852_p2;
                r_V_8_reg_1059 <= r_V_8_fu_858_p2;
                sext_ln1192_reg_984 <= sext_ln1192_fu_183_p1;
                sub_ln1192_1_reg_1064 <= sub_ln1192_1_fu_331_p2;
                sub_ln1192_7_reg_1089 <= sub_ln1192_7_fu_441_p2;
                tmp_1_reg_975 <= x_V_in_sig(175 downto 165);
                tmp_1_reg_975_pp0_iter1_reg <= tmp_1_reg_975;
                tmp_2_reg_990 <= x_V_in_sig(32 downto 22);
                tmp_2_reg_990_pp0_iter1_reg <= tmp_2_reg_990;
                tmp_4_reg_1024 <= x_V_in_sig(54 downto 44);
                tmp_5_reg_1050 <= x_V_in_sig(43 downto 33);
                tmp_5_reg_1050_pp0_iter1_reg <= tmp_5_reg_1050;
                trunc_ln1192_1_reg_1045 <= trunc_ln1192_1_fu_248_p1;
                trunc_ln1192_reg_1019 <= trunc_ln1192_fu_215_p1;
                trunc_ln708_4_reg_1119 <= ret_V_5_fu_512_p2(26 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln1192_11_reg_1099 <= grp_fu_933_p3;
            end if;
        end if;
    end process;
    r_V_14_reg_1030(0) <= '0';
    r_V_14_reg_1030_pp0_iter1_reg(0) <= '0';
    add_ln1192_5_reg_1074(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1192_11_fu_758_p2 <= std_logic_vector(unsigned(sub_ln1192_10_fu_745_p2) + unsigned(shl_ln1192_14_fu_751_p3));
    add_ln1192_12_fu_775_p2 <= std_logic_vector(unsigned(add_ln1192_11_fu_758_p2) + unsigned(sext_ln1192_20_fu_771_p1));
    add_ln1192_1_fu_308_p2 <= std_logic_vector(signed(grp_fu_864_p3) + signed(shl_ln1192_1_fu_301_p3));
    add_ln1192_2_fu_539_p2 <= std_logic_vector(unsigned(sub_ln1192_1_reg_1064) + unsigned(sext_ln1192_6_fu_535_p1));
    add_ln1192_3_fu_551_p2 <= std_logic_vector(unsigned(add_ln1192_2_fu_539_p2) + unsigned(shl_ln1192_3_fu_544_p3));
    add_ln1192_5_fu_387_p2 <= std_logic_vector(unsigned(sub_ln1192_3_fu_374_p2) + unsigned(shl_ln1192_6_fu_380_p3));
    add_ln1192_6_fu_601_p2 <= std_logic_vector(unsigned(add_ln1192_5_reg_1074) + unsigned(shl_ln1192_7_fu_594_p3));
    add_ln1192_8_fu_674_p2 <= std_logic_vector(unsigned(sub_ln1192_7_reg_1089) + unsigned(shl_ln1192_s_fu_667_p3));
    add_ln1192_9_fu_702_p2 <= std_logic_vector(unsigned(sub_ln1192_8_fu_689_p2) + unsigned(shl_ln1192_11_fu_695_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_864_p2 <= std_logic_vector(signed(sext_ln1192_2_fu_282_p1) - signed(shl_ln_fu_265_p3));
    grp_fu_873_p0 <= sext_ln700_fu_292_p1(11 - 1 downto 0);
    grp_fu_873_p1 <= sext_ln1118_1_fu_320_p1(13 - 1 downto 0);
    grp_fu_873_p2 <= sext_ln1192_1_fu_272_p1(11 - 1 downto 0);
    grp_fu_912_p0 <= sext_ln1192_11_fu_364_p1(11 - 1 downto 0);
    grp_fu_912_p2 <= (p_Val2_5_reg_1003 & ap_const_lv12_0);
    grp_fu_933_p0 <= sext_ln1118_9_fu_446_p1(11 - 1 downto 0);
    grp_fu_933_p1 <= sext_ln1118_10_fu_456_p1(13 - 1 downto 0);
    grp_fu_933_p2 <= sext_ln1192_15_fu_421_p1(11 - 1 downto 0);
    grp_fu_959_p0 <= sext_ln1118_10_fu_456_p1(13 - 1 downto 0);
    grp_fu_959_p1 <= sext_ln1118_9_fu_446_p1(11 - 1 downto 0);
    grp_fu_959_p2 <= sext_ln1192_15_fu_421_p1(11 - 1 downto 0);
    lhs_V_fu_463_p3 <= (r_V_16_fu_408_p2 & ap_const_lv12_0);
    mul_ln1192_10_fu_927_p0 <= sext_ln1192_1_fu_272_p1(11 - 1 downto 0);
    mul_ln1192_10_fu_927_p1 <= sext_ln1192_15_fu_421_p1(11 - 1 downto 0);
    mul_ln1192_12_fu_968_p0 <= ap_const_lv15_1D(6 - 1 downto 0);
    mul_ln1192_13_fu_941_p0 <= sext_ln1192_19_fu_460_p1(11 - 1 downto 0);
    mul_ln1192_13_fu_941_p1 <= sext_ln1192_12_fu_404_p1(13 - 1 downto 0);
    mul_ln1192_14_fu_947_p0 <= sext_ln1192_1_fu_272_p1(11 - 1 downto 0);
    mul_ln1192_14_fu_947_p1 <= sext_ln1192_19_fu_460_p1(11 - 1 downto 0);
    mul_ln1192_15_fu_953_p0 <= sext_ln1192_14_fu_418_p1(11 - 1 downto 0);
    mul_ln1192_15_fu_953_p1 <= sext_ln1192_19_fu_460_p1(11 - 1 downto 0);
    mul_ln1192_3_fu_882_p0 <= sext_ln1192_1_fu_272_p1(11 - 1 downto 0);
    mul_ln1192_5_fu_894_p0 <= sext_ln1192_11_fu_364_p1(11 - 1 downto 0);
    mul_ln1192_6_fu_901_p0 <= sext_ln1192_reg_984(11 - 1 downto 0);
    mul_ln1192_6_fu_901_p1 <= sext_ln1192_12_fu_404_p1(13 - 1 downto 0);
    mul_ln1192_7_fu_906_p0 <= sext_ln1192_14_fu_418_p1(11 - 1 downto 0);
    mul_ln1192_9_fu_921_p0 <= sext_ln1192_reg_984(11 - 1 downto 0);
    mul_ln1192_9_fu_921_p1 <= sext_ln1192_15_fu_421_p1(11 - 1 downto 0);
    p_Val2_5_fu_205_p4 <= x_V_in_sig(164 downto 154);
    r_V_13_fu_838_p0 <= sext_ln1117_fu_187_p1(11 - 1 downto 0);
    r_V_13_fu_838_p1 <= sext_ln1117_fu_187_p1(11 - 1 downto 0);
    r_V_14_fu_236_p3 <= (p_Val2_5_fu_205_p4 & ap_const_lv1_0);
    r_V_16_fu_408_p2 <= std_logic_vector(signed(sext_ln1118_6_fu_400_p1) - signed(sext_ln1118_2_fu_348_p1));
    r_V_17_fu_630_p2 <= std_logic_vector(signed(sext_ln1118_7_fu_626_p1) - signed(sext_ln1118_5_fu_591_p1));
    r_V_18_fu_313_p3 <= (tmp_1_reg_975 & ap_const_lv2_0);
    r_V_19_fu_449_p3 <= (tmp_5_reg_1050 & ap_const_lv2_0);
    r_V_20_fu_471_p2 <= std_logic_vector(signed(sext_ln1118_1_fu_320_p1) - signed(sext_ln700_fu_292_p1));
    r_V_2_fu_337_p3 <= (tmp_2_reg_990 & ap_const_lv1_0);
    r_V_4_fu_852_p0 <= sext_ln1118_3_fu_218_p1(11 - 1 downto 0);
    r_V_4_fu_852_p1 <= sext_ln1118_3_fu_218_p1(11 - 1 downto 0);
    r_V_5_fu_393_p3 <= (p_Val2_5_reg_1003 & ap_const_lv2_0);
    r_V_8_fu_858_p1 <= sext_ln1118_3_fu_218_p1(11 - 1 downto 0);
    ret_V_1_fu_650_p2 <= std_logic_vector(signed(ap_const_lv27_7F30000) + signed(sub_ln1192_5_fu_644_p2));
    ret_V_2_fu_708_p2 <= std_logic_vector(signed(ap_const_lv23_7FB000) + signed(add_ln1192_9_fu_702_p2));
    ret_V_3_fu_815_p2 <= std_logic_vector(signed(ap_const_lv23_7F8000) + signed(sub_ln1192_12_fu_809_p2));
    ret_V_4_fu_493_p2 <= std_logic_vector(signed(sext_ln703_fu_477_p1) - signed(sext_ln728_fu_489_p1));
    ret_V_5_fu_512_p2 <= std_logic_vector(signed(ap_const_lv27_7F90000) + signed(sub_ln1192_13_fu_506_p2));
    ret_V_fu_574_p2 <= std_logic_vector(signed(ap_const_lv23_7F5000) + signed(sub_ln1192_2_fu_568_p2));
    rhs_V_1_fu_528_p3 <= (tmp_1_reg_975_pp0_iter1_reg & ap_const_lv11_0);
    rhs_V_2_fu_557_p3 <= (tmp_2_reg_990_pp0_iter1_reg & ap_const_lv11_0);
    rhs_V_3_fu_636_p3 <= (r_V_17_fu_630_p2 & ap_const_lv12_0);
    rhs_V_5_fu_764_p3 <= (p_Val2_5_reg_1003_pp0_iter1_reg & ap_const_lv9_0);
    rhs_V_6_fu_781_p3 <= (tmp_1_reg_975_pp0_iter1_reg & ap_const_lv10_0);
    rhs_V_7_fu_798_p3 <= (tmp_5_reg_1050_pp0_iter1_reg & ap_const_lv10_0);
    rhs_V_8_fu_481_p3 <= (r_V_20_fu_471_p2 & ap_const_lv12_0);
    rhs_V_fu_275_p3 <= (p_Val2_5_reg_1003 & ap_const_lv8_0);
        sext_ln1117_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_173_p4),22));

        sext_ln1118_10_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_19_fu_449_p3),14));

        sext_ln1118_1_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_18_fu_313_p3),14));

        sext_ln1118_2_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_reg_1003),14));

        sext_ln1118_3_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_fu_205_p4),22));

        sext_ln1118_5_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_14_reg_1030_pp0_iter1_reg),15));

        sext_ln1118_6_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_fu_393_p3),14));

        sext_ln1118_7_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_6_fu_619_p3),15));

        sext_ln1118_9_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1050),14));

        sext_ln1192_11_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1024),23));

        sext_ln1192_12_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_fu_393_p3),19));

        sext_ln1192_14_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1024),19));

        sext_ln1192_15_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1050),19));

        sext_ln1192_19_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_reg_1003),19));

        sext_ln1192_1_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_990),19));

        sext_ln1192_20_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_5_fu_764_p3),23));

        sext_ln1192_21_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_6_fu_781_p3),23));

        sext_ln1192_22_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_7_fu_798_p3),23));

        sext_ln1192_2_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_275_p3),23));

        sext_ln1192_6_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1_fu_528_p3),23));

        sext_ln1192_8_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_2_fu_557_p3),23));

        sext_ln1192_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_173_p4),19));

        sext_ln700_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_975),14));

        sext_ln703_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_463_p3),27));

        sext_ln728_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_8_fu_481_p3),27));

    shl_ln1118_6_fu_619_p3 <= (p_Val2_5_reg_1003_pp0_iter1_reg & ap_const_lv3_0);
    shl_ln1192_10_fu_682_p3 <= (mul_ln1192_11_reg_1099 & ap_const_lv4_0);
    shl_ln1192_11_fu_695_p3 <= (mul_ln1192_12_fu_968_p2 & ap_const_lv8_0);
    shl_ln1192_12_fu_725_p3 <= (mul_ln1192_13_reg_1104 & ap_const_lv4_0);
    shl_ln1192_13_fu_738_p3 <= (mul_ln1192_14_reg_1109 & ap_const_lv4_0);
    shl_ln1192_14_fu_751_p3 <= (mul_ln1192_15_reg_1114 & ap_const_lv4_0);
    shl_ln1192_15_fu_499_p3 <= (grp_fu_959_p3 & ap_const_lv8_0);
    shl_ln1192_1_fu_301_p3 <= (trunc_ln1192_reg_1019 & ap_const_lv4_0);
    shl_ln1192_2_fu_324_p3 <= (grp_fu_873_p3 & ap_const_lv4_0);
    shl_ln1192_3_fu_544_p3 <= (mul_ln1192_3_reg_1069 & ap_const_lv4_0);
    shl_ln1192_4_fu_354_p3 <= (mul_ln1192_4_fu_888_p2 & ap_const_lv4_0);
    shl_ln1192_5_fu_367_p3 <= (mul_ln1192_5_fu_894_p2 & ap_const_lv4_0);
    shl_ln1192_6_fu_380_p3 <= (trunc_ln1192_1_reg_1045 & ap_const_lv8_0);
    shl_ln1192_7_fu_594_p3 <= (mul_ln1192_6_reg_1079 & ap_const_lv8_0);
    shl_ln1192_8_fu_606_p3 <= (mul_ln1192_7_reg_1084 & ap_const_lv8_0);
    shl_ln1192_9_fu_434_p3 <= (mul_ln1192_9_fu_921_p2 & ap_const_lv4_0);
    shl_ln1192_s_fu_667_p3 <= (mul_ln1192_10_reg_1094 & ap_const_lv4_0);
    shl_ln_fu_265_p3 <= (mul_ln1192_reg_998 & ap_const_lv4_0);
    sub_ln1192_10_fu_745_p2 <= std_logic_vector(unsigned(sub_ln1192_9_fu_732_p2) - unsigned(shl_ln1192_13_fu_738_p3));
    sub_ln1192_11_fu_792_p2 <= std_logic_vector(unsigned(add_ln1192_12_fu_775_p2) - unsigned(sext_ln1192_21_fu_788_p1));
    sub_ln1192_12_fu_809_p2 <= std_logic_vector(unsigned(sub_ln1192_11_fu_792_p2) - unsigned(sext_ln1192_22_fu_805_p1));
    sub_ln1192_13_fu_506_p2 <= std_logic_vector(unsigned(ret_V_4_fu_493_p2) - unsigned(shl_ln1192_15_fu_499_p3));
    sub_ln1192_1_fu_331_p2 <= std_logic_vector(unsigned(add_ln1192_1_fu_308_p2) - unsigned(shl_ln1192_2_fu_324_p3));
    sub_ln1192_2_fu_568_p2 <= std_logic_vector(unsigned(add_ln1192_3_fu_551_p2) - unsigned(sext_ln1192_8_fu_564_p1));
    sub_ln1192_3_fu_374_p2 <= std_logic_vector(unsigned(shl_ln1192_5_fu_367_p3) - unsigned(shl_ln1192_4_fu_354_p3));
    sub_ln1192_4_fu_613_p2 <= std_logic_vector(unsigned(add_ln1192_6_fu_601_p2) - unsigned(shl_ln1192_8_fu_606_p3));
    sub_ln1192_5_fu_644_p2 <= std_logic_vector(unsigned(sub_ln1192_4_fu_613_p2) - unsigned(rhs_V_3_fu_636_p3));
    sub_ln1192_7_fu_441_p2 <= std_logic_vector(signed(grp_fu_912_p3) - signed(shl_ln1192_9_fu_434_p3));
    sub_ln1192_8_fu_689_p2 <= std_logic_vector(unsigned(add_ln1192_8_fu_674_p2) - unsigned(shl_ln1192_10_fu_682_p3));
    sub_ln1192_9_fu_732_p2 <= std_logic_vector(unsigned(ap_const_lv23_0) - unsigned(shl_ln1192_12_fu_725_p3));
    tmp_1_fu_173_p4 <= x_V_in_sig(175 downto 165);
    tmp_5_fu_251_p4 <= x_V_in_sig(43 downto 33);
    trunc_ln1117_fu_169_p1 <= x_V_in_sig(11 - 1 downto 0);
    trunc_ln1192_1_fu_248_p1 <= r_V_15_fu_845_p2(19 - 1 downto 0);
    trunc_ln1192_fu_215_p1 <= r_V_13_fu_838_p2(19 - 1 downto 0);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, x_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V_ap_vld, x_V, x_V_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

    y_0_V <= ret_V_fu_574_p2(22 downto 12);

    y_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_V <= ret_V_1_fu_650_p2(26 downto 16);

    y_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= ret_V_2_fu_708_p2(22 downto 12);

    y_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_3_V <= ret_V_3_fu_815_p2(22 downto 12);

    y_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= trunc_ln708_4_reg_1119;

    y_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
