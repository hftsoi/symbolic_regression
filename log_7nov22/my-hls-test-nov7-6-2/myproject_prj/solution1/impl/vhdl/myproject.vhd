-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (95 downto 0);
    y_0_V : OUT STD_LOGIC_VECTOR (5 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (5 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (5 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (5 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (5 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.054000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=7,HLS_SYN_FF=316,HLS_SYN_LUT=1123,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv22_390000 : STD_LOGIC_VECTOR (21 downto 0) := "1110010000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv18_35000 : STD_LOGIC_VECTOR (17 downto 0) := "110101000000000000";
    constant ap_const_lv22_330000 : STD_LOGIC_VECTOR (21 downto 0) := "1100110000000000000000";
    constant ap_const_lv10_1D : STD_LOGIC_VECTOR (9 downto 0) := "0000011101";
    constant ap_const_lv18_3B000 : STD_LOGIC_VECTOR (17 downto 0) := "111011000000000000";
    constant ap_const_lv18_38000 : STD_LOGIC_VECTOR (17 downto 0) := "111000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_preg : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (95 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_1_fu_179_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_reg_1060 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_193_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_reg_1066 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_23_fu_261_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_23_reg_1073 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1007_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_reg_1078 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1015_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln728_reg_1083 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_26_fu_337_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_26_reg_1088 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln728_1_fu_1023_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln728_1_reg_1093 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln728_2_fu_1029_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln728_2_reg_1098 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1116_3_fu_377_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1116_3_reg_1103 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln728_3_fu_399_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln728_3_reg_1108 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_29_fu_417_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_29_reg_1113 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_423_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_reg_1118 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1035_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1192_5_reg_1124 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_31_fu_455_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_31_reg_1129 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_32_fu_461_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_32_reg_1134 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1043_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln728_4_reg_1139 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln1192_8_fu_585_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1192_8_reg_1144 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_4_reg_1149 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln1117_fu_175_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_22_fu_207_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1117_1_fu_189_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_22_fu_207_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_22_fu_207_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_14_fu_229_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal rhs_V_1_fu_239_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln728_1_fu_247_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_fu_213_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_23_fu_261_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_23_fu_261_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_fu_251_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_36_fu_279_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_25_fu_321_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_26_fu_337_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_26_fu_337_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_6_fu_347_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1118_5_fu_299_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_6_fu_347_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_311_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_6_fu_347_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_7_fu_365_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1118_11_fu_373_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_3_fu_291_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_28_fu_381_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln728_3_fu_399_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln728_3_fu_399_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln1118_6_fu_405_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_13_fu_413_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_7_fu_329_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_11_fu_437_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1118_14_fu_433_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_11_fu_437_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_11_fu_437_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_31_fu_455_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_31_fu_455_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_32_fu_461_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln700_fu_221_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_32_fu_461_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_37_fu_471_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_33_fu_487_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_33_fu_487_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_33_fu_487_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal rhs_V_17_fu_493_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_34_fu_507_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_34_fu_507_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_34_fu_507_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal rhs_V_18_fu_513_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_8_fu_501_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln728_11_fu_521_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_35_fu_531_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_35_fu_531_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_35_fu_531_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal rhs_V_19_fu_537_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_9_fu_525_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln728_12_fu_545_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_20_fu_555_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_10_fu_549_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln728_13_fu_563_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_21_fu_573_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_11_fu_567_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1192_6_fu_581_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1118_2_fu_287_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln700_2_fu_257_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_fu_591_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_38_fu_599_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_23_fu_609_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln703_2_fu_605_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln728_14_fu_617_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1051_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_13_fu_621_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal rhs_V_24_fu_627_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1192_10_fu_634_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ret_V_14_fu_640_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal rhs_V_2_fu_665_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_1_fu_662_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln728_2_fu_672_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_2_fu_676_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_3_fu_682_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_4_fu_695_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1192_fu_689_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1192_fu_702_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_2_fu_712_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_24_fu_723_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_24_fu_723_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_24_fu_723_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal rhs_V_5_fu_729_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1192_fu_706_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1192_1_fu_737_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_6_fu_747_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1192_1_fu_741_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1192_2_fu_754_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1192_1_fu_758_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_3_fu_764_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_7_fu_781_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal rhs_V_8_fu_792_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln728_7_fu_799_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln728_6_fu_788_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal rhs_V_9_fu_809_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal ret_V_4_fu_803_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln728_8_fu_816_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_27_fu_826_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_27_fu_826_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_27_fu_826_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_5_fu_820_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal rhs_V_10_fu_831_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln1192_4_fu_839_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal rhs_V_11_fu_845_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1192_3_fu_852_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal rhs_V_12_fu_858_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1192_4_fu_865_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ret_V_6_fu_871_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal rhs_V_14_fu_888_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1192_3_fu_895_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_15_fu_904_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1192_6_fu_899_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sub_ln1192_6_fu_899_p2 : signal is "no";
    signal sext_ln1192_4_fu_911_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln1192_6_fu_915_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_16_fu_924_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_fu_937_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln1192_fu_937_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln1192_7_fu_931_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln_fu_943_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln1192_7_fu_951_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_7_fu_957_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_22_fu_974_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1192_7_fu_981_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1192_9_fu_985_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_12_fu_990_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1015_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1015_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1035_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1043_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1118_16_fu_467_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1043_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1118_17_fu_479_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1043_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1118_19_fu_483_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1051_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1051_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1051_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mac_muladd_6s_12s_16s_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component myproject_am_addmul_6s_8s_6s_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component myproject_mul_mul_6s_13s_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component myproject_mul_mul_6s_12s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_mac_mul_sub_6s_12s_18ns_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component myproject_am_submul_8s_6s_6s_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    myproject_mac_muladd_6s_12s_16s_17_1_1_U1 : component myproject_mac_muladd_6s_12s_16s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 12,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        din0 => tmp_2_fu_193_p4,
        din1 => r_V_23_fu_261_p2,
        din2 => ret_V_fu_251_p2,
        dout => grp_fu_1007_p3);

    myproject_am_addmul_6s_8s_6s_14_1_1_U2 : component myproject_am_addmul_6s_8s_6s_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 6,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_1015_p0,
        din1 => grp_fu_1015_p1,
        din2 => tmp_2_fu_193_p4,
        dout => grp_fu_1015_p3);

    myproject_mul_mul_6s_13s_17_1_1_U3 : component myproject_mul_mul_6s_13s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 13,
        dout_WIDTH => 17)
    port map (
        din0 => tmp_1_fu_179_p4,
        din1 => r_V_26_fu_337_p2,
        dout => mul_ln728_1_fu_1023_p2);

    myproject_mul_mul_6s_12s_16_1_1_U4 : component myproject_mul_mul_6s_12s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 12,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_4_fu_311_p4,
        din1 => r_V_6_fu_347_p2,
        dout => mul_ln728_2_fu_1029_p2);

    myproject_mac_mul_sub_6s_12s_18ns_18_1_1_U5 : component myproject_mac_mul_sub_6s_12s_18ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 12,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => tmp_4_fu_311_p4,
        din1 => r_V_11_fu_437_p2,
        din2 => grp_fu_1035_p2,
        dout => grp_fu_1035_p3);

    myproject_am_addmul_6s_8s_6s_14_1_1_U6 : component myproject_am_addmul_6s_8s_6s_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 6,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_1043_p0,
        din1 => grp_fu_1043_p1,
        din2 => grp_fu_1043_p2,
        dout => grp_fu_1043_p3);

    myproject_am_submul_8s_6s_6s_14_1_1_U7 : component myproject_am_submul_8s_6s_6s_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_1051_p0,
        din1 => grp_fu_1051_p1,
        din2 => grp_fu_1051_p2,
        dout => grp_fu_1051_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv96_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln728_1_reg_1093 <= mul_ln728_1_fu_1023_p2;
                mul_ln728_2_reg_1098 <= mul_ln728_2_fu_1029_p2;
                mul_ln728_3_reg_1108 <= mul_ln728_3_fu_399_p2;
                r_V_23_reg_1073 <= r_V_23_fu_261_p2;
                    r_V_26_reg_1088(12 downto 1) <= r_V_26_fu_337_p2(12 downto 1);
                    r_V_29_reg_1113(9 downto 1) <= r_V_29_fu_417_p2(9 downto 1);
                r_V_31_reg_1129 <= r_V_31_fu_455_p2;
                r_V_32_reg_1134 <= r_V_32_fu_461_p2;
                    sext_ln1116_3_reg_1103(13 downto 2) <= sext_ln1116_3_fu_377_p1(13 downto 2);
                    sub_ln1192_8_reg_1144(17 downto 4) <= sub_ln1192_8_fu_585_p2(17 downto 4);
                tmp_1_reg_1060 <= x_V_in_sig(95 downto 90);
                tmp_2_reg_1066 <= x_V_in_sig(17 downto 12);
                tmp_5_reg_1118 <= x_V_in_sig(23 downto 18);
                trunc_ln708_4_reg_1149 <= ret_V_14_fu_640_p2(21 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln728_4_reg_1139 <= grp_fu_1043_p3;
                mul_ln728_reg_1083 <= grp_fu_1015_p3;
                ret_V_1_reg_1078 <= grp_fu_1007_p3;
                sub_ln1192_5_reg_1124 <= grp_fu_1035_p3;
            end if;
        end if;
    end process;
    r_V_26_reg_1088(0) <= '0';
    sext_ln1116_3_reg_1103(1 downto 0) <= "00";
    r_V_29_reg_1113(0) <= '0';
    sub_ln1192_8_reg_1144(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1192_1_fu_741_p2 <= std_logic_vector(unsigned(add_ln1192_fu_706_p2) + unsigned(sext_ln1192_1_fu_737_p1));
    add_ln1192_4_fu_839_p2 <= std_logic_vector(unsigned(ret_V_5_fu_820_p2) + unsigned(rhs_V_10_fu_831_p3));
    add_ln1192_6_fu_915_p2 <= std_logic_vector(unsigned(sub_ln1192_6_fu_899_p2) + unsigned(sext_ln1192_4_fu_911_p1));
    add_ln1192_7_fu_951_p2 <= std_logic_vector(unsigned(sub_ln1192_7_fu_931_p2) + unsigned(shl_ln_fu_943_p3));
    add_ln1192_fu_706_p2 <= std_logic_vector(unsigned(sub_ln1192_fu_689_p2) + unsigned(sext_ln1192_fu_702_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1015_p0 <= sext_ln700_2_fu_257_p1(6 - 1 downto 0);
    grp_fu_1015_p1 <= sext_ln1118_2_fu_287_p1(8 - 1 downto 0);
    grp_fu_1035_p2 <= (p_Val2_14_fu_229_p4 & ap_const_lv12_0);
    grp_fu_1043_p0 <= sext_ln1118_16_fu_467_p1(6 - 1 downto 0);
    grp_fu_1043_p1 <= sext_ln1118_17_fu_479_p1(8 - 1 downto 0);
    grp_fu_1043_p2 <= sext_ln1118_19_fu_483_p1(6 - 1 downto 0);
    grp_fu_1051_p0 <= sext_ln1118_17_fu_479_p1(8 - 1 downto 0);
    grp_fu_1051_p1 <= sext_ln1118_16_fu_467_p1(6 - 1 downto 0);
    grp_fu_1051_p2 <= sext_ln1118_19_fu_483_p1(6 - 1 downto 0);
    lhs_V_fu_591_p3 <= (r_V_28_fu_381_p2 & ap_const_lv12_0);
    mul_ln1192_fu_937_p1 <= tmp_5_reg_1118;
    mul_ln1192_fu_937_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv10_1D) * signed(mul_ln1192_fu_937_p1))), 10));
    mul_ln728_3_fu_399_p0 <= tmp_4_fu_311_p4;
    mul_ln728_3_fu_399_p1 <= r_V_28_fu_381_p2;
    mul_ln728_3_fu_399_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln728_3_fu_399_p0) * signed(mul_ln728_3_fu_399_p1))), 14));
    p_Val2_14_fu_229_p4 <= x_V_in_sig(89 downto 84);
    r_V_11_fu_437_p0 <= sext_ln1118_14_fu_433_p1(6 - 1 downto 0);
    r_V_11_fu_437_p1 <= sext_ln1118_5_fu_299_p1(6 - 1 downto 0);
    r_V_11_fu_437_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_11_fu_437_p0) * signed(r_V_11_fu_437_p1))), 12));
    r_V_22_fu_207_p0 <= sext_ln1117_1_fu_189_p1(6 - 1 downto 0);
    r_V_22_fu_207_p1 <= trunc_ln1117_fu_175_p1;
    r_V_22_fu_207_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_22_fu_207_p0) * signed(r_V_22_fu_207_p1))), 12));
    r_V_23_fu_261_p0 <= sext_ln1117_1_fu_189_p1(6 - 1 downto 0);
    r_V_23_fu_261_p1 <= sext_ln1117_1_fu_189_p1(6 - 1 downto 0);
    r_V_23_fu_261_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_23_fu_261_p0) * signed(r_V_23_fu_261_p1))), 12));
    r_V_24_fu_723_p0 <= tmp_2_reg_1066;
    r_V_24_fu_723_p1 <= r_V_2_fu_712_p3;
    r_V_24_fu_723_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_24_fu_723_p0) * signed(r_V_24_fu_723_p1))), 13));
    r_V_25_fu_321_p3 <= (p_Val2_14_fu_229_p4 & ap_const_lv1_0);
    r_V_26_fu_337_p0 <= p_Val2_14_fu_229_p4;
    r_V_26_fu_337_p1 <= r_V_25_fu_321_p3;
    r_V_26_fu_337_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_26_fu_337_p0) * signed(r_V_26_fu_337_p1))), 13));
    r_V_27_fu_826_p0 <= tmp_1_reg_1060;
    r_V_27_fu_826_p1 <= sext_ln1116_3_reg_1103(8 - 1 downto 0);
    r_V_27_fu_826_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_27_fu_826_p0) * signed(r_V_27_fu_826_p1))), 14));
    r_V_28_fu_381_p2 <= std_logic_vector(signed(sext_ln1118_11_fu_373_p1) - signed(sext_ln1118_3_fu_291_p1));
    r_V_29_fu_417_p2 <= std_logic_vector(signed(sext_ln1118_13_fu_413_p1) - signed(sext_ln1118_7_fu_329_p1));
    r_V_2_fu_712_p3 <= (tmp_2_reg_1066 & ap_const_lv1_0);
    r_V_31_fu_455_p0 <= sext_ln1117_1_fu_189_p1(6 - 1 downto 0);
    r_V_31_fu_455_p1 <= sext_ln1118_14_fu_433_p1(6 - 1 downto 0);
    r_V_31_fu_455_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_31_fu_455_p0) * signed(r_V_31_fu_455_p1))), 12));
    r_V_32_fu_461_p0 <= sext_ln700_fu_221_p1(6 - 1 downto 0);
    r_V_32_fu_461_p1 <= sext_ln1118_14_fu_433_p1(6 - 1 downto 0);
    r_V_32_fu_461_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_32_fu_461_p0) * signed(r_V_32_fu_461_p1))), 12));
    r_V_33_fu_487_p0 <= p_Val2_14_fu_229_p4;
    r_V_33_fu_487_p1 <= r_V_7_fu_365_p3;
    r_V_33_fu_487_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_33_fu_487_p0) * signed(r_V_33_fu_487_p1))), 14));
    r_V_34_fu_507_p0 <= sext_ln700_fu_221_p1(6 - 1 downto 0);
    r_V_34_fu_507_p1 <= sext_ln1118_5_fu_299_p1(6 - 1 downto 0);
    r_V_34_fu_507_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_34_fu_507_p0) * signed(r_V_34_fu_507_p1))), 12));
    r_V_35_fu_531_p0 <= tmp_4_fu_311_p4;
    r_V_35_fu_531_p1 <= sext_ln1118_5_fu_299_p1(6 - 1 downto 0);
    r_V_35_fu_531_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_35_fu_531_p0) * signed(r_V_35_fu_531_p1))), 12));
    r_V_36_fu_279_p3 <= (tmp_1_fu_179_p4 & ap_const_lv2_0);
    r_V_37_fu_471_p3 <= (tmp_5_fu_423_p4 & ap_const_lv2_0);
    r_V_38_fu_599_p2 <= std_logic_vector(signed(sext_ln1118_2_fu_287_p1) - signed(sext_ln700_2_fu_257_p1));
    r_V_6_fu_347_p0 <= sext_ln1118_5_fu_299_p1(6 - 1 downto 0);
    r_V_6_fu_347_p1 <= sext_ln1118_5_fu_299_p1(6 - 1 downto 0);
    r_V_6_fu_347_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_6_fu_347_p0) * signed(r_V_6_fu_347_p1))), 12));
    r_V_7_fu_365_p3 <= (p_Val2_14_fu_229_p4 & ap_const_lv2_0);
    ret_V_10_fu_549_p2 <= std_logic_vector(unsigned(ret_V_9_fu_525_p2) + unsigned(sext_ln728_12_fu_545_p1));
    ret_V_11_fu_567_p2 <= std_logic_vector(unsigned(ret_V_10_fu_549_p2) + unsigned(sext_ln728_13_fu_563_p1));
    ret_V_12_fu_990_p2 <= std_logic_vector(signed(ap_const_lv18_38000) + signed(sub_ln1192_9_fu_985_p2));
    ret_V_13_fu_621_p2 <= std_logic_vector(signed(sext_ln703_2_fu_605_p1) - signed(sext_ln728_14_fu_617_p1));
    ret_V_14_fu_640_p2 <= std_logic_vector(signed(ap_const_lv22_390000) + signed(sub_ln1192_10_fu_634_p2));
    ret_V_2_fu_676_p2 <= std_logic_vector(signed(sext_ln703_1_fu_662_p1) + signed(sext_ln728_2_fu_672_p1));
    ret_V_3_fu_764_p2 <= std_logic_vector(signed(ap_const_lv18_35000) + signed(sub_ln1192_1_fu_758_p2));
    ret_V_4_fu_803_p2 <= std_logic_vector(signed(sext_ln728_7_fu_799_p1) - signed(sext_ln728_6_fu_788_p1));
    ret_V_5_fu_820_p2 <= std_logic_vector(unsigned(ret_V_4_fu_803_p2) + unsigned(sext_ln728_8_fu_816_p1));
    ret_V_6_fu_871_p2 <= std_logic_vector(signed(ap_const_lv22_330000) + signed(sub_ln1192_4_fu_865_p2));
    ret_V_7_fu_957_p2 <= std_logic_vector(signed(ap_const_lv18_3B000) + signed(add_ln1192_7_fu_951_p2));
    ret_V_8_fu_501_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(rhs_V_17_fu_493_p3));
    ret_V_9_fu_525_p2 <= std_logic_vector(unsigned(ret_V_8_fu_501_p2) - unsigned(sext_ln728_11_fu_521_p1));
    ret_V_fu_251_p2 <= std_logic_vector(signed(sext_ln728_1_fu_247_p1) - signed(rhs_V_fu_213_p3));
    rhs_V_10_fu_831_p3 <= (r_V_27_fu_826_p2 & ap_const_lv8_0);
    rhs_V_11_fu_845_p3 <= (mul_ln728_3_reg_1108 & ap_const_lv8_0);
    rhs_V_12_fu_858_p3 <= (r_V_29_reg_1113 & ap_const_lv12_0);
    rhs_V_14_fu_888_p3 <= (r_V_31_reg_1129 & ap_const_lv4_0);
    rhs_V_15_fu_904_p3 <= (r_V_32_reg_1134 & ap_const_lv4_0);
    rhs_V_16_fu_924_p3 <= (mul_ln728_4_reg_1139 & ap_const_lv4_0);
    rhs_V_17_fu_493_p3 <= (r_V_33_fu_487_p2 & ap_const_lv4_0);
    rhs_V_18_fu_513_p3 <= (r_V_34_fu_507_p2 & ap_const_lv4_0);
    rhs_V_19_fu_537_p3 <= (r_V_35_fu_531_p2 & ap_const_lv4_0);
    rhs_V_1_fu_239_p3 <= (p_Val2_14_fu_229_p4 & ap_const_lv8_0);
    rhs_V_20_fu_555_p3 <= (p_Val2_14_fu_229_p4 & ap_const_lv9_0);
    rhs_V_21_fu_573_p3 <= (tmp_1_fu_179_p4 & ap_const_lv10_0);
    rhs_V_22_fu_974_p3 <= (tmp_5_reg_1118 & ap_const_lv10_0);
    rhs_V_23_fu_609_p3 <= (r_V_38_fu_599_p2 & ap_const_lv12_0);
    rhs_V_24_fu_627_p3 <= (grp_fu_1051_p3 & ap_const_lv8_0);
    rhs_V_2_fu_665_p3 <= (r_V_23_reg_1073 & ap_const_lv4_0);
    rhs_V_3_fu_682_p3 <= (mul_ln728_reg_1083 & ap_const_lv4_0);
    rhs_V_4_fu_695_p3 <= (tmp_1_reg_1060 & ap_const_lv11_0);
    rhs_V_5_fu_729_p3 <= (r_V_24_fu_723_p2 & ap_const_lv4_0);
    rhs_V_6_fu_747_p3 <= (tmp_2_reg_1066 & ap_const_lv11_0);
    rhs_V_7_fu_781_p3 <= (mul_ln728_1_reg_1093 & ap_const_lv4_0);
    rhs_V_8_fu_792_p3 <= (mul_ln728_2_reg_1098 & ap_const_lv4_0);
    rhs_V_9_fu_809_p3 <= (r_V_26_reg_1088 & ap_const_lv8_0);
    rhs_V_fu_213_p3 <= (r_V_22_fu_207_p2 & ap_const_lv4_0);
        sext_ln1116_3_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_7_fu_365_p3),14));

        sext_ln1117_1_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_179_p4),12));

        sext_ln1118_11_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_7_fu_365_p3),9));

        sext_ln1118_13_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_6_fu_405_p3),10));

        sext_ln1118_14_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_423_p4),12));

        sext_ln1118_16_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_423_p4),9));

        sext_ln1118_17_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_37_fu_471_p3),9));

        sext_ln1118_19_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_423_p4),14));

        sext_ln1118_2_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_36_fu_279_p3),9));

        sext_ln1118_3_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_14_fu_229_p4),9));

        sext_ln1118_5_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_14_fu_229_p4),12));

        sext_ln1118_7_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_25_fu_321_p3),10));

        sext_ln1192_1_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_5_fu_729_p3),18));

        sext_ln1192_2_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_6_fu_747_p3),18));

        sext_ln1192_3_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_14_fu_888_p3),18));

        sext_ln1192_4_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_15_fu_904_p3),18));

        sext_ln1192_6_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_21_fu_573_p3),18));

        sext_ln1192_7_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_22_fu_974_p3),18));

        sext_ln1192_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_4_fu_695_p3),18));

        sext_ln700_2_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_179_p4),9));

        sext_ln700_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_193_p4),12));

        sext_ln703_1_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_1_reg_1078),18));

        sext_ln703_2_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_591_p3),22));

        sext_ln728_11_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_18_fu_513_p3),18));

        sext_ln728_12_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_19_fu_537_p3),18));

        sext_ln728_13_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_20_fu_555_p3),18));

        sext_ln728_14_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_23_fu_609_p3),22));

        sext_ln728_1_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1_fu_239_p3),16));

        sext_ln728_2_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_2_fu_665_p3),18));

        sext_ln728_6_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_7_fu_781_p3),22));

        sext_ln728_7_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_8_fu_792_p3),22));

        sext_ln728_8_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_9_fu_809_p3),22));

    shl_ln1118_6_fu_405_p3 <= (p_Val2_14_fu_229_p4 & ap_const_lv3_0);
    shl_ln_fu_943_p3 <= (mul_ln1192_fu_937_p2 & ap_const_lv8_0);
    sub_ln1192_10_fu_634_p2 <= std_logic_vector(unsigned(ret_V_13_fu_621_p2) - unsigned(rhs_V_24_fu_627_p3));
    sub_ln1192_1_fu_758_p2 <= std_logic_vector(unsigned(add_ln1192_1_fu_741_p2) - unsigned(sext_ln1192_2_fu_754_p1));
    sub_ln1192_3_fu_852_p2 <= std_logic_vector(unsigned(add_ln1192_4_fu_839_p2) - unsigned(rhs_V_11_fu_845_p3));
    sub_ln1192_4_fu_865_p2 <= std_logic_vector(unsigned(sub_ln1192_3_fu_852_p2) - unsigned(rhs_V_12_fu_858_p3));
    sub_ln1192_6_fu_899_p2 <= std_logic_vector(signed(sub_ln1192_5_reg_1124) - signed(sext_ln1192_3_fu_895_p1));
    sub_ln1192_7_fu_931_p2 <= std_logic_vector(unsigned(add_ln1192_6_fu_915_p2) - unsigned(rhs_V_16_fu_924_p3));
    sub_ln1192_8_fu_585_p2 <= std_logic_vector(unsigned(ret_V_11_fu_567_p2) - unsigned(sext_ln1192_6_fu_581_p1));
    sub_ln1192_9_fu_985_p2 <= std_logic_vector(unsigned(sub_ln1192_8_reg_1144) - unsigned(sext_ln1192_7_fu_981_p1));
    sub_ln1192_fu_689_p2 <= std_logic_vector(unsigned(ret_V_2_fu_676_p2) - unsigned(rhs_V_3_fu_682_p3));
    tmp_1_fu_179_p4 <= x_V_in_sig(95 downto 90);
    tmp_2_fu_193_p4 <= x_V_in_sig(17 downto 12);
    tmp_4_fu_311_p4 <= x_V_in_sig(29 downto 24);
    tmp_5_fu_423_p4 <= x_V_in_sig(23 downto 18);
    trunc_ln1117_fu_175_p1 <= x_V_in_sig(6 - 1 downto 0);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, x_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V_ap_vld, x_V, x_V_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

    y_0_V <= ret_V_3_fu_764_p2(17 downto 12);

    y_0_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_V <= ret_V_6_fu_871_p2(21 downto 16);

    y_1_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= ret_V_7_fu_957_p2(17 downto 12);

    y_2_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_3_V <= ret_V_12_fu_990_p2(17 downto 12);

    y_3_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= trunc_ln708_4_reg_1149;

    y_4_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
