-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (79 downto 0);
    x_V_ap_vld : IN STD_LOGIC;
    y_0_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.463750,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=82,HLS_SYN_LUT=391,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv80_0 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_740 : STD_LOGIC_VECTOR (10 downto 0) := "11101000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_1C00 : STD_LOGIC_VECTOR (12 downto 0) := "1110000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_V_preg : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (79 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal tmp_fu_144_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_154_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1192_fu_182_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln1118_fu_174_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_fu_182_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1192_fu_182_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_fu_196_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1192_fu_204_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_fu_188_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_1_fu_214_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln1192_fu_208_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1192_1_fu_222_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1192_1_fu_226_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_fu_232_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_2_fu_164_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1192_1_fu_253_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1192_1_fu_253_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln1118_2_fu_249_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_1_fu_253_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_2_fu_267_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln1192_1_fu_259_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1192_2_fu_275_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1192_2_fu_279_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_V_1_fu_285_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_fu_302_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1192_2_fu_326_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln1118_3_fu_322_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_2_fu_326_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1192_2_fu_326_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1192_3_fu_312_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln1192_2_fu_332_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_346_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1192_3_fu_356_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1192_3_fu_318_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln1192_5_fu_364_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln1192_4_fu_370_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1192_4_fu_340_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1192_fu_378_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_2_fu_384_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1192_3_fu_401_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1192_3_fu_401_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1192_3_fu_401_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln1192_5_fu_407_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_3_fu_421_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1192_6_fu_415_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1192_4_fu_429_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_4_fu_439_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1192_7_fu_433_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1192_5_fu_447_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1192_8_fu_451_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_3_fu_457_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv80_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, x_V_ap_vld_in_sig)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1192_fu_378_p2 <= std_logic_vector(unsigned(shl_ln1192_4_fu_370_p3) + unsigned(sub_ln1192_4_fu_340_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, x_V_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1, x_V_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1192_1_fu_253_p0 <= sext_ln1118_fu_174_p1(5 - 1 downto 0);
    mul_ln1192_1_fu_253_p1 <= sext_ln1118_2_fu_249_p1(5 - 1 downto 0);
    mul_ln1192_1_fu_253_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_1_fu_253_p0) * signed(mul_ln1192_1_fu_253_p1))), 9));
    mul_ln1192_2_fu_326_p0 <= sext_ln1118_3_fu_322_p1(5 - 1 downto 0);
    mul_ln1192_2_fu_326_p1 <= sext_ln1118_3_fu_322_p1(5 - 1 downto 0);
    mul_ln1192_2_fu_326_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_2_fu_326_p0) * signed(mul_ln1192_2_fu_326_p1))), 9));
    mul_ln1192_3_fu_401_p0 <= sext_ln1118_2_fu_249_p1(5 - 1 downto 0);
    mul_ln1192_3_fu_401_p1 <= sext_ln1118_2_fu_249_p1(5 - 1 downto 0);
    mul_ln1192_3_fu_401_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_3_fu_401_p0) * signed(mul_ln1192_3_fu_401_p1))), 9));
    mul_ln1192_fu_182_p0 <= sext_ln1118_fu_174_p1(5 - 1 downto 0);
    mul_ln1192_fu_182_p1 <= tmp_1_fu_154_p4;
    mul_ln1192_fu_182_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_fu_182_p0) * signed(mul_ln1192_fu_182_p1))), 9));
    p_Val2_2_fu_164_p4 <= x_V_in_sig(74 downto 70);
    ret_V_1_fu_285_p2 <= std_logic_vector(unsigned(sub_ln1192_2_fu_279_p2) + unsigned(ap_const_lv13_1C00));
    ret_V_2_fu_384_p2 <= std_logic_vector(unsigned(add_ln1192_fu_378_p2) + unsigned(ap_const_lv11_780));
    ret_V_3_fu_457_p2 <= std_logic_vector(unsigned(sub_ln1192_8_fu_451_p2) + unsigned(ap_const_lv11_780));
    ret_V_fu_232_p2 <= std_logic_vector(unsigned(sub_ln1192_1_fu_226_p2) + unsigned(ap_const_lv11_740));
    rhs_V_1_fu_214_p3 <= (tmp_1_fu_154_p4 & ap_const_lv5_0);
    rhs_V_2_fu_267_p3 <= (p_Val2_2_fu_164_p4 & ap_const_lv6_0);
    rhs_V_3_fu_421_p3 <= (tmp_fu_144_p4 & ap_const_lv4_0);
    rhs_V_4_fu_439_p3 <= (tmp_3_fu_302_p4 & ap_const_lv4_0);
    rhs_V_fu_196_p3 <= (tmp_fu_144_p4 & ap_const_lv5_0);
        sext_ln1118_2_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_fu_164_p4),9));

        sext_ln1118_3_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_302_p4),9));

        sext_ln1118_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_144_p4),9));

        sext_ln1192_1_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1_fu_214_p3),11));

        sext_ln1192_2_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_2_fu_267_p3),13));

        sext_ln1192_3_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_302_p4),7));

        sext_ln1192_4_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_3_fu_421_p3),11));

        sext_ln1192_5_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_4_fu_439_p3),11));

        sext_ln1192_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_196_p3),11));

    shl_ln1192_1_fu_259_p3 <= (mul_ln1192_1_fu_253_p2 & ap_const_lv4_0);
    shl_ln1192_2_fu_332_p3 <= (mul_ln1192_2_fu_326_p2 & ap_const_lv2_0);
    shl_ln1192_3_fu_356_p3 <= (tmp_6_fu_346_p4 & ap_const_lv3_0);
    shl_ln1192_4_fu_370_p3 <= (sub_ln1192_5_fu_364_p2 & ap_const_lv4_0);
    shl_ln1192_5_fu_407_p3 <= (mul_ln1192_3_fu_401_p2 & ap_const_lv2_0);
    shl_ln_fu_188_p3 <= (mul_ln1192_fu_182_p2 & ap_const_lv2_0);
    sub_ln1192_1_fu_226_p2 <= std_logic_vector(unsigned(sub_ln1192_fu_208_p2) - unsigned(sext_ln1192_1_fu_222_p1));
    sub_ln1192_2_fu_279_p2 <= std_logic_vector(unsigned(shl_ln1192_1_fu_259_p3) - unsigned(sext_ln1192_2_fu_275_p1));
    sub_ln1192_3_fu_312_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(rhs_V_2_fu_267_p3));
    sub_ln1192_4_fu_340_p2 <= std_logic_vector(unsigned(sub_ln1192_3_fu_312_p2) - unsigned(shl_ln1192_2_fu_332_p3));
    sub_ln1192_5_fu_364_p2 <= std_logic_vector(unsigned(shl_ln1192_3_fu_356_p3) - unsigned(sext_ln1192_3_fu_318_p1));
    sub_ln1192_6_fu_415_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(shl_ln1192_5_fu_407_p3));
    sub_ln1192_7_fu_433_p2 <= std_logic_vector(unsigned(sub_ln1192_6_fu_415_p2) - unsigned(sext_ln1192_4_fu_429_p1));
    sub_ln1192_8_fu_451_p2 <= std_logic_vector(unsigned(sub_ln1192_7_fu_433_p2) - unsigned(sext_ln1192_5_fu_447_p1));
    sub_ln1192_fu_208_p2 <= std_logic_vector(signed(sext_ln1192_fu_204_p1) - signed(shl_ln_fu_188_p3));
    tmp_1_fu_154_p4 <= x_V_in_sig(14 downto 10);
    tmp_3_fu_302_p4 <= x_V_in_sig(19 downto 15);
    tmp_6_fu_346_p4 <= x_V_in_sig(18 downto 15);
    tmp_fu_144_p4 <= x_V_in_sig(79 downto 75);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, x_V_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V, x_V_preg, x_V_ap_vld)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

    y_0_V <= ret_V_fu_232_p2(10 downto 6);

    y_0_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, x_V_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_V <= ret_V_1_fu_285_p2(12 downto 8);

    y_1_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, x_V_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= ret_V_2_fu_384_p2(10 downto 6);

    y_2_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, x_V_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_3_V <= ret_V_3_fu_457_p2(10 downto 6);

    y_3_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, x_V_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= ap_const_lv5_1E;

    y_4_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, x_V_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
