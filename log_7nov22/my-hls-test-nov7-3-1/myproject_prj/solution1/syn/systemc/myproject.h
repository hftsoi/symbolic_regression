// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _myproject_HH_
#define _myproject_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct myproject : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<48> > x_V;
    sc_in< sc_logic > x_V_ap_vld;
    sc_out< sc_lv<3> > y_0_V;
    sc_out< sc_logic > y_0_V_ap_vld;
    sc_out< sc_lv<3> > y_1_V;
    sc_out< sc_logic > y_1_V_ap_vld;
    sc_out< sc_lv<3> > y_2_V;
    sc_out< sc_logic > y_2_V_ap_vld;
    sc_out< sc_lv<3> > y_3_V;
    sc_out< sc_logic > y_3_V_ap_vld;
    sc_out< sc_lv<3> > y_4_V;
    sc_out< sc_logic > y_4_V_ap_vld;


    // Module declarations
    myproject(sc_module_name name);
    SC_HAS_PROCESS(myproject);

    ~myproject();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<48> > x_V_preg;
    sc_signal< sc_lv<48> > x_V_in_sig;
    sc_signal< sc_logic > x_V_ap_vld_preg;
    sc_signal< sc_logic > x_V_ap_vld_in_sig;
    sc_signal< sc_logic > x_V_blk_n;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<3> > tmp_1_fu_144_p4;
    sc_signal< sc_lv<3> > tmp_fu_134_p4;
    sc_signal< sc_lv<3> > r_V_fu_172_p0;
    sc_signal< sc_lv<6> > sext_ln1116_fu_168_p1;
    sc_signal< sc_lv<3> > r_V_fu_172_p1;
    sc_signal< sc_lv<6> > r_V_fu_172_p2;
    sc_signal< sc_lv<8> > rhs_V_fu_178_p3;
    sc_signal< sc_lv<8> > ret_V_fu_186_p2;
    sc_signal< sc_lv<8> > rhs_V_1_fu_196_p3;
    sc_signal< sc_lv<9> > sext_ln703_fu_192_p1;
    sc_signal< sc_lv<9> > sext_ln728_fu_204_p1;
    sc_signal< sc_lv<8> > rhs_V_2_fu_214_p3;
    sc_signal< sc_lv<9> > ret_V_1_fu_208_p2;
    sc_signal< sc_lv<9> > sext_ln1192_fu_222_p1;
    sc_signal< sc_lv<9> > sub_ln1192_fu_226_p2;
    sc_signal< sc_lv<9> > ret_V_2_fu_232_p2;
    sc_signal< sc_lv<3> > p_Val2_6_fu_158_p4;
    sc_signal< sc_lv<3> > r_V_1_fu_253_p0;
    sc_signal< sc_lv<3> > r_V_1_fu_253_p1;
    sc_signal< sc_lv<6> > sext_ln1116_1_fu_249_p1;
    sc_signal< sc_lv<6> > r_V_1_fu_253_p2;
    sc_signal< sc_lv<10> > rhs_V_10_fu_259_p3;
    sc_signal< sc_lv<9> > rhs_V_4_fu_271_p3;
    sc_signal< sc_lv<11> > sext_ln1192_1_fu_267_p1;
    sc_signal< sc_lv<11> > sext_ln1192_2_fu_279_p1;
    sc_signal< sc_lv<11> > sub_ln1192_1_fu_283_p2;
    sc_signal< sc_lv<3> > trunc_ln708_4_fu_289_p4;
    sc_signal< sc_lv<3> > tmp_3_fu_306_p4;
    sc_signal< sc_lv<3> > r_V_2_fu_330_p0;
    sc_signal< sc_lv<6> > sext_ln700_fu_316_p1;
    sc_signal< sc_lv<3> > r_V_2_fu_330_p1;
    sc_signal< sc_lv<6> > r_V_2_fu_330_p2;
    sc_signal< sc_lv<8> > rhs_V_5_fu_336_p3;
    sc_signal< sc_lv<9> > sub_ln1192_2_fu_320_p2;
    sc_signal< sc_lv<9> > sext_ln1192_3_fu_344_p1;
    sc_signal< sc_lv<4> > sext_ln1118_fu_326_p1;
    sc_signal< sc_lv<4> > r_V_3_fu_354_p2;
    sc_signal< sc_lv<8> > rhs_V_6_fu_360_p3;
    sc_signal< sc_lv<9> > sub_ln1192_3_fu_348_p2;
    sc_signal< sc_lv<9> > sext_ln1192_4_fu_368_p1;
    sc_signal< sc_lv<9> > add_ln1192_fu_372_p2;
    sc_signal< sc_lv<9> > ret_V_3_fu_378_p2;
    sc_signal< sc_lv<3> > r_V_4_fu_395_p0;
    sc_signal< sc_lv<3> > r_V_4_fu_395_p1;
    sc_signal< sc_lv<6> > r_V_4_fu_395_p2;
    sc_signal< sc_lv<8> > rhs_V_7_fu_401_p3;
    sc_signal< sc_lv<7> > rhs_V_8_fu_415_p3;
    sc_signal< sc_lv<8> > ret_V_4_fu_409_p2;
    sc_signal< sc_lv<8> > sext_ln728_1_fu_423_p1;
    sc_signal< sc_lv<8> > ret_V_5_fu_427_p2;
    sc_signal< sc_lv<7> > rhs_V_9_fu_437_p3;
    sc_signal< sc_lv<9> > sext_ln1192_5_fu_433_p1;
    sc_signal< sc_lv<9> > sext_ln1192_6_fu_445_p1;
    sc_signal< sc_lv<9> > sub_ln1192_4_fu_449_p2;
    sc_signal< sc_lv<9> > ret_V_6_fu_455_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<48> ap_const_lv48_0;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<32> ap_const_lv32_2D;
    static const sc_lv<32> ap_const_lv32_2F;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_2A;
    static const sc_lv<32> ap_const_lv32_2C;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<9> ap_const_lv9_140;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<9> ap_const_lv9_180;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln1192_fu_372_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_p_Val2_6_fu_158_p4();
    void thread_r_V_1_fu_253_p0();
    void thread_r_V_1_fu_253_p1();
    void thread_r_V_1_fu_253_p2();
    void thread_r_V_2_fu_330_p0();
    void thread_r_V_2_fu_330_p1();
    void thread_r_V_2_fu_330_p2();
    void thread_r_V_3_fu_354_p2();
    void thread_r_V_4_fu_395_p0();
    void thread_r_V_4_fu_395_p1();
    void thread_r_V_4_fu_395_p2();
    void thread_r_V_fu_172_p0();
    void thread_r_V_fu_172_p1();
    void thread_r_V_fu_172_p2();
    void thread_ret_V_1_fu_208_p2();
    void thread_ret_V_2_fu_232_p2();
    void thread_ret_V_3_fu_378_p2();
    void thread_ret_V_4_fu_409_p2();
    void thread_ret_V_5_fu_427_p2();
    void thread_ret_V_6_fu_455_p2();
    void thread_ret_V_fu_186_p2();
    void thread_rhs_V_10_fu_259_p3();
    void thread_rhs_V_1_fu_196_p3();
    void thread_rhs_V_2_fu_214_p3();
    void thread_rhs_V_4_fu_271_p3();
    void thread_rhs_V_5_fu_336_p3();
    void thread_rhs_V_6_fu_360_p3();
    void thread_rhs_V_7_fu_401_p3();
    void thread_rhs_V_8_fu_415_p3();
    void thread_rhs_V_9_fu_437_p3();
    void thread_rhs_V_fu_178_p3();
    void thread_sext_ln1116_1_fu_249_p1();
    void thread_sext_ln1116_fu_168_p1();
    void thread_sext_ln1118_fu_326_p1();
    void thread_sext_ln1192_1_fu_267_p1();
    void thread_sext_ln1192_2_fu_279_p1();
    void thread_sext_ln1192_3_fu_344_p1();
    void thread_sext_ln1192_4_fu_368_p1();
    void thread_sext_ln1192_5_fu_433_p1();
    void thread_sext_ln1192_6_fu_445_p1();
    void thread_sext_ln1192_fu_222_p1();
    void thread_sext_ln700_fu_316_p1();
    void thread_sext_ln703_fu_192_p1();
    void thread_sext_ln728_1_fu_423_p1();
    void thread_sext_ln728_fu_204_p1();
    void thread_sub_ln1192_1_fu_283_p2();
    void thread_sub_ln1192_2_fu_320_p2();
    void thread_sub_ln1192_3_fu_348_p2();
    void thread_sub_ln1192_4_fu_449_p2();
    void thread_sub_ln1192_fu_226_p2();
    void thread_tmp_1_fu_144_p4();
    void thread_tmp_3_fu_306_p4();
    void thread_tmp_fu_134_p4();
    void thread_trunc_ln708_4_fu_289_p4();
    void thread_x_V_ap_vld_in_sig();
    void thread_x_V_blk_n();
    void thread_x_V_in_sig();
    void thread_y_0_V();
    void thread_y_0_V_ap_vld();
    void thread_y_1_V();
    void thread_y_1_V_ap_vld();
    void thread_y_2_V();
    void thread_y_2_V_ap_vld();
    void thread_y_3_V();
    void thread_y_3_V_ap_vld();
    void thread_y_4_V();
    void thread_y_4_V_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
