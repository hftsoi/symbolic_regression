-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (127 downto 0);
    y_0_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.258000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=21,HLS_SYN_FF=1004,HLS_SYN_LUT=2165,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv28_E600000 : STD_LOGIC_VECTOR (27 downto 0) := "1110011000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv13_B : STD_LOGIC_VECTOR (12 downto 0) := "0000000001011";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv23_788000 : STD_LOGIC_VECTOR (22 downto 0) := "11110001000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv28_F300000 : STD_LOGIC_VECTOR (27 downto 0) := "1111001100000000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv23_750000 : STD_LOGIC_VECTOR (22 downto 0) := "11101010000000000000000";
    constant ap_const_lv13_3A : STD_LOGIC_VECTOR (12 downto 0) := "0000000111010";
    constant ap_const_lv23_7B0000 : STD_LOGIC_VECTOR (22 downto 0) := "11110110000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_preg : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (127 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_1_fu_187_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1446 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1446_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1446_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1117_1_fu_197_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1117_1_reg_1461 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_201_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_1466 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_1466_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_1466_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1192_1_fu_211_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1192_1_reg_1476 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1192_1_reg_1476_pp0_iter1_reg : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1118_2_fu_245_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_2_reg_1482 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_fu_267_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ret_V_reg_1487 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Val2_11_fu_273_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_11_reg_1492 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1118_13_fu_283_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_13_reg_1506 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_1512 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_1512_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1521 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1521_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_fu_307_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_reg_1533 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1192_10_fu_1296_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1192_10_reg_1538 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_4_fu_377_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_4_reg_1543 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_38_fu_388_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_38_reg_1548 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1302_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1192_reg_1553 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_6_fu_397_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_6_reg_1558 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1192_3_fu_1309_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1192_3_reg_1563 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1116_5_fu_436_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1116_5_reg_1568 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln728_fu_1315_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln728_reg_1573 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_41_fu_453_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_41_reg_1578 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln728_1_fu_1321_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln728_1_reg_1583 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln728_2_fu_1327_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln728_2_reg_1588 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln728_3_fu_1333_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln728_3_reg_1593 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1339_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_4_reg_1598 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1347_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_5_reg_1603 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_43_fu_503_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_43_reg_1608 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1118_24_fu_509_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_24_reg_1613 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1355_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1192_7_reg_1618 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1192_12_fu_566_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1192_12_reg_1623 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_18_fu_577_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal rhs_V_18_reg_1628 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln728_6_fu_1378_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln728_6_reg_1633 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_9_fu_623_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_9_reg_1638 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln728_7_fu_1384_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln728_7_reg_1643 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln728_8_fu_1390_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln728_8_reg_1648 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1192_1_fu_704_p2 : STD_LOGIC_VECTOR (22 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sub_ln1192_1_fu_704_p2 : signal is "no";
    signal sub_ln1192_1_reg_1653 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_39_fu_727_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_39_reg_1658 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_1_reg_1663 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1192_9_fu_891_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1192_9_reg_1668 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1192_15_fu_897_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1192_15_reg_1673 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1192_7_fu_1431_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_7_reg_1678 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_44_fu_913_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_44_reg_1683 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_3_reg_1688 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln708_4_reg_1693 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln1117_fu_183_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_fu_215_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_35_fu_227_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_35_fu_227_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_35_fu_227_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_36_fu_249_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1116_1_fu_241_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_36_fu_249_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_36_fu_249_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_1_fu_255_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln728_fu_263_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal rhs_V_fu_233_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1118_fu_307_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_fu_307_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_25_fu_313_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_25_fu_313_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_25_fu_313_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_11_fu_335_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_6_fu_346_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1118_4_fu_332_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_37_fu_350_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_2_fu_359_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln703_fu_356_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln728_1_fu_367_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_38_fu_388_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_38_fu_388_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_6_fu_397_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1117_fu_326_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_6_fu_397_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_12_fu_415_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1118_15_fu_405_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_12_fu_415_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_12_fu_415_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_13_fu_425_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_14_fu_440_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_14_fu_440_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_14_fu_440_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_42_fu_463_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_42_fu_463_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_42_fu_463_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_26_fu_478_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln1118_6_fu_492_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_23_fu_499_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1118_5_fu_342_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_20_fu_515_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_20_fu_515_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_20_fu_515_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1192_11_fu_1371_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1363_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1192_6_fu_542_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_16_fu_554_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1192_12_fu_549_p2 : STD_LOGIC_VECTOR (22 downto 0);
    attribute use_dsp48 of sub_ln1192_12_fu_549_p2 : signal is "no";
    signal sext_ln1192_20_fu_562_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_46_fu_572_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_46_fu_572_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_46_fu_572_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_7_fu_589_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1118_21_fu_485_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_3_fu_329_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_8_fu_595_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_49_fu_601_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal rhs_V_24_fu_611_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln703_1_fu_607_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln728_6_fu_619_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_31_fu_629_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_31_fu_629_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_31_fu_629_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_33_fu_642_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_33_fu_642_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_33_fu_642_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_3_fu_667_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1192_3_fu_674_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_47_fu_686_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1404_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1396_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln_fu_697_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_8_fu_712_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_39_fu_727_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1118_1_fu_655_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_39_fu_727_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_7_fu_740_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln1192_1_fu_733_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln1192_3_fu_747_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal rhs_V_8_fu_753_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal rhs_V_9_fu_766_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1192_5_fu_760_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1192_9_fu_773_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal rhs_V_10_fu_783_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln1192_4_fu_777_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1192_10_fu_790_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln1192_6_fu_794_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln1192_2_fu_800_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln1192_7_fu_807_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln1192_3_fu_816_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln1192_5_fu_823_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal rhs_V_11_fu_829_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln1192_6_fu_836_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ret_V_3_fu_842_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln1118_7_fu_861_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1413_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_13_fu_872_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1422_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1192_8_fu_879_p2 : STD_LOGIC_VECTOR (22 downto 0);
    attribute use_dsp48 of sub_ln1192_8_fu_879_p2 : signal is "no";
    signal rhs_V_14_fu_884_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_23_fu_903_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_23_fu_903_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_44_fu_913_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_44_fu_913_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_45_fu_918_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_45_fu_918_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_45_fu_918_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_17_fu_923_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1192_21_fu_931_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1192_13_fu_935_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1192_22_fu_940_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1192_13_fu_943_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_19_fu_949_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_20_fu_962_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln1192_14_fu_956_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1192_23_fu_969_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_21_fu_979_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln1192_15_fu_973_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1192_24_fu_986_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_48_fu_996_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_22_fu_1007_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1192_14_fu_990_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1192_25_fu_1014_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_23_fu_1024_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1192_15_fu_1018_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1192_26_fu_1031_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1192_16_fu_1035_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_6_fu_1041_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_25_fu_1064_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal lhs_V_fu_1057_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1192_27_fu_1071_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1118_8_fu_693_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln700_fu_658_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_50_fu_1081_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal rhs_V_26_fu_1087_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln1192_18_fu_1075_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1192_28_fu_1095_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal rhs_V_27_fu_1105_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln1192_17_fu_1099_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1192_29_fu_1112_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1437_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln1192_19_fu_1116_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln1192_7_fu_1122_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln1192_18_fu_1129_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ret_V_10_fu_1135_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal rhs_V_4_fu_1151_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1192_6_fu_1158_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1192_2_fu_1162_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_5_fu_1170_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1118_5_fu_1183_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_9_fu_1167_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1118_12_fu_1190_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_40_fu_1194_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1192_3_fu_1177_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_6_fu_1200_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1192_2_fu_1208_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_2_fu_1214_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1192_4_fu_1231_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_15_fu_1243_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1192_9_fu_1238_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1192_17_fu_1250_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1192_8_fu_1260_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1192_8_fu_1260_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1192_10_fu_1254_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1192_5_fu_1265_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1192_10_fu_1273_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_4_fu_1279_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1302_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1302_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln728_fu_1315_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln728_3_fu_450_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln728_1_fu_1321_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln728_2_fu_1327_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_18_fu_468_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln728_3_fu_1333_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1339_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1339_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1347_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1347_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln728_4_fu_489_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1355_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1355_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1192_11_fu_1371_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln728_6_fu_1378_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln728_7_fu_1384_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1118_34_fu_639_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln728_8_fu_1390_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1396_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1396_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1404_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1404_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1413_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1192_13_fu_858_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1422_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1192_7_fu_1431_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1437_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mul_mul_8s_16s_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component myproject_mac_muladd_8s_17s_23ns_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        din2 : IN STD_LOGIC_VECTOR (22 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component myproject_mul_mul_8s_18s_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component myproject_mul_mul_8s_17s_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component myproject_mul_mul_8s_11s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component myproject_mul_mul_8s_16s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_am_addmul_8s_11s_8s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component myproject_am_submul_11s_9s_8s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component myproject_mac_mul_sub_8s_17s_23ns_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        din2 : IN STD_LOGIC_VECTOR (22 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component myproject_mac_mulsub_8s_16s_23s_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (22 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component myproject_mac_mulsub_8s_16s_23ns_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (22 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component myproject_am_addmul_11s_9s_8s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component myproject_am_submul_10s_8s_8s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component myproject_mul_mul_8s_13s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component myproject_am_submul_11s_8s_8s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    myproject_mul_mul_8s_16s_23_1_1_U1 : component myproject_mul_mul_8s_16s_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 23)
    port map (
        din0 => tmp_2_fu_201_p4,
        din1 => r_V_25_fu_313_p2,
        dout => mul_ln1192_10_fu_1296_p2);

    myproject_mac_muladd_8s_17s_23ns_23_1_1_U2 : component myproject_mac_muladd_8s_17s_23ns_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 17,
        din2_WIDTH => 23,
        dout_WIDTH => 23)
    port map (
        din0 => grp_fu_1302_p0,
        din1 => r_V_38_fu_388_p2,
        din2 => grp_fu_1302_p2,
        dout => grp_fu_1302_p3);

    myproject_mul_mul_8s_18s_23_1_1_U3 : component myproject_mul_mul_8s_18s_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 18,
        dout_WIDTH => 23)
    port map (
        din0 => tmp_1_reg_1446,
        din1 => r_V_12_fu_415_p2,
        dout => mul_ln1192_3_fu_1309_p2);

    myproject_mul_mul_8s_17s_23_1_1_U4 : component myproject_mul_mul_8s_17s_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 17,
        dout_WIDTH => 23)
    port map (
        din0 => mul_ln728_fu_1315_p0,
        din1 => r_V_14_fu_440_p2,
        dout => mul_ln728_fu_1315_p2);

    myproject_mul_mul_8s_11s_18_1_1_U5 : component myproject_mul_mul_8s_11s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln728_1_fu_1321_p0,
        din1 => r_V_41_fu_453_p2,
        dout => mul_ln728_1_fu_1321_p2);

    myproject_mul_mul_8s_16s_22_1_1_U6 : component myproject_mul_mul_8s_16s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 22)
    port map (
        din0 => tmp_1_reg_1446,
        din1 => mul_ln728_2_fu_1327_p1,
        dout => mul_ln728_2_fu_1327_p2);

    myproject_mul_mul_8s_16s_22_1_1_U7 : component myproject_mul_mul_8s_16s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 22)
    port map (
        din0 => tmp_4_reg_1512,
        din1 => mul_ln728_3_fu_1333_p1,
        dout => mul_ln728_3_fu_1333_p2);

    myproject_am_addmul_8s_11s_8s_18_1_1_U8 : component myproject_am_addmul_8s_11s_8s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        din2_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_1339_p0,
        din1 => grp_fu_1339_p1,
        din2 => tmp_1_reg_1446,
        dout => grp_fu_1339_p3);

    myproject_am_submul_11s_9s_8s_18_1_1_U9 : component myproject_am_submul_11s_9s_8s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 9,
        din2_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_1347_p0,
        din1 => r_V_13_fu_425_p3,
        din2 => grp_fu_1347_p2,
        dout => grp_fu_1347_p3);

    myproject_mac_mul_sub_8s_17s_23ns_23_1_1_U10 : component myproject_mac_mul_sub_8s_17s_23ns_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 17,
        din2_WIDTH => 23,
        dout_WIDTH => 23)
    port map (
        din0 => grp_fu_1355_p0,
        din1 => r_V_20_fu_515_p2,
        din2 => grp_fu_1355_p2,
        dout => grp_fu_1355_p3);

    myproject_mac_mulsub_8s_16s_23s_23_1_1_U11 : component myproject_mac_mulsub_8s_16s_23s_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 23,
        dout_WIDTH => 23)
    port map (
        din0 => p_Val2_11_reg_1492,
        din1 => mul_ln1118_reg_1533,
        din2 => mul_ln1192_10_reg_1538,
        dout => grp_fu_1363_p3);

    myproject_mul_mul_8s_11s_18_1_1_U12 : component myproject_mul_mul_8s_11s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln1192_11_fu_1371_p0,
        din1 => r_V_26_fu_478_p3,
        dout => mul_ln1192_11_fu_1371_p2);

    myproject_mul_mul_8s_11s_18_1_1_U13 : component myproject_mul_mul_8s_11s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln728_6_fu_1378_p0,
        din1 => r_V_37_fu_350_p2,
        dout => mul_ln728_6_fu_1378_p2);

    myproject_mul_mul_8s_16s_22_1_1_U14 : component myproject_mul_mul_8s_16s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 22)
    port map (
        din0 => mul_ln728_7_fu_1384_p0,
        din1 => r_V_31_fu_629_p2,
        dout => mul_ln728_7_fu_1384_p2);

    myproject_mul_mul_8s_16s_22_1_1_U15 : component myproject_mul_mul_8s_16s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 22)
    port map (
        din0 => mul_ln728_8_fu_1390_p0,
        din1 => r_V_33_fu_642_p2,
        dout => mul_ln728_8_fu_1390_p2);

    myproject_mac_mulsub_8s_16s_23ns_23_1_1_U16 : component myproject_mac_mulsub_8s_16s_23ns_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 23,
        dout_WIDTH => 23)
    port map (
        din0 => grp_fu_1396_p0,
        din1 => r_V_6_reg_1558,
        din2 => grp_fu_1396_p2,
        dout => grp_fu_1396_p3);

    myproject_am_addmul_11s_9s_8s_18_1_1_U17 : component myproject_am_addmul_11s_9s_8s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 9,
        din2_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_1404_p0,
        din1 => r_V_4_reg_1543,
        din2 => grp_fu_1404_p2,
        dout => grp_fu_1404_p3);

    myproject_am_submul_10s_8s_8s_18_1_1_U18 : component myproject_am_submul_10s_8s_8s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => shl_ln1118_7_fu_861_p3,
        din1 => tmp_1_reg_1446_pp0_iter1_reg,
        din2 => grp_fu_1413_p2,
        dout => grp_fu_1413_p3);

    myproject_am_submul_10s_8s_8s_18_1_1_U19 : component myproject_am_submul_10s_8s_8s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => r_V_8_fu_712_p3,
        din1 => tmp_2_reg_1466_pp0_iter1_reg,
        din2 => grp_fu_1422_p2,
        dout => grp_fu_1422_p3);

    myproject_mul_mul_8s_13s_18_1_1_U20 : component myproject_mul_mul_8s_13s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 13,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln1192_7_fu_1431_p0,
        din1 => r_V_23_fu_903_p2,
        dout => mul_ln1192_7_fu_1431_p2);

    myproject_am_submul_11s_8s_8s_18_1_1_U21 : component myproject_am_submul_11s_8s_8s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => r_V_48_fu_996_p3,
        din1 => tmp_5_reg_1521_pp0_iter1_reg,
        din2 => grp_fu_1437_p2,
        dout => grp_fu_1437_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv128_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1192_12_reg_1623 <= add_ln1192_12_fu_566_p2;
                mul_ln1118_reg_1533 <= mul_ln1118_fu_307_p2;
                mul_ln1192_10_reg_1538 <= mul_ln1192_10_fu_1296_p2;
                mul_ln1192_3_reg_1563 <= mul_ln1192_3_fu_1309_p2;
                mul_ln728_1_reg_1583 <= mul_ln728_1_fu_1321_p2;
                mul_ln728_2_reg_1588 <= mul_ln728_2_fu_1327_p2;
                mul_ln728_3_reg_1593 <= mul_ln728_3_fu_1333_p2;
                mul_ln728_6_reg_1633 <= mul_ln728_6_fu_1378_p2;
                mul_ln728_7_reg_1643 <= mul_ln728_7_fu_1384_p2;
                mul_ln728_8_reg_1648 <= mul_ln728_8_fu_1390_p2;
                mul_ln728_reg_1573 <= mul_ln728_fu_1315_p2;
                p_Val2_11_reg_1492 <= x_V_in_sig(119 downto 112);
                    r_V_38_reg_1548(16 downto 1) <= r_V_38_fu_388_p2(16 downto 1);
                r_V_41_reg_1578 <= r_V_41_fu_453_p2;
                    r_V_43_reg_1608(12 downto 2) <= r_V_43_fu_503_p2(12 downto 2);
                    r_V_4_reg_1543(8 downto 1) <= r_V_4_fu_377_p3(8 downto 1);
                r_V_6_reg_1558 <= r_V_6_fu_397_p2;
                    ret_V_9_reg_1638(22 downto 5) <= ret_V_9_fu_623_p2(22 downto 5);
                    ret_V_reg_1487(21 downto 5) <= ret_V_fu_267_p2(21 downto 5);
                    rhs_V_18_reg_1628(20 downto 5) <= rhs_V_18_fu_577_p3(20 downto 5);
                    sext_ln1116_5_reg_1568(16 downto 1) <= sext_ln1116_5_fu_436_p1(16 downto 1);
                sext_ln1117_1_reg_1461 <= sext_ln1117_1_fu_197_p1;
                sext_ln1118_13_reg_1506 <= sext_ln1118_13_fu_283_p1;
                sext_ln1118_24_reg_1613 <= sext_ln1118_24_fu_509_p1;
                sext_ln1118_2_reg_1482 <= sext_ln1118_2_fu_245_p1;
                sext_ln1192_1_reg_1476 <= sext_ln1192_1_fu_211_p1;
                sext_ln1192_1_reg_1476_pp0_iter1_reg <= sext_ln1192_1_reg_1476;
                tmp_1_reg_1446 <= x_V_in_sig(127 downto 120);
                tmp_1_reg_1446_pp0_iter1_reg <= tmp_1_reg_1446;
                tmp_2_reg_1466 <= x_V_in_sig(23 downto 16);
                tmp_2_reg_1466_pp0_iter1_reg <= tmp_2_reg_1466;
                tmp_4_reg_1512 <= x_V_in_sig(39 downto 32);
                tmp_4_reg_1512_pp0_iter1_reg <= tmp_4_reg_1512;
                tmp_5_reg_1521 <= x_V_in_sig(31 downto 24);
                tmp_5_reg_1521_pp0_iter1_reg <= tmp_5_reg_1521;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln1192_9_reg_1668 <= add_ln1192_9_fu_891_p2;
                mul_ln1192_7_reg_1678 <= mul_ln1192_7_fu_1431_p2;
                    r_V_39_reg_1658(17 downto 2) <= r_V_39_fu_727_p2(17 downto 2);
                r_V_44_reg_1683 <= r_V_44_fu_913_p2;
                sext_ln1192_15_reg_1673 <= sext_ln1192_15_fu_897_p1;
                sub_ln1192_1_reg_1653 <= sub_ln1192_1_fu_704_p2;
                tmp_1_reg_1446_pp0_iter2_reg <= tmp_1_reg_1446_pp0_iter1_reg;
                tmp_2_reg_1466_pp0_iter2_reg <= tmp_2_reg_1466_pp0_iter1_reg;
                trunc_ln708_1_reg_1663 <= ret_V_3_fu_842_p2(27 downto 20);
                trunc_ln708_3_reg_1688 <= ret_V_6_fu_1041_p2(22 downto 15);
                trunc_ln708_4_reg_1693 <= ret_V_10_fu_1135_p2(27 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1192_reg_1553 <= grp_fu_1302_p3;
                mul_ln1192_4_reg_1598 <= grp_fu_1339_p3;
                mul_ln1192_5_reg_1603 <= grp_fu_1347_p3;
                sub_ln1192_7_reg_1618 <= grp_fu_1355_p3;
            end if;
        end if;
    end process;
    ret_V_reg_1487(4 downto 0) <= "00000";
    r_V_4_reg_1543(0) <= '0';
    r_V_38_reg_1548(0) <= '0';
    sext_ln1116_5_reg_1568(0) <= '0';
    r_V_43_reg_1608(1 downto 0) <= "00";
    rhs_V_18_reg_1628(4 downto 0) <= "00000";
    ret_V_9_reg_1638(4 downto 0) <= "00000";
    r_V_39_reg_1658(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1192_10_fu_1273_p2 <= std_logic_vector(unsigned(sub_ln1192_10_fu_1254_p2) + unsigned(shl_ln1192_5_fu_1265_p3));
    add_ln1192_12_fu_566_p2 <= std_logic_vector(unsigned(sub_ln1192_12_fu_549_p2) + unsigned(sext_ln1192_20_fu_562_p1));
    add_ln1192_13_fu_943_p2 <= std_logic_vector(unsigned(sub_ln1192_13_fu_935_p2) + unsigned(sext_ln1192_22_fu_940_p1));
    add_ln1192_14_fu_956_p2 <= std_logic_vector(unsigned(add_ln1192_13_fu_943_p2) + unsigned(rhs_V_19_fu_949_p3));
    add_ln1192_15_fu_973_p2 <= std_logic_vector(unsigned(add_ln1192_14_fu_956_p2) + unsigned(sext_ln1192_23_fu_969_p1));
    add_ln1192_18_fu_1075_p2 <= std_logic_vector(unsigned(lhs_V_fu_1057_p3) + unsigned(sext_ln1192_27_fu_1071_p1));
    add_ln1192_19_fu_1116_p2 <= std_logic_vector(unsigned(sub_ln1192_17_fu_1099_p2) + unsigned(sext_ln1192_29_fu_1112_p1));
    add_ln1192_2_fu_1162_p2 <= std_logic_vector(unsigned(sub_ln1192_1_reg_1653) + unsigned(sext_ln1192_6_fu_1158_p1));
    add_ln1192_3_fu_1177_p2 <= std_logic_vector(unsigned(add_ln1192_2_fu_1162_p2) + unsigned(rhs_V_5_fu_1170_p3));
    add_ln1192_5_fu_760_p2 <= std_logic_vector(unsigned(sub_ln1192_3_fu_747_p2) + unsigned(rhs_V_8_fu_753_p3));
    add_ln1192_6_fu_794_p2 <= std_logic_vector(unsigned(sub_ln1192_4_fu_777_p2) + unsigned(sext_ln1192_10_fu_790_p1));
    add_ln1192_7_fu_807_p2 <= std_logic_vector(unsigned(add_ln1192_6_fu_794_p2) + unsigned(shl_ln1192_2_fu_800_p3));
    add_ln1192_9_fu_891_p2 <= std_logic_vector(unsigned(sub_ln1192_8_fu_879_p2) + unsigned(rhs_V_14_fu_884_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1302_p0 <= sext_ln1192_1_reg_1476(8 - 1 downto 0);
    grp_fu_1302_p2 <= std_logic_vector(signed(sext_ln703_fu_356_p1) + signed(sext_ln728_1_fu_367_p1));
    grp_fu_1339_p0 <= sext_ln1118_3_fu_329_p1(8 - 1 downto 0);
    grp_fu_1339_p1 <= sext_ln1118_21_fu_485_p1(11 - 1 downto 0);
    grp_fu_1347_p0 <= sext_ln1118_21_fu_485_p1(11 - 1 downto 0);
    grp_fu_1347_p2 <= sext_ln728_4_fu_489_p1(8 - 1 downto 0);
    grp_fu_1355_p0 <= sext_ln728_3_fu_450_p1(8 - 1 downto 0);
    grp_fu_1355_p2 <= (p_Val2_11_reg_1492 & ap_const_lv15_0);
    grp_fu_1396_p0 <= sext_ln1192_1_reg_1476_pp0_iter1_reg(8 - 1 downto 0);
    grp_fu_1396_p2 <= std_logic_vector(signed(add_ln1192_reg_1553) + signed(sext_ln1192_3_fu_674_p1));
    grp_fu_1404_p0 <= sext_ln1118_8_fu_693_p1(11 - 1 downto 0);
    grp_fu_1404_p2 <= sext_ln1118_1_fu_655_p1(8 - 1 downto 0);
    grp_fu_1413_p2 <= sext_ln1192_13_fu_858_p1(8 - 1 downto 0);
    grp_fu_1422_p2 <= sext_ln1192_13_fu_858_p1(8 - 1 downto 0);
    grp_fu_1437_p2 <= sext_ln1192_13_fu_858_p1(8 - 1 downto 0);
    lhs_V_fu_1057_p3 <= (ret_V_9_reg_1638 & ap_const_lv5_0);
    mul_ln1118_fu_307_p0 <= sext_ln1118_13_fu_283_p1(8 - 1 downto 0);
    mul_ln1118_fu_307_p1 <= sext_ln1116_1_fu_241_p1(8 - 1 downto 0);
    mul_ln1118_fu_307_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_fu_307_p0) * signed(mul_ln1118_fu_307_p1))), 16));
    mul_ln1192_11_fu_1371_p0 <= sext_ln1118_15_fu_405_p1(8 - 1 downto 0);
    mul_ln1192_7_fu_1431_p0 <= sext_ln1192_13_fu_858_p1(8 - 1 downto 0);
    mul_ln1192_8_fu_1260_p1 <= sext_ln1192_15_reg_1673(8 - 1 downto 0);
    mul_ln1192_8_fu_1260_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv13_3A) * signed(mul_ln1192_8_fu_1260_p1))), 13));
    mul_ln728_1_fu_1321_p0 <= sext_ln1118_15_fu_405_p1(8 - 1 downto 0);
    mul_ln728_2_fu_1327_p1 <= sext_ln1118_18_fu_468_p1(16 - 1 downto 0);
    mul_ln728_3_fu_1333_p1 <= sext_ln1118_18_fu_468_p1(16 - 1 downto 0);
    mul_ln728_6_fu_1378_p0 <= sext_ln728_4_fu_489_p1(8 - 1 downto 0);
    mul_ln728_7_fu_1384_p0 <= sext_ln1118_34_fu_639_p1(8 - 1 downto 0);
    mul_ln728_8_fu_1390_p0 <= sext_ln1118_34_fu_639_p1(8 - 1 downto 0);
    mul_ln728_fu_1315_p0 <= sext_ln728_3_fu_450_p1(8 - 1 downto 0);
    p_Val2_11_fu_273_p4 <= x_V_in_sig(119 downto 112);
    r_V_11_fu_335_p3 <= (p_Val2_11_reg_1492 & ap_const_lv2_0);
    r_V_12_fu_415_p0 <= sext_ln1118_15_fu_405_p1(8 - 1 downto 0);
    r_V_12_fu_415_p1 <= r_V_11_fu_335_p3;
    r_V_12_fu_415_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_12_fu_415_p0) * signed(r_V_12_fu_415_p1))), 18));
    r_V_13_fu_425_p3 <= (p_Val2_11_reg_1492 & ap_const_lv1_0);
    r_V_14_fu_440_p0 <= p_Val2_11_reg_1492;
    r_V_14_fu_440_p1 <= sext_ln1116_5_fu_436_p1(9 - 1 downto 0);
    r_V_14_fu_440_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_14_fu_440_p0) * signed(r_V_14_fu_440_p1))), 17));
    r_V_20_fu_515_p0 <= tmp_5_reg_1521;
    r_V_20_fu_515_p1 <= sext_ln1116_5_fu_436_p1(9 - 1 downto 0);
    r_V_20_fu_515_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_20_fu_515_p0) * signed(r_V_20_fu_515_p1))), 17));
    r_V_23_fu_903_p1 <= tmp_5_reg_1521_pp0_iter1_reg;
    r_V_23_fu_903_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv13_B) * signed(r_V_23_fu_903_p1))), 13));
    r_V_25_fu_313_p0 <= sext_ln1118_13_fu_283_p1(8 - 1 downto 0);
    r_V_25_fu_313_p1 <= sext_ln1118_13_fu_283_p1(8 - 1 downto 0);
    r_V_25_fu_313_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_25_fu_313_p0) * signed(r_V_25_fu_313_p1))), 16));
    r_V_26_fu_478_p3 <= (p_Val2_11_reg_1492 & ap_const_lv3_0);
    r_V_31_fu_629_p0 <= sext_ln1117_fu_326_p1(8 - 1 downto 0);
    r_V_31_fu_629_p1 <= sext_ln1118_24_fu_509_p1(8 - 1 downto 0);
    r_V_31_fu_629_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_31_fu_629_p0) * signed(r_V_31_fu_629_p1))), 16));
    r_V_33_fu_642_p0 <= sext_ln1118_24_fu_509_p1(8 - 1 downto 0);
    r_V_33_fu_642_p1 <= sext_ln1118_24_fu_509_p1(8 - 1 downto 0);
    r_V_33_fu_642_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_33_fu_642_p0) * signed(r_V_33_fu_642_p1))), 16));
    r_V_35_fu_227_p0 <= tmp_1_fu_187_p4;
    r_V_35_fu_227_p1 <= r_V_fu_215_p3;
    r_V_35_fu_227_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_35_fu_227_p0) * signed(r_V_35_fu_227_p1))), 17));
    r_V_36_fu_249_p0 <= sext_ln1116_1_fu_241_p1(8 - 1 downto 0);
    r_V_36_fu_249_p1 <= tmp_2_fu_201_p4;
    r_V_36_fu_249_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_36_fu_249_p0) * signed(r_V_36_fu_249_p1))), 16));
    r_V_37_fu_350_p2 <= std_logic_vector(signed(sext_ln1118_6_fu_346_p1) - signed(sext_ln1118_4_fu_332_p1));
    r_V_38_fu_388_p0 <= sext_ln1117_1_reg_1461(8 - 1 downto 0);
    r_V_38_fu_388_p1 <= r_V_4_fu_377_p3;
    r_V_38_fu_388_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_38_fu_388_p0) * signed(r_V_38_fu_388_p1))), 17));
    r_V_39_fu_727_p0 <= sext_ln1118_1_fu_655_p1(8 - 1 downto 0);
    r_V_39_fu_727_p1 <= r_V_8_fu_712_p3;
    r_V_39_fu_727_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_39_fu_727_p0) * signed(r_V_39_fu_727_p1))), 18));
    r_V_40_fu_1194_p2 <= std_logic_vector(signed(sext_ln1118_9_fu_1167_p1) + signed(sext_ln1118_12_fu_1190_p1));
    r_V_41_fu_453_p2 <= std_logic_vector(signed(sext_ln1118_4_fu_332_p1) + signed(sext_ln1118_6_fu_346_p1));
    r_V_42_fu_463_p0 <= sext_ln1117_fu_326_p1(8 - 1 downto 0);
    r_V_42_fu_463_p1 <= sext_ln1118_13_reg_1506(8 - 1 downto 0);
    r_V_42_fu_463_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_42_fu_463_p0) * signed(r_V_42_fu_463_p1))), 16));
    r_V_43_fu_503_p2 <= std_logic_vector(signed(sext_ln1118_23_fu_499_p1) - signed(sext_ln1118_5_fu_342_p1));
    r_V_44_fu_913_p0 <= sext_ln1118_24_reg_1613(8 - 1 downto 0);
    r_V_44_fu_913_p1 <= tmp_4_reg_1512_pp0_iter1_reg;
    r_V_44_fu_913_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_44_fu_913_p0) * signed(r_V_44_fu_913_p1))), 16));
    r_V_45_fu_918_p0 <= tmp_2_reg_1466_pp0_iter1_reg;
    r_V_45_fu_918_p1 <= sext_ln1116_5_reg_1568(9 - 1 downto 0);
    r_V_45_fu_918_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_45_fu_918_p0) * signed(r_V_45_fu_918_p1))), 17));
    r_V_46_fu_572_p0 <= sext_ln1118_13_reg_1506(8 - 1 downto 0);
    r_V_46_fu_572_p1 <= sext_ln1118_24_fu_509_p1(8 - 1 downto 0);
    r_V_46_fu_572_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_46_fu_572_p0) * signed(r_V_46_fu_572_p1))), 16));
    r_V_47_fu_686_p3 <= (tmp_1_reg_1446_pp0_iter1_reg & ap_const_lv3_0);
    r_V_48_fu_996_p3 <= (tmp_5_reg_1521_pp0_iter1_reg & ap_const_lv3_0);
    r_V_49_fu_601_p2 <= std_logic_vector(signed(sext_ln1118_21_fu_485_p1) - signed(sext_ln1118_3_fu_329_p1));
    r_V_4_fu_377_p3 <= (tmp_1_reg_1446 & ap_const_lv1_0);
    r_V_50_fu_1081_p2 <= std_logic_vector(signed(sext_ln1118_8_fu_693_p1) - signed(sext_ln700_fu_658_p1));
    r_V_6_fu_397_p0 <= sext_ln1117_fu_326_p1(8 - 1 downto 0);
    r_V_6_fu_397_p1 <= sext_ln1118_2_reg_1482(8 - 1 downto 0);
    r_V_6_fu_397_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_6_fu_397_p0) * signed(r_V_6_fu_397_p1))), 16));
    r_V_8_fu_712_p3 <= (tmp_2_reg_1466_pp0_iter1_reg & ap_const_lv2_0);
    r_V_fu_215_p3 <= (trunc_ln1117_fu_183_p1 & ap_const_lv1_0);
    ret_V_10_fu_1135_p2 <= std_logic_vector(signed(ap_const_lv28_F300000) + signed(sub_ln1192_18_fu_1129_p2));
    ret_V_2_fu_1214_p2 <= std_logic_vector(signed(ap_const_lv23_750000) + signed(sub_ln1192_2_fu_1208_p2));
    ret_V_3_fu_842_p2 <= std_logic_vector(signed(ap_const_lv28_E600000) + signed(sub_ln1192_6_fu_836_p2));
    ret_V_4_fu_1279_p2 <= std_logic_vector(signed(ap_const_lv23_7B0000) + signed(add_ln1192_10_fu_1273_p2));
    ret_V_6_fu_1041_p2 <= std_logic_vector(signed(ap_const_lv23_788000) + signed(sub_ln1192_16_fu_1035_p2));
    ret_V_7_fu_589_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(rhs_V_16_fu_554_p3));
    ret_V_8_fu_595_p2 <= std_logic_vector(unsigned(ret_V_7_fu_589_p2) - unsigned(rhs_V_18_fu_577_p3));
    ret_V_9_fu_623_p2 <= std_logic_vector(signed(sext_ln703_1_fu_607_p1) + signed(sext_ln728_6_fu_619_p1));
    ret_V_fu_267_p2 <= std_logic_vector(signed(sext_ln728_fu_263_p1) - signed(rhs_V_fu_233_p3));
    rhs_V_10_fu_783_p3 <= (mul_ln728_3_reg_1593 & ap_const_lv5_0);
    rhs_V_11_fu_829_p3 <= (r_V_43_reg_1608 & ap_const_lv15_0);
    rhs_V_13_fu_872_p3 <= (grp_fu_1413_p3 & ap_const_lv5_0);
    rhs_V_14_fu_884_p3 <= (grp_fu_1422_p3 & ap_const_lv5_0);
    rhs_V_15_fu_1243_p3 <= (r_V_44_reg_1683 & ap_const_lv5_0);
    rhs_V_16_fu_554_p3 <= (r_V_42_fu_463_p2 & ap_const_lv5_0);
    rhs_V_17_fu_923_p3 <= (r_V_45_fu_918_p2 & ap_const_lv5_0);
    rhs_V_18_fu_577_p3 <= (r_V_46_fu_572_p2 & ap_const_lv5_0);
    rhs_V_19_fu_949_p3 <= (mul_ln728_6_reg_1633 & ap_const_lv5_0);
    rhs_V_1_fu_255_p3 <= (r_V_36_fu_249_p2 & ap_const_lv5_0);
    rhs_V_20_fu_962_p3 <= (r_V_41_reg_1578 & ap_const_lv10_0);
    rhs_V_21_fu_979_p3 <= (tmp_1_reg_1446_pp0_iter1_reg & ap_const_lv13_0);
    rhs_V_22_fu_1007_p3 <= (tmp_5_reg_1521_pp0_iter1_reg & ap_const_lv13_0);
    rhs_V_23_fu_1024_p3 <= (tmp_4_reg_1512_pp0_iter1_reg & ap_const_lv10_0);
    rhs_V_24_fu_611_p3 <= (r_V_49_fu_601_p2 & ap_const_lv10_0);
    rhs_V_25_fu_1064_p3 <= (mul_ln728_7_reg_1643 & ap_const_lv5_0);
    rhs_V_26_fu_1087_p3 <= (r_V_50_fu_1081_p2 & ap_const_lv15_0);
    rhs_V_27_fu_1105_p3 <= (mul_ln728_8_reg_1648 & ap_const_lv5_0);
    rhs_V_2_fu_359_p3 <= (r_V_37_fu_350_p2 & ap_const_lv10_0);
    rhs_V_3_fu_667_p3 <= (r_V_38_reg_1548 & ap_const_lv5_0);
    rhs_V_4_fu_1151_p3 <= (tmp_1_reg_1446_pp0_iter2_reg & ap_const_lv14_0);
    rhs_V_5_fu_1170_p3 <= (r_V_39_reg_1658 & ap_const_lv5_0);
    rhs_V_6_fu_1200_p3 <= (r_V_40_fu_1194_p2 & ap_const_lv10_0);
    rhs_V_7_fu_740_p3 <= (mul_ln728_reg_1573 & ap_const_lv5_0);
    rhs_V_8_fu_753_p3 <= (mul_ln728_1_reg_1583 & ap_const_lv10_0);
    rhs_V_9_fu_766_p3 <= (mul_ln728_2_reg_1588 & ap_const_lv5_0);
    rhs_V_fu_233_p3 <= (r_V_35_fu_227_p2 & ap_const_lv5_0);
        sext_ln1116_1_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1117_fu_183_p1),16));

        sext_ln1116_5_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_13_fu_425_p3),17));

        sext_ln1117_1_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_187_p4),17));

        sext_ln1117_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_1446),16));

        sext_ln1118_12_fu_1190_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_5_fu_1183_p3),13));

        sext_ln1118_13_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_11_fu_273_p4),16));

        sext_ln1118_15_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_11_reg_1492),18));

        sext_ln1118_18_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_42_fu_463_p2),22));

        sext_ln1118_1_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_1466_pp0_iter1_reg),18));

        sext_ln1118_21_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_26_fu_478_p3),12));

        sext_ln1118_23_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_6_fu_492_p3),13));

        sext_ln1118_24_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1521),16));

        sext_ln1118_2_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_201_p4),16));

        sext_ln1118_34_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1521),22));

        sext_ln1118_3_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_11_reg_1492),12));

        sext_ln1118_4_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_11_reg_1492),11));

        sext_ln1118_5_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_11_fu_335_p3),13));

        sext_ln1118_6_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_11_fu_335_p3),11));

        sext_ln1118_8_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_47_fu_686_p3),12));

        sext_ln1118_9_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_1466_pp0_iter2_reg),13));

        sext_ln1192_10_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_10_fu_783_p3),28));

        sext_ln1192_13_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1521_pp0_iter1_reg),18));

        sext_ln1192_15_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1521_pp0_iter1_reg),13));

        sext_ln1192_17_fu_1250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_15_fu_1243_p3),23));

        sext_ln1192_1_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_201_p4),23));

        sext_ln1192_20_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_16_fu_554_p3),23));

        sext_ln1192_21_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_17_fu_923_p3),23));

        sext_ln1192_22_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_18_reg_1628),23));

        sext_ln1192_23_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_20_fu_962_p3),23));

        sext_ln1192_24_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_21_fu_979_p3),23));

        sext_ln1192_25_fu_1014_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_22_fu_1007_p3),23));

        sext_ln1192_26_fu_1031_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_23_fu_1024_p3),23));

        sext_ln1192_27_fu_1071_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_25_fu_1064_p3),28));

        sext_ln1192_28_fu_1095_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_26_fu_1087_p3),28));

        sext_ln1192_29_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_27_fu_1105_p3),28));

        sext_ln1192_3_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_3_fu_667_p3),23));

        sext_ln1192_6_fu_1158_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_4_fu_1151_p3),23));

        sext_ln1192_9_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_9_fu_766_p3),28));

        sext_ln700_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_1446_pp0_iter1_reg),12));

        sext_ln703_1_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_8_fu_595_p2),23));

        sext_ln703_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_reg_1487),23));

        sext_ln728_1_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_2_fu_359_p3),23));

        sext_ln728_3_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1512),23));

        sext_ln728_4_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1512),18));

        sext_ln728_6_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_24_fu_611_p3),23));

        sext_ln728_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1_fu_255_p3),22));

    shl_ln1118_5_fu_1183_p3 <= (tmp_2_reg_1466_pp0_iter2_reg & ap_const_lv4_0);
    shl_ln1118_6_fu_492_p3 <= (p_Val2_11_reg_1492 & ap_const_lv4_0);
    shl_ln1118_7_fu_861_p3 <= (tmp_1_reg_1446_pp0_iter1_reg & ap_const_lv2_0);
    shl_ln1192_1_fu_733_p3 <= (mul_ln1192_3_reg_1563 & ap_const_lv5_0);
    shl_ln1192_2_fu_800_p3 <= (mul_ln1192_4_reg_1598 & ap_const_lv10_0);
    shl_ln1192_3_fu_816_p3 <= (mul_ln1192_5_reg_1603 & ap_const_lv10_0);
    shl_ln1192_4_fu_1231_p3 <= (mul_ln1192_7_reg_1678 & ap_const_lv5_0);
    shl_ln1192_5_fu_1265_p3 <= (mul_ln1192_8_fu_1260_p2 & ap_const_lv10_0);
    shl_ln1192_6_fu_542_p3 <= (mul_ln1192_11_fu_1371_p2 & ap_const_lv5_0);
    shl_ln1192_7_fu_1122_p3 <= (grp_fu_1437_p3 & ap_const_lv10_0);
    shl_ln_fu_697_p3 <= (grp_fu_1404_p3 & ap_const_lv5_0);
    sub_ln1192_10_fu_1254_p2 <= std_logic_vector(unsigned(sub_ln1192_9_fu_1238_p2) - unsigned(sext_ln1192_17_fu_1250_p1));
    sub_ln1192_12_fu_549_p2 <= std_logic_vector(signed(grp_fu_1363_p3) - signed(shl_ln1192_6_fu_542_p3));
    sub_ln1192_13_fu_935_p2 <= std_logic_vector(unsigned(add_ln1192_12_reg_1623) - unsigned(sext_ln1192_21_fu_931_p1));
    sub_ln1192_14_fu_990_p2 <= std_logic_vector(unsigned(add_ln1192_15_fu_973_p2) - unsigned(sext_ln1192_24_fu_986_p1));
    sub_ln1192_15_fu_1018_p2 <= std_logic_vector(unsigned(sub_ln1192_14_fu_990_p2) - unsigned(sext_ln1192_25_fu_1014_p1));
    sub_ln1192_16_fu_1035_p2 <= std_logic_vector(unsigned(sub_ln1192_15_fu_1018_p2) - unsigned(sext_ln1192_26_fu_1031_p1));
    sub_ln1192_17_fu_1099_p2 <= std_logic_vector(unsigned(add_ln1192_18_fu_1075_p2) - unsigned(sext_ln1192_28_fu_1095_p1));
    sub_ln1192_18_fu_1129_p2 <= std_logic_vector(unsigned(add_ln1192_19_fu_1116_p2) - unsigned(shl_ln1192_7_fu_1122_p3));
    sub_ln1192_1_fu_704_p2 <= std_logic_vector(signed(grp_fu_1396_p3) - signed(shl_ln_fu_697_p3));
    sub_ln1192_2_fu_1208_p2 <= std_logic_vector(unsigned(add_ln1192_3_fu_1177_p2) - unsigned(rhs_V_6_fu_1200_p3));
    sub_ln1192_3_fu_747_p2 <= std_logic_vector(unsigned(rhs_V_7_fu_740_p3) - unsigned(shl_ln1192_1_fu_733_p3));
    sub_ln1192_4_fu_777_p2 <= std_logic_vector(unsigned(add_ln1192_5_fu_760_p2) - unsigned(sext_ln1192_9_fu_773_p1));
    sub_ln1192_5_fu_823_p2 <= std_logic_vector(unsigned(add_ln1192_7_fu_807_p2) - unsigned(shl_ln1192_3_fu_816_p3));
    sub_ln1192_6_fu_836_p2 <= std_logic_vector(unsigned(sub_ln1192_5_fu_823_p2) - unsigned(rhs_V_11_fu_829_p3));
    sub_ln1192_8_fu_879_p2 <= std_logic_vector(signed(sub_ln1192_7_reg_1618) - signed(rhs_V_13_fu_872_p3));
    sub_ln1192_9_fu_1238_p2 <= std_logic_vector(unsigned(add_ln1192_9_reg_1668) - unsigned(shl_ln1192_4_fu_1231_p3));
    tmp_1_fu_187_p4 <= x_V_in_sig(127 downto 120);
    tmp_2_fu_201_p4 <= x_V_in_sig(23 downto 16);
    trunc_ln1117_fu_183_p1 <= x_V_in_sig(8 - 1 downto 0);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, x_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V_ap_vld, x_V, x_V_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

    y_0_V <= ret_V_2_fu_1214_p2(22 downto 15);

    y_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_V <= trunc_ln708_1_reg_1663;

    y_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= ret_V_4_fu_1279_p2(22 downto 15);

    y_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_3_V <= trunc_ln708_3_reg_1688;

    y_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= trunc_ln708_4_reg_1693;

    y_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
