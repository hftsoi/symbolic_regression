-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (143 downto 0);
    y_0_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.233000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=23,HLS_SYN_FF=1235,HLS_SYN_LUT=2312,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv144_lc_1 : STD_LOGIC_VECTOR (143 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv14_B : STD_LOGIC_VECTOR (13 downto 0) := "00000000001011";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv29_1F300000 : STD_LOGIC_VECTOR (28 downto 0) := "11111001100000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv24_F50000 : STD_LOGIC_VECTOR (23 downto 0) := "111101010000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv29_1E600000 : STD_LOGIC_VECTOR (28 downto 0) := "11110011000000000000000000000";
    constant ap_const_lv14_3A : STD_LOGIC_VECTOR (13 downto 0) := "00000000111010";
    constant ap_const_lv24_FB0000 : STD_LOGIC_VECTOR (23 downto 0) := "111110110000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv24_F88000 : STD_LOGIC_VECTOR (23 downto 0) := "111110001000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_preg : STD_LOGIC_VECTOR (143 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (143 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal trunc_ln1117_fu_179_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1117_reg_1394 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_183_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_reg_1399 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_reg_1399_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_reg_1399_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1192_fu_193_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1192_reg_1412 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1192_reg_1412_pp0_iter1_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_2_reg_1418 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_reg_1418_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_reg_1418_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_34_fu_219_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_34_reg_1429 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_10_reg_1434 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_10_reg_1434_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_reg_1449 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_reg_1449_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_reg_1449_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_reg_1457 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_reg_1457_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_reg_1457_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1192_1_fu_258_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_1_reg_1468 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_10_fu_301_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_10_reg_1473 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_36_fu_312_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_36_reg_1478 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_4_fu_336_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_4_reg_1483 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_37_fu_347_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_37_reg_1488 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1234_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1192_reg_1493 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_6_fu_356_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_6_reg_1498 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_11_fu_1242_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_11_reg_1503 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_39_fu_372_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_39_reg_1508 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_39_reg_1508_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_40_fu_378_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_40_reg_1514 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1118_21_fu_384_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1118_21_reg_1520 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1118_21_reg_1520_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_fu_387_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_reg_1525 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_17_fu_1248_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_17_reg_1530 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_44_fu_403_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_44_reg_1535 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1192_20_fu_1254_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_20_reg_1540 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_21_fu_1260_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_21_reg_1545 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1192_1_fu_483_p2 : STD_LOGIC_VECTOR (23 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sub_ln1192_1_fu_483_p2 : signal is "no";
    signal sub_ln1192_1_reg_1550 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_3_fu_1283_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_3_reg_1555 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_4_fu_1289_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_4_reg_1560 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_5_fu_1295_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_5_reg_1565 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_6_fu_1301_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_6_reg_1570 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_7_fu_1307_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_7_reg_1575 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_8_fu_1313_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_8_reg_1580 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1319_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_9_reg_1585 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1326_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_10_reg_1590 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_41_fu_574_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_41_reg_1595 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1334_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1192_7_reg_1600 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1342_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_12_reg_1605 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1350_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_13_reg_1610 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1192_16_fu_611_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1192_16_reg_1615 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1192_14_fu_1358_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_14_reg_1620 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln1192_12_fu_660_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1192_12_reg_1625 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_43_fu_666_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_43_reg_1630 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_11_fu_672_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_11_reg_1635 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1192_19_fu_1379_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1192_19_reg_1640 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln708_4_reg_1645 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal r_V_fu_207_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_34_fu_219_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_34_fu_219_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_35_fu_274_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1116_1_fu_268_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_35_fu_274_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_1_fu_271_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_35_fu_274_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_1_fu_280_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln728_fu_288_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_fu_261_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1118_5_fu_308_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_3_fu_298_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal rhs_V_2_fu_318_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal ret_V_fu_292_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln728_1_fu_326_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_37_fu_347_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_37_fu_347_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_6_fu_356_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1117_fu_255_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_6_fu_356_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_40_fu_378_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_40_fu_378_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_12_fu_362_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_fu_387_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1118_fu_387_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_24_fu_393_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_24_fu_393_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_24_fu_393_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_44_fu_403_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_44_fu_403_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_30_fu_409_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_30_fu_409_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_30_fu_409_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_32_fu_422_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_32_fu_422_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_32_fu_422_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_3_fu_450_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_45_fu_465_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1274_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1266_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln_fu_476_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_8_fu_491_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_12_fu_515_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_13_fu_530_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_13_fu_506_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_13_fu_530_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1116_4_fu_526_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_13_fu_530_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_25_fu_549_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1118_6_fu_563_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1118_20_fu_570_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_4_fu_438_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_19_fu_583_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1192_14_fu_580_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_19_fu_583_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_19_fu_583_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1118_7_fu_600_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_22_fu_617_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_22_fu_617_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1192_18_fu_1372_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1364_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_12_fu_637_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_9_fu_649_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1192_12_fu_644_p2 : STD_LOGIC_VECTOR (23 downto 0);
    attribute use_dsp48 of sub_ln1192_12_fu_644_p2 : signal is "no";
    signal sext_ln1192_22_fu_656_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_43_fu_666_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_fu_432_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_43_fu_666_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_46_fu_682_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_6_fu_693_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1118_18_fu_556_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1118_2_fu_435_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_V_7_fu_699_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_47_fu_705_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal rhs_V_16_fu_715_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln703_fu_711_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln728_2_fu_723_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_8_fu_727_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal lhs_V_fu_733_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln1192_14_fu_741_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln1118_7_fu_472_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln700_fu_441_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_48_fu_754_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal rhs_V_17_fu_760_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln1192_18_fu_748_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln1192_29_fu_768_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sub_ln1192_17_fu_772_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln1192_15_fu_778_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1385_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln1192_19_fu_785_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln1192_16_fu_791_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sub_ln1192_18_fu_798_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal ret_V_9_fu_804_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal rhs_V_4_fu_820_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1192_5_fu_827_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1192_2_fu_831_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_1_fu_839_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1118_5_fu_852_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1118_8_fu_836_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_11_fu_859_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_38_fu_863_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1192_3_fu_846_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_5_fu_869_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1192_2_fu_877_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_2_fu_883_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_3_fu_907_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln1192_2_fu_900_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sub_ln1192_3_fu_914_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln1192_4_fu_920_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln1192_5_fu_927_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln1192_5_fu_933_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sub_ln1192_4_fu_940_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln1192_6_fu_946_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln1192_6_fu_953_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln1192_7_fu_959_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln1192_7_fu_966_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln1192_8_fu_975_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sub_ln1192_5_fu_982_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal rhs_V_6_fu_988_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sub_ln1192_6_fu_995_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal ret_V_3_fu_1001_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln1192_9_fu_1018_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1192_8_fu_1025_p2 : STD_LOGIC_VECTOR (23 downto 0);
    attribute use_dsp48 of sub_ln1192_8_fu_1025_p2 : signal is "no";
    signal shl_ln1192_s_fu_1030_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1192_9_fu_1037_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_10_fu_1043_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_42_fu_1056_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_42_fu_1056_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_42_fu_1056_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_8_fu_1061_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1192_9_fu_1050_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_18_fu_1069_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_15_fu_1079_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_15_fu_1079_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln1192_10_fu_1073_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_11_fu_1084_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1192_10_fu_1092_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_4_fu_1098_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_10_fu_1115_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1192_13_fu_1122_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_23_fu_1127_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1192_13_fu_1130_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_13_fu_1136_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_12_fu_1149_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln1192_14_fu_1143_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_25_fu_1156_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_13_fu_1166_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln1192_15_fu_1160_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_26_fu_1173_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_14_fu_1183_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1192_14_fu_1177_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_27_fu_1190_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_15_fu_1200_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln1192_15_fu_1194_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_28_fu_1207_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1192_16_fu_1211_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_5_fu_1217_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1234_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1234_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_17_fu_1248_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_20_fu_1254_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_29_fu_419_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_21_fu_1260_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1266_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1266_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1274_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1274_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_3_fu_1283_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_4_fu_1289_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1192_7_fu_509_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_5_fu_1295_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1192_10_fu_540_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_6_fu_1301_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_7_fu_1307_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_7_fu_1307_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1118_17_fu_546_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_8_fu_1313_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_8_fu_1313_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1319_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1319_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1319_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1326_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1326_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1192_13_fu_560_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1334_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1334_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1342_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1350_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_14_fu_1358_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_18_fu_1372_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_19_fu_1379_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1385_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mac_muladd_9s_19s_24ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_mul_mul_9s_11s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_mul_mul_9s_18s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_mac_mulsub_9s_18s_24ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_am_addmul_12s_10s_9s_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component myproject_mul_mul_9s_11s_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component myproject_mul_mul_9s_20s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_mul_mul_9s_19s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_mul_mul_9s_12s_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component myproject_am_addmul_9s_12s_9s_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component myproject_am_submul_12s_10s_9s_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component myproject_mac_mul_sub_9s_19s_24ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_am_submul_11s_9s_9s_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component myproject_mul_mul_9s_14s_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component myproject_mac_mulsub_9s_18s_24s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_am_submul_12s_9s_9s_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;



begin
    myproject_mac_muladd_9s_19s_24ns_24_1_1_U1 : component myproject_mac_muladd_9s_19s_24ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 19,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_1234_p0,
        din1 => r_V_37_fu_347_p2,
        din2 => grp_fu_1234_p2,
        dout => grp_fu_1234_p3);

    myproject_mul_mul_9s_11s_20_1_1_U2 : component myproject_mul_mul_9s_11s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => p_Val2_10_reg_1434,
        din1 => r_V_10_fu_301_p3,
        dout => r_V_11_fu_1242_p2);

    myproject_mul_mul_9s_18s_24_1_1_U3 : component myproject_mul_mul_9s_18s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 18,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln1192_17_fu_1248_p0,
        din1 => r_V_24_fu_393_p2,
        dout => mul_ln1192_17_fu_1248_p2);

    myproject_mul_mul_9s_18s_24_1_1_U4 : component myproject_mul_mul_9s_18s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 18,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln1192_20_fu_1254_p0,
        din1 => r_V_30_fu_409_p2,
        dout => mul_ln1192_20_fu_1254_p2);

    myproject_mul_mul_9s_18s_24_1_1_U5 : component myproject_mul_mul_9s_18s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 18,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln1192_21_fu_1260_p0,
        din1 => r_V_32_fu_422_p2,
        dout => mul_ln1192_21_fu_1260_p2);

    myproject_mac_mulsub_9s_18s_24ns_24_1_1_U6 : component myproject_mac_mulsub_9s_18s_24ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 18,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_1266_p0,
        din1 => r_V_6_reg_1498,
        din2 => grp_fu_1266_p2,
        dout => grp_fu_1266_p3);

    myproject_am_addmul_12s_10s_9s_19_1_1_U7 : component myproject_am_addmul_12s_10s_9s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 10,
        din2_WIDTH => 9,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_1274_p0,
        din1 => r_V_4_reg_1483,
        din2 => grp_fu_1274_p2,
        dout => grp_fu_1274_p3);

    myproject_mul_mul_9s_11s_19_1_1_U8 : component myproject_mul_mul_9s_11s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        dout_WIDTH => 19)
    port map (
        din0 => mul_ln1192_3_fu_1283_p0,
        din1 => r_V_8_fu_491_p3,
        dout => mul_ln1192_3_fu_1283_p2);

    myproject_mul_mul_9s_20s_24_1_1_U9 : component myproject_mul_mul_9s_20s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 20,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln1192_4_fu_1289_p0,
        din1 => r_V_11_reg_1503,
        dout => mul_ln1192_4_fu_1289_p2);

    myproject_mul_mul_9s_19s_24_1_1_U10 : component myproject_mul_mul_9s_19s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 19,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln1192_5_fu_1295_p0,
        din1 => r_V_13_fu_530_p2,
        dout => mul_ln1192_5_fu_1295_p2);

    myproject_mul_mul_9s_12s_19_1_1_U11 : component myproject_mul_mul_9s_12s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 12,
        dout_WIDTH => 19)
    port map (
        din0 => mul_ln1192_6_fu_1301_p0,
        din1 => r_V_39_reg_1508,
        dout => mul_ln1192_6_fu_1301_p2);

    myproject_mul_mul_9s_18s_24_1_1_U12 : component myproject_mul_mul_9s_18s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 18,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln1192_7_fu_1307_p0,
        din1 => mul_ln1192_7_fu_1307_p1,
        dout => mul_ln1192_7_fu_1307_p2);

    myproject_mul_mul_9s_18s_24_1_1_U13 : component myproject_mul_mul_9s_18s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 18,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln1192_8_fu_1313_p0,
        din1 => mul_ln1192_8_fu_1313_p1,
        dout => mul_ln1192_8_fu_1313_p2);

    myproject_am_addmul_9s_12s_9s_19_1_1_U14 : component myproject_am_addmul_9s_12s_9s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 12,
        din2_WIDTH => 9,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_1319_p0,
        din1 => grp_fu_1319_p1,
        din2 => grp_fu_1319_p2,
        dout => grp_fu_1319_p3);

    myproject_am_submul_12s_10s_9s_19_1_1_U15 : component myproject_am_submul_12s_10s_9s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 10,
        din2_WIDTH => 9,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_1326_p0,
        din1 => r_V_12_fu_515_p3,
        din2 => grp_fu_1326_p2,
        dout => grp_fu_1326_p3);

    myproject_mac_mul_sub_9s_19s_24ns_24_1_1_U16 : component myproject_mac_mul_sub_9s_19s_24ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 19,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => grp_fu_1334_p0,
        din1 => r_V_19_fu_583_p2,
        din2 => grp_fu_1334_p2,
        dout => grp_fu_1334_p3);

    myproject_am_submul_11s_9s_9s_19_1_1_U17 : component myproject_am_submul_11s_9s_9s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 19)
    port map (
        din0 => shl_ln1118_7_fu_600_p3,
        din1 => tmp_1_reg_1399_pp0_iter1_reg,
        din2 => grp_fu_1342_p2,
        dout => grp_fu_1342_p3);

    myproject_am_submul_11s_9s_9s_19_1_1_U18 : component myproject_am_submul_11s_9s_9s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 19)
    port map (
        din0 => r_V_8_fu_491_p3,
        din1 => tmp_2_reg_1418_pp0_iter1_reg,
        din2 => grp_fu_1350_p2,
        dout => grp_fu_1350_p3);

    myproject_mul_mul_9s_14s_19_1_1_U19 : component myproject_mul_mul_9s_14s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 14,
        dout_WIDTH => 19)
    port map (
        din0 => mul_ln1192_14_fu_1358_p0,
        din1 => r_V_22_fu_617_p2,
        dout => mul_ln1192_14_fu_1358_p2);

    myproject_mac_mulsub_9s_18s_24s_24_1_1_U20 : component myproject_mac_mulsub_9s_18s_24s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 18,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => p_Val2_10_reg_1434_pp0_iter1_reg,
        din1 => mul_ln1118_reg_1525,
        din2 => mul_ln1192_17_reg_1530,
        dout => grp_fu_1364_p3);

    myproject_mul_mul_9s_12s_19_1_1_U21 : component myproject_mul_mul_9s_12s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 12,
        dout_WIDTH => 19)
    port map (
        din0 => mul_ln1192_18_fu_1372_p0,
        din1 => r_V_25_fu_549_p3,
        dout => mul_ln1192_18_fu_1372_p2);

    myproject_mul_mul_9s_12s_19_1_1_U22 : component myproject_mul_mul_9s_12s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 12,
        dout_WIDTH => 19)
    port map (
        din0 => mul_ln1192_19_fu_1379_p0,
        din1 => r_V_36_reg_1478,
        dout => mul_ln1192_19_fu_1379_p2);

    myproject_am_submul_12s_9s_9s_19_1_1_U23 : component myproject_am_submul_12s_9s_9s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 19)
    port map (
        din0 => r_V_46_fu_682_p3,
        din1 => tmp_5_reg_1457_pp0_iter1_reg,
        din2 => grp_fu_1385_p2,
        dout => grp_fu_1385_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv144_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln1192_12_reg_1625 <= add_ln1192_12_fu_660_p2;
                mul_ln1192_14_reg_1620 <= mul_ln1192_14_fu_1358_p2;
                mul_ln1192_19_reg_1640 <= mul_ln1192_19_fu_1379_p2;
                mul_ln1192_3_reg_1555 <= mul_ln1192_3_fu_1283_p2;
                mul_ln1192_4_reg_1560 <= mul_ln1192_4_fu_1289_p2;
                mul_ln1192_5_reg_1565 <= mul_ln1192_5_fu_1295_p2;
                mul_ln1192_6_reg_1570 <= mul_ln1192_6_fu_1301_p2;
                mul_ln1192_7_reg_1575 <= mul_ln1192_7_fu_1307_p2;
                mul_ln1192_8_reg_1580 <= mul_ln1192_8_fu_1313_p2;
                r_V_39_reg_1508_pp0_iter2_reg <= r_V_39_reg_1508;
                    r_V_41_reg_1595(13 downto 2) <= r_V_41_fu_574_p2(13 downto 2);
                    r_V_43_reg_1630(18 downto 1) <= r_V_43_fu_666_p2(18 downto 1);
                    rhs_V_11_reg_1635(22 downto 5) <= rhs_V_11_fu_672_p3(22 downto 5);
                sext_ln1118_21_reg_1520_pp0_iter2_reg <= sext_ln1118_21_reg_1520;
                sext_ln1192_16_reg_1615 <= sext_ln1192_16_fu_611_p1;
                sub_ln1192_1_reg_1550 <= sub_ln1192_1_fu_483_p2;
                tmp_1_reg_1399_pp0_iter2_reg <= tmp_1_reg_1399_pp0_iter1_reg;
                tmp_2_reg_1418_pp0_iter2_reg <= tmp_2_reg_1418_pp0_iter1_reg;
                tmp_4_reg_1449_pp0_iter2_reg <= tmp_4_reg_1449_pp0_iter1_reg;
                tmp_5_reg_1457_pp0_iter2_reg <= tmp_5_reg_1457_pp0_iter1_reg;
                trunc_ln708_4_reg_1645 <= ret_V_9_fu_804_p2(28 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1192_reg_1493 <= grp_fu_1234_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln1118_reg_1525 <= mul_ln1118_fu_387_p2;
                mul_ln1192_17_reg_1530 <= mul_ln1192_17_fu_1248_p2;
                mul_ln1192_20_reg_1540 <= mul_ln1192_20_fu_1254_p2;
                mul_ln1192_21_reg_1545 <= mul_ln1192_21_fu_1260_p2;
                p_Val2_10_reg_1434 <= x_V_in_sig(134 downto 126);
                p_Val2_10_reg_1434_pp0_iter1_reg <= p_Val2_10_reg_1434;
                    r_V_10_reg_1473(10 downto 2) <= r_V_10_fu_301_p3(10 downto 2);
                r_V_11_reg_1503 <= r_V_11_fu_1242_p2;
                    r_V_34_reg_1429(18 downto 1) <= r_V_34_fu_219_p2(18 downto 1);
                r_V_36_reg_1478 <= r_V_36_fu_312_p2;
                    r_V_37_reg_1488(18 downto 1) <= r_V_37_fu_347_p2(18 downto 1);
                r_V_39_reg_1508 <= r_V_39_fu_372_p2;
                r_V_40_reg_1514 <= r_V_40_fu_378_p2;
                r_V_44_reg_1535 <= r_V_44_fu_403_p2;
                    r_V_4_reg_1483(9 downto 1) <= r_V_4_fu_336_p3(9 downto 1);
                r_V_6_reg_1498 <= r_V_6_fu_356_p2;
                sext_ln1118_21_reg_1520 <= sext_ln1118_21_fu_384_p1;
                sext_ln1192_1_reg_1468 <= sext_ln1192_1_fu_258_p1;
                sext_ln1192_reg_1412 <= sext_ln1192_fu_193_p1;
                sext_ln1192_reg_1412_pp0_iter1_reg <= sext_ln1192_reg_1412;
                tmp_1_reg_1399 <= x_V_in_sig(143 downto 135);
                tmp_1_reg_1399_pp0_iter1_reg <= tmp_1_reg_1399;
                tmp_2_reg_1418 <= x_V_in_sig(26 downto 18);
                tmp_2_reg_1418_pp0_iter1_reg <= tmp_2_reg_1418;
                tmp_4_reg_1449 <= x_V_in_sig(44 downto 36);
                tmp_4_reg_1449_pp0_iter1_reg <= tmp_4_reg_1449;
                tmp_5_reg_1457 <= x_V_in_sig(35 downto 27);
                tmp_5_reg_1457_pp0_iter1_reg <= tmp_5_reg_1457;
                trunc_ln1117_reg_1394 <= trunc_ln1117_fu_179_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                mul_ln1192_10_reg_1590 <= grp_fu_1326_p3;
                mul_ln1192_12_reg_1605 <= grp_fu_1342_p3;
                mul_ln1192_13_reg_1610 <= grp_fu_1350_p3;
                mul_ln1192_9_reg_1585 <= grp_fu_1319_p3;
                sub_ln1192_7_reg_1600 <= grp_fu_1334_p3;
            end if;
        end if;
    end process;
    r_V_34_reg_1429(0) <= '0';
    r_V_10_reg_1473(1 downto 0) <= "00";
    r_V_4_reg_1483(0) <= '0';
    r_V_37_reg_1488(0) <= '0';
    r_V_41_reg_1595(1 downto 0) <= "00";
    r_V_43_reg_1630(0) <= '0';
    rhs_V_11_reg_1635(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1192_10_fu_1092_p2 <= std_logic_vector(unsigned(sub_ln1192_10_fu_1073_p2) + unsigned(shl_ln1192_11_fu_1084_p3));
    add_ln1192_12_fu_660_p2 <= std_logic_vector(unsigned(sub_ln1192_12_fu_644_p2) + unsigned(sext_ln1192_22_fu_656_p1));
    add_ln1192_13_fu_1130_p2 <= std_logic_vector(unsigned(sub_ln1192_13_fu_1122_p2) + unsigned(sext_ln1192_23_fu_1127_p1));
    add_ln1192_14_fu_1143_p2 <= std_logic_vector(unsigned(add_ln1192_13_fu_1130_p2) + unsigned(shl_ln1192_13_fu_1136_p3));
    add_ln1192_15_fu_1160_p2 <= std_logic_vector(unsigned(add_ln1192_14_fu_1143_p2) + unsigned(sext_ln1192_25_fu_1156_p1));
    add_ln1192_18_fu_748_p2 <= std_logic_vector(unsigned(lhs_V_fu_733_p3) + unsigned(shl_ln1192_14_fu_741_p3));
    add_ln1192_19_fu_785_p2 <= std_logic_vector(unsigned(sub_ln1192_17_fu_772_p2) + unsigned(shl_ln1192_15_fu_778_p3));
    add_ln1192_2_fu_831_p2 <= std_logic_vector(unsigned(sub_ln1192_1_reg_1550) + unsigned(sext_ln1192_5_fu_827_p1));
    add_ln1192_3_fu_846_p2 <= std_logic_vector(unsigned(add_ln1192_2_fu_831_p2) + unsigned(shl_ln1192_1_fu_839_p3));
    add_ln1192_5_fu_927_p2 <= std_logic_vector(unsigned(sub_ln1192_3_fu_914_p2) + unsigned(shl_ln1192_4_fu_920_p3));
    add_ln1192_6_fu_953_p2 <= std_logic_vector(unsigned(sub_ln1192_4_fu_940_p2) + unsigned(shl_ln1192_6_fu_946_p3));
    add_ln1192_7_fu_966_p2 <= std_logic_vector(unsigned(add_ln1192_6_fu_953_p2) + unsigned(shl_ln1192_7_fu_959_p3));
    add_ln1192_9_fu_1037_p2 <= std_logic_vector(unsigned(sub_ln1192_8_fu_1025_p2) + unsigned(shl_ln1192_s_fu_1030_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1234_p0 <= sext_ln1192_1_fu_258_p1(9 - 1 downto 0);
    grp_fu_1234_p2 <= std_logic_vector(unsigned(ret_V_fu_292_p2) + unsigned(sext_ln728_1_fu_326_p1));
    grp_fu_1266_p0 <= sext_ln1192_1_reg_1468(9 - 1 downto 0);
    grp_fu_1266_p2 <= std_logic_vector(signed(add_ln1192_reg_1493) + signed(rhs_V_3_fu_450_p3));
    grp_fu_1274_p0 <= sext_ln1118_7_fu_472_p1(12 - 1 downto 0);
    grp_fu_1274_p2 <= sext_ln1118_fu_432_p1(9 - 1 downto 0);
    grp_fu_1319_p0 <= sext_ln1118_2_fu_435_p1(9 - 1 downto 0);
    grp_fu_1319_p1 <= sext_ln1118_18_fu_556_p1(12 - 1 downto 0);
    grp_fu_1319_p2 <= sext_ln1192_reg_1412_pp0_iter1_reg(9 - 1 downto 0);
    grp_fu_1326_p0 <= sext_ln1118_18_fu_556_p1(12 - 1 downto 0);
    grp_fu_1326_p2 <= sext_ln1192_13_fu_560_p1(9 - 1 downto 0);
    grp_fu_1334_p0 <= sext_ln1192_10_fu_540_p1(9 - 1 downto 0);
    grp_fu_1334_p2 <= (p_Val2_10_reg_1434_pp0_iter1_reg & ap_const_lv15_0);
    grp_fu_1342_p2 <= sext_ln1192_14_fu_580_p1(9 - 1 downto 0);
    grp_fu_1350_p2 <= sext_ln1192_14_fu_580_p1(9 - 1 downto 0);
    grp_fu_1385_p2 <= sext_ln1192_14_fu_580_p1(9 - 1 downto 0);
    lhs_V_fu_733_p3 <= (ret_V_8_fu_727_p2 & ap_const_lv5_0);
    mul_ln1118_fu_387_p0 <= sext_ln1118_12_fu_362_p1(9 - 1 downto 0);
    mul_ln1118_fu_387_p1 <= sext_ln1116_1_fu_268_p1(9 - 1 downto 0);
    mul_ln1118_fu_387_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_fu_387_p0) * signed(mul_ln1118_fu_387_p1))), 18));
    mul_ln1192_14_fu_1358_p0 <= sext_ln1192_14_fu_580_p1(9 - 1 downto 0);
    mul_ln1192_15_fu_1079_p1 <= sext_ln1192_16_reg_1615(9 - 1 downto 0);
    mul_ln1192_15_fu_1079_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv14_3A) * signed(mul_ln1192_15_fu_1079_p1))), 14));
    mul_ln1192_17_fu_1248_p0 <= sext_ln1192_1_fu_258_p1(9 - 1 downto 0);
    mul_ln1192_18_fu_1372_p0 <= sext_ln1118_13_fu_506_p1(9 - 1 downto 0);
    mul_ln1192_19_fu_1379_p0 <= sext_ln1192_13_fu_560_p1(9 - 1 downto 0);
    mul_ln1192_20_fu_1254_p0 <= sext_ln1118_29_fu_419_p1(9 - 1 downto 0);
    mul_ln1192_21_fu_1260_p0 <= sext_ln1118_29_fu_419_p1(9 - 1 downto 0);
    mul_ln1192_3_fu_1283_p0 <= sext_ln1118_fu_432_p1(9 - 1 downto 0);
    mul_ln1192_4_fu_1289_p0 <= sext_ln1192_7_fu_509_p1(9 - 1 downto 0);
    mul_ln1192_5_fu_1295_p0 <= sext_ln1192_10_fu_540_p1(9 - 1 downto 0);
    mul_ln1192_6_fu_1301_p0 <= sext_ln1118_13_fu_506_p1(9 - 1 downto 0);
    mul_ln1192_7_fu_1307_p0 <= sext_ln1192_7_fu_509_p1(9 - 1 downto 0);
    mul_ln1192_7_fu_1307_p1 <= sext_ln1118_17_fu_546_p1(18 - 1 downto 0);
    mul_ln1192_8_fu_1313_p0 <= sext_ln1192_10_fu_540_p1(9 - 1 downto 0);
    mul_ln1192_8_fu_1313_p1 <= sext_ln1118_17_fu_546_p1(18 - 1 downto 0);
    r_V_10_fu_301_p3 <= (p_Val2_10_reg_1434 & ap_const_lv2_0);
    r_V_12_fu_515_p3 <= (p_Val2_10_reg_1434_pp0_iter1_reg & ap_const_lv1_0);
    r_V_13_fu_530_p0 <= sext_ln1118_13_fu_506_p1(9 - 1 downto 0);
    r_V_13_fu_530_p1 <= sext_ln1116_4_fu_526_p1(10 - 1 downto 0);
    r_V_13_fu_530_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_13_fu_530_p0) * signed(r_V_13_fu_530_p1))), 19));
    r_V_19_fu_583_p0 <= sext_ln1192_14_fu_580_p1(9 - 1 downto 0);
    r_V_19_fu_583_p1 <= sext_ln1116_4_fu_526_p1(10 - 1 downto 0);
    r_V_19_fu_583_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_19_fu_583_p0) * signed(r_V_19_fu_583_p1))), 19));
    r_V_22_fu_617_p1 <= tmp_5_reg_1457_pp0_iter1_reg;
    r_V_22_fu_617_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv14_B) * signed(r_V_22_fu_617_p1))), 14));
    r_V_24_fu_393_p0 <= sext_ln1118_12_fu_362_p1(9 - 1 downto 0);
    r_V_24_fu_393_p1 <= sext_ln1118_12_fu_362_p1(9 - 1 downto 0);
    r_V_24_fu_393_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_24_fu_393_p0) * signed(r_V_24_fu_393_p1))), 18));
    r_V_25_fu_549_p3 <= (p_Val2_10_reg_1434_pp0_iter1_reg & ap_const_lv3_0);
    r_V_30_fu_409_p0 <= sext_ln1117_fu_255_p1(9 - 1 downto 0);
    r_V_30_fu_409_p1 <= sext_ln1118_21_fu_384_p1(9 - 1 downto 0);
    r_V_30_fu_409_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_30_fu_409_p0) * signed(r_V_30_fu_409_p1))), 18));
    r_V_32_fu_422_p0 <= sext_ln1118_21_fu_384_p1(9 - 1 downto 0);
    r_V_32_fu_422_p1 <= sext_ln1118_21_fu_384_p1(9 - 1 downto 0);
    r_V_32_fu_422_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_32_fu_422_p0) * signed(r_V_32_fu_422_p1))), 18));
    r_V_34_fu_219_p0 <= tmp_1_fu_183_p4;
    r_V_34_fu_219_p1 <= r_V_fu_207_p3;
    r_V_34_fu_219_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_34_fu_219_p0) * signed(r_V_34_fu_219_p1))), 19));
    r_V_35_fu_274_p0 <= sext_ln1116_1_fu_268_p1(9 - 1 downto 0);
    r_V_35_fu_274_p1 <= sext_ln1118_1_fu_271_p1(9 - 1 downto 0);
    r_V_35_fu_274_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_35_fu_274_p0) * signed(r_V_35_fu_274_p1))), 18));
    r_V_36_fu_312_p2 <= std_logic_vector(signed(sext_ln1118_5_fu_308_p1) - signed(sext_ln1118_3_fu_298_p1));
    r_V_37_fu_347_p0 <= sext_ln1192_reg_1412(9 - 1 downto 0);
    r_V_37_fu_347_p1 <= r_V_4_fu_336_p3;
    r_V_37_fu_347_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_37_fu_347_p0) * signed(r_V_37_fu_347_p1))), 19));
    r_V_38_fu_863_p2 <= std_logic_vector(signed(sext_ln1118_8_fu_836_p1) + signed(sext_ln1118_11_fu_859_p1));
    r_V_39_fu_372_p2 <= std_logic_vector(signed(sext_ln1118_3_fu_298_p1) + signed(sext_ln1118_5_fu_308_p1));
    r_V_40_fu_378_p0 <= sext_ln1117_fu_255_p1(9 - 1 downto 0);
    r_V_40_fu_378_p1 <= sext_ln1118_12_fu_362_p1(9 - 1 downto 0);
    r_V_40_fu_378_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_40_fu_378_p0) * signed(r_V_40_fu_378_p1))), 18));
    r_V_41_fu_574_p2 <= std_logic_vector(signed(sext_ln1118_20_fu_570_p1) - signed(sext_ln1118_4_fu_438_p1));
    r_V_42_fu_1056_p0 <= sext_ln1118_21_reg_1520_pp0_iter2_reg(9 - 1 downto 0);
    r_V_42_fu_1056_p1 <= tmp_4_reg_1449_pp0_iter2_reg;
    r_V_42_fu_1056_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_42_fu_1056_p0) * signed(r_V_42_fu_1056_p1))), 18));
    r_V_43_fu_666_p0 <= sext_ln1118_fu_432_p1(9 - 1 downto 0);
    r_V_43_fu_666_p1 <= sext_ln1116_4_fu_526_p1(10 - 1 downto 0);
    r_V_43_fu_666_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_43_fu_666_p0) * signed(r_V_43_fu_666_p1))), 19));
    r_V_44_fu_403_p0 <= sext_ln1118_12_fu_362_p1(9 - 1 downto 0);
    r_V_44_fu_403_p1 <= sext_ln1118_21_fu_384_p1(9 - 1 downto 0);
    r_V_44_fu_403_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_44_fu_403_p0) * signed(r_V_44_fu_403_p1))), 18));
    r_V_45_fu_465_p3 <= (tmp_1_reg_1399_pp0_iter1_reg & ap_const_lv3_0);
    r_V_46_fu_682_p3 <= (tmp_5_reg_1457_pp0_iter1_reg & ap_const_lv3_0);
    r_V_47_fu_705_p2 <= std_logic_vector(signed(sext_ln1118_18_fu_556_p1) - signed(sext_ln1118_2_fu_435_p1));
    r_V_48_fu_754_p2 <= std_logic_vector(signed(sext_ln1118_7_fu_472_p1) - signed(sext_ln700_fu_441_p1));
    r_V_4_fu_336_p3 <= (tmp_1_reg_1399 & ap_const_lv1_0);
    r_V_6_fu_356_p0 <= sext_ln1117_fu_255_p1(9 - 1 downto 0);
    r_V_6_fu_356_p1 <= sext_ln1118_1_fu_271_p1(9 - 1 downto 0);
    r_V_6_fu_356_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_6_fu_356_p0) * signed(r_V_6_fu_356_p1))), 18));
    r_V_8_fu_491_p3 <= (tmp_2_reg_1418_pp0_iter1_reg & ap_const_lv2_0);
    r_V_fu_207_p3 <= (trunc_ln1117_fu_179_p1 & ap_const_lv1_0);
    ret_V_2_fu_883_p2 <= std_logic_vector(signed(ap_const_lv24_F50000) + signed(sub_ln1192_2_fu_877_p2));
    ret_V_3_fu_1001_p2 <= std_logic_vector(signed(ap_const_lv29_1E600000) + signed(sub_ln1192_6_fu_995_p2));
    ret_V_4_fu_1098_p2 <= std_logic_vector(signed(ap_const_lv24_FB0000) + signed(add_ln1192_10_fu_1092_p2));
    ret_V_5_fu_1217_p2 <= std_logic_vector(signed(ap_const_lv24_F88000) + signed(sub_ln1192_16_fu_1211_p2));
    ret_V_6_fu_693_p2 <= std_logic_vector(unsigned(ap_const_lv23_0) - unsigned(rhs_V_9_fu_649_p3));
    ret_V_7_fu_699_p2 <= std_logic_vector(unsigned(ret_V_6_fu_693_p2) - unsigned(rhs_V_11_fu_672_p3));
    ret_V_8_fu_727_p2 <= std_logic_vector(signed(sext_ln703_fu_711_p1) + signed(sext_ln728_2_fu_723_p1));
    ret_V_9_fu_804_p2 <= std_logic_vector(signed(ap_const_lv29_1F300000) + signed(sub_ln1192_18_fu_798_p2));
    ret_V_fu_292_p2 <= std_logic_vector(signed(sext_ln728_fu_288_p1) - signed(rhs_V_fu_261_p3));
    rhs_V_10_fu_1115_p3 <= (r_V_43_reg_1630 & ap_const_lv5_0);
    rhs_V_11_fu_672_p3 <= (r_V_44_reg_1535 & ap_const_lv5_0);
    rhs_V_12_fu_1149_p3 <= (r_V_39_reg_1508_pp0_iter2_reg & ap_const_lv10_0);
    rhs_V_13_fu_1166_p3 <= (tmp_1_reg_1399_pp0_iter2_reg & ap_const_lv13_0);
    rhs_V_14_fu_1183_p3 <= (tmp_5_reg_1457_pp0_iter2_reg & ap_const_lv13_0);
    rhs_V_15_fu_1200_p3 <= (tmp_4_reg_1449_pp0_iter2_reg & ap_const_lv10_0);
    rhs_V_16_fu_715_p3 <= (r_V_47_fu_705_p2 & ap_const_lv10_0);
    rhs_V_17_fu_760_p3 <= (r_V_48_fu_754_p2 & ap_const_lv15_0);
    rhs_V_1_fu_280_p3 <= (r_V_35_fu_274_p2 & ap_const_lv5_0);
    rhs_V_2_fu_318_p3 <= (r_V_36_fu_312_p2 & ap_const_lv10_0);
    rhs_V_3_fu_450_p3 <= (r_V_37_reg_1488 & ap_const_lv5_0);
    rhs_V_4_fu_820_p3 <= (tmp_1_reg_1399_pp0_iter2_reg & ap_const_lv14_0);
    rhs_V_5_fu_869_p3 <= (r_V_38_fu_863_p2 & ap_const_lv10_0);
    rhs_V_6_fu_988_p3 <= (r_V_41_reg_1595 & ap_const_lv15_0);
    rhs_V_8_fu_1061_p3 <= (r_V_42_fu_1056_p2 & ap_const_lv5_0);
    rhs_V_9_fu_649_p3 <= (r_V_40_reg_1514 & ap_const_lv5_0);
    rhs_V_fu_261_p3 <= (r_V_34_reg_1429 & ap_const_lv5_0);
        sext_ln1116_1_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1117_reg_1394),18));

        sext_ln1116_4_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_12_fu_515_p3),19));

        sext_ln1117_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_1399),18));

        sext_ln1118_11_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_5_fu_852_p3),14));

        sext_ln1118_12_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_10_reg_1434),18));

        sext_ln1118_13_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_10_reg_1434_pp0_iter1_reg),19));

        sext_ln1118_17_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_40_reg_1514),24));

        sext_ln1118_18_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_25_fu_549_p3),13));

        sext_ln1118_1_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_1418),18));

        sext_ln1118_20_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_6_fu_563_p3),14));

        sext_ln1118_21_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1457),18));

        sext_ln1118_29_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1457),24));

        sext_ln1118_2_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_10_reg_1434_pp0_iter1_reg),13));

        sext_ln1118_3_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_10_reg_1434),12));

        sext_ln1118_4_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_10_reg_1473),14));

        sext_ln1118_5_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_10_fu_301_p3),12));

        sext_ln1118_7_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_45_fu_465_p3),13));

        sext_ln1118_8_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_1418_pp0_iter2_reg),14));

        sext_ln1118_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_1418_pp0_iter1_reg),19));

        sext_ln1192_10_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1449_pp0_iter1_reg),24));

        sext_ln1192_13_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1449_pp0_iter1_reg),19));

        sext_ln1192_14_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1457_pp0_iter1_reg),19));

        sext_ln1192_16_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1457_pp0_iter1_reg),14));

        sext_ln1192_18_fu_1069_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_8_fu_1061_p3),24));

        sext_ln1192_1_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_1418),24));

        sext_ln1192_22_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_9_fu_649_p3),24));

        sext_ln1192_23_fu_1127_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_11_reg_1635),24));

        sext_ln1192_25_fu_1156_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_12_fu_1149_p3),24));

        sext_ln1192_26_fu_1173_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_13_fu_1166_p3),24));

        sext_ln1192_27_fu_1190_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_14_fu_1183_p3),24));

        sext_ln1192_28_fu_1207_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_15_fu_1200_p3),24));

        sext_ln1192_29_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_17_fu_760_p3),29));

        sext_ln1192_5_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_4_fu_820_p3),24));

        sext_ln1192_7_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_1399_pp0_iter1_reg),24));

        sext_ln1192_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_183_p4),19));

        sext_ln700_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_1399_pp0_iter1_reg),13));

        sext_ln703_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_7_fu_699_p2),24));

        sext_ln728_1_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_2_fu_318_p3),24));

        sext_ln728_2_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_16_fu_715_p3),24));

        sext_ln728_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1_fu_280_p3),24));

    shl_ln1118_5_fu_852_p3 <= (tmp_2_reg_1418_pp0_iter2_reg & ap_const_lv4_0);
    shl_ln1118_6_fu_563_p3 <= (p_Val2_10_reg_1434_pp0_iter1_reg & ap_const_lv4_0);
    shl_ln1118_7_fu_600_p3 <= (tmp_1_reg_1399_pp0_iter1_reg & ap_const_lv2_0);
    shl_ln1192_10_fu_1043_p3 <= (mul_ln1192_14_reg_1620 & ap_const_lv5_0);
    shl_ln1192_11_fu_1084_p3 <= (mul_ln1192_15_fu_1079_p2 & ap_const_lv10_0);
    shl_ln1192_12_fu_637_p3 <= (mul_ln1192_18_fu_1372_p2 & ap_const_lv5_0);
    shl_ln1192_13_fu_1136_p3 <= (mul_ln1192_19_reg_1640 & ap_const_lv5_0);
    shl_ln1192_14_fu_741_p3 <= (mul_ln1192_20_reg_1540 & ap_const_lv5_0);
    shl_ln1192_15_fu_778_p3 <= (mul_ln1192_21_reg_1545 & ap_const_lv5_0);
    shl_ln1192_16_fu_791_p3 <= (grp_fu_1385_p3 & ap_const_lv10_0);
    shl_ln1192_1_fu_839_p3 <= (mul_ln1192_3_reg_1555 & ap_const_lv5_0);
    shl_ln1192_2_fu_900_p3 <= (mul_ln1192_4_reg_1560 & ap_const_lv5_0);
    shl_ln1192_3_fu_907_p3 <= (mul_ln1192_5_reg_1565 & ap_const_lv5_0);
    shl_ln1192_4_fu_920_p3 <= (mul_ln1192_6_reg_1570 & ap_const_lv10_0);
    shl_ln1192_5_fu_933_p3 <= (mul_ln1192_7_reg_1575 & ap_const_lv5_0);
    shl_ln1192_6_fu_946_p3 <= (mul_ln1192_8_reg_1580 & ap_const_lv5_0);
    shl_ln1192_7_fu_959_p3 <= (mul_ln1192_9_reg_1585 & ap_const_lv10_0);
    shl_ln1192_8_fu_975_p3 <= (mul_ln1192_10_reg_1590 & ap_const_lv10_0);
    shl_ln1192_9_fu_1018_p3 <= (mul_ln1192_12_reg_1605 & ap_const_lv5_0);
    shl_ln1192_s_fu_1030_p3 <= (mul_ln1192_13_reg_1610 & ap_const_lv5_0);
    shl_ln_fu_476_p3 <= (grp_fu_1274_p3 & ap_const_lv5_0);
    sub_ln1192_10_fu_1073_p2 <= std_logic_vector(unsigned(sub_ln1192_9_fu_1050_p2) - unsigned(sext_ln1192_18_fu_1069_p1));
    sub_ln1192_12_fu_644_p2 <= std_logic_vector(signed(grp_fu_1364_p3) - signed(shl_ln1192_12_fu_637_p3));
    sub_ln1192_13_fu_1122_p2 <= std_logic_vector(unsigned(add_ln1192_12_reg_1625) - unsigned(rhs_V_10_fu_1115_p3));
    sub_ln1192_14_fu_1177_p2 <= std_logic_vector(unsigned(add_ln1192_15_fu_1160_p2) - unsigned(sext_ln1192_26_fu_1173_p1));
    sub_ln1192_15_fu_1194_p2 <= std_logic_vector(unsigned(sub_ln1192_14_fu_1177_p2) - unsigned(sext_ln1192_27_fu_1190_p1));
    sub_ln1192_16_fu_1211_p2 <= std_logic_vector(unsigned(sub_ln1192_15_fu_1194_p2) - unsigned(sext_ln1192_28_fu_1207_p1));
    sub_ln1192_17_fu_772_p2 <= std_logic_vector(unsigned(add_ln1192_18_fu_748_p2) - unsigned(sext_ln1192_29_fu_768_p1));
    sub_ln1192_18_fu_798_p2 <= std_logic_vector(unsigned(add_ln1192_19_fu_785_p2) - unsigned(shl_ln1192_16_fu_791_p3));
    sub_ln1192_1_fu_483_p2 <= std_logic_vector(signed(grp_fu_1266_p3) - signed(shl_ln_fu_476_p3));
    sub_ln1192_2_fu_877_p2 <= std_logic_vector(unsigned(add_ln1192_3_fu_846_p2) - unsigned(rhs_V_5_fu_869_p3));
    sub_ln1192_3_fu_914_p2 <= std_logic_vector(unsigned(shl_ln1192_3_fu_907_p3) - unsigned(shl_ln1192_2_fu_900_p3));
    sub_ln1192_4_fu_940_p2 <= std_logic_vector(unsigned(add_ln1192_5_fu_927_p2) - unsigned(shl_ln1192_5_fu_933_p3));
    sub_ln1192_5_fu_982_p2 <= std_logic_vector(unsigned(add_ln1192_7_fu_966_p2) - unsigned(shl_ln1192_8_fu_975_p3));
    sub_ln1192_6_fu_995_p2 <= std_logic_vector(unsigned(sub_ln1192_5_fu_982_p2) - unsigned(rhs_V_6_fu_988_p3));
    sub_ln1192_8_fu_1025_p2 <= std_logic_vector(signed(sub_ln1192_7_reg_1600) - signed(shl_ln1192_9_fu_1018_p3));
    sub_ln1192_9_fu_1050_p2 <= std_logic_vector(unsigned(add_ln1192_9_fu_1037_p2) - unsigned(shl_ln1192_10_fu_1043_p3));
    tmp_1_fu_183_p4 <= x_V_in_sig(143 downto 135);
    trunc_ln1117_fu_179_p1 <= x_V_in_sig(9 - 1 downto 0);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, x_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V_ap_vld, x_V, x_V_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

    y_0_V <= ret_V_2_fu_883_p2(23 downto 15);

    y_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_V <= ret_V_3_fu_1001_p2(28 downto 20);

    y_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= ret_V_4_fu_1098_p2(23 downto 15);

    y_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_3_V <= ret_V_5_fu_1217_p2(23 downto 15);

    y_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= trunc_ln708_4_reg_1645;

    y_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
