// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _myproject_HH_
#define _myproject_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct myproject : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<80> > x_V;
    sc_in< sc_logic > x_V_ap_vld;
    sc_out< sc_lv<5> > y_0_V;
    sc_out< sc_logic > y_0_V_ap_vld;
    sc_out< sc_lv<5> > y_1_V;
    sc_out< sc_logic > y_1_V_ap_vld;
    sc_out< sc_lv<5> > y_2_V;
    sc_out< sc_logic > y_2_V_ap_vld;
    sc_out< sc_lv<5> > y_3_V;
    sc_out< sc_logic > y_3_V_ap_vld;
    sc_out< sc_lv<5> > y_4_V;
    sc_out< sc_logic > y_4_V_ap_vld;


    // Module declarations
    myproject(sc_module_name name);
    SC_HAS_PROCESS(myproject);

    ~myproject();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<80> > x_V_preg;
    sc_signal< sc_lv<80> > x_V_in_sig;
    sc_signal< sc_logic > x_V_ap_vld_preg;
    sc_signal< sc_logic > x_V_ap_vld_in_sig;
    sc_signal< sc_logic > x_V_blk_n;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<5> > tmp_fu_128_p4;
    sc_signal< sc_lv<7> > rhs_V_3_fu_138_p3;
    sc_signal< sc_lv<5> > tmp_1_fu_150_p4;
    sc_signal< sc_lv<7> > rhs_V_fu_160_p3;
    sc_signal< sc_lv<8> > sext_ln1192_fu_146_p1;
    sc_signal< sc_lv<8> > sext_ln1192_1_fu_168_p1;
    sc_signal< sc_lv<8> > sub_ln1192_fu_172_p2;
    sc_signal< sc_lv<8> > ret_V_fu_178_p2;
    sc_signal< sc_lv<5> > tmp_2_fu_205_p4;
    sc_signal< sc_lv<5> > tmp_3_fu_195_p4;
    sc_signal< sc_lv<4> > tmp_4_fu_227_p4;
    sc_signal< sc_lv<6> > shl_ln_fu_237_p3;
    sc_signal< sc_lv<6> > sext_ln1192_2_fu_223_p1;
    sc_signal< sc_lv<6> > sub_ln1192_1_fu_245_p2;
    sc_signal< sc_lv<8> > shl_ln1192_1_fu_251_p3;
    sc_signal< sc_lv<8> > rhs_V_1_fu_215_p3;
    sc_signal< sc_lv<8> > sub_ln1192_2_fu_259_p2;
    sc_signal< sc_lv<8> > ret_V_2_fu_265_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<80> ap_const_lv80_0;
    static const sc_lv<5> ap_const_lv5_1E;
    static const sc_lv<5> ap_const_lv5_1F;
    static const sc_lv<32> ap_const_lv32_4B;
    static const sc_lv<32> ap_const_lv32_4F;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<8> ap_const_lv8_F0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_46;
    static const sc_lv<32> ap_const_lv32_4A;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<8> ap_const_lv8_F8;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ret_V_2_fu_265_p2();
    void thread_ret_V_fu_178_p2();
    void thread_rhs_V_1_fu_215_p3();
    void thread_rhs_V_3_fu_138_p3();
    void thread_rhs_V_fu_160_p3();
    void thread_sext_ln1192_1_fu_168_p1();
    void thread_sext_ln1192_2_fu_223_p1();
    void thread_sext_ln1192_fu_146_p1();
    void thread_shl_ln1192_1_fu_251_p3();
    void thread_shl_ln_fu_237_p3();
    void thread_sub_ln1192_1_fu_245_p2();
    void thread_sub_ln1192_2_fu_259_p2();
    void thread_sub_ln1192_fu_172_p2();
    void thread_tmp_1_fu_150_p4();
    void thread_tmp_2_fu_205_p4();
    void thread_tmp_3_fu_195_p4();
    void thread_tmp_4_fu_227_p4();
    void thread_tmp_fu_128_p4();
    void thread_x_V_ap_vld_in_sig();
    void thread_x_V_blk_n();
    void thread_x_V_in_sig();
    void thread_y_0_V();
    void thread_y_0_V_ap_vld();
    void thread_y_1_V();
    void thread_y_1_V_ap_vld();
    void thread_y_2_V();
    void thread_y_2_V_ap_vld();
    void thread_y_3_V();
    void thread_y_3_V_ap_vld();
    void thread_y_4_V();
    void thread_y_4_V_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
