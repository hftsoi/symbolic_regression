// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.649500,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=34,HLS_SYN_LUT=291,HLS_VERSION=2020_1}" *)

module myproject (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V,
        x_V_ap_vld,
        y_0_V,
        y_0_V_ap_vld,
        y_1_V,
        y_1_V_ap_vld,
        y_2_V,
        y_2_V_ap_vld,
        y_3_V,
        y_3_V_ap_vld,
        y_4_V,
        y_4_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x_V;
input   x_V_ap_vld;
output  [1:0] y_0_V;
output   y_0_V_ap_vld;
output  [1:0] y_1_V;
output   y_1_V_ap_vld;
output  [1:0] y_2_V;
output   y_2_V_ap_vld;
output  [1:0] y_3_V;
output   y_3_V_ap_vld;
output  [1:0] y_4_V;
output   y_4_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_0_V_ap_vld;
reg y_1_V_ap_vld;
reg y_2_V_ap_vld;
reg y_3_V_ap_vld;
reg y_4_V_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] x_V_preg;
reg   [31:0] x_V_in_sig;
reg    x_V_ap_vld_preg;
reg    x_V_ap_vld_in_sig;
reg    x_V_blk_n;
reg    ap_block_state1;
wire  signed [1:0] tmp_1_fu_142_p4;
wire  signed [1:0] tmp_fu_132_p4;
wire  signed [1:0] r_V_fu_170_p0;
wire  signed [3:0] sext_ln1116_fu_166_p1;
wire  signed [1:0] r_V_fu_170_p1;
wire   [3:0] r_V_fu_170_p2;
wire   [5:0] rhs_V_fu_176_p3;
wire   [2:0] shl_ln_fu_190_p3;
wire  signed [3:0] sext_ln1118_fu_198_p1;
wire   [5:0] ret_V_fu_184_p2;
wire   [3:0] r_V_1_fu_202_p2;
wire   [7:0] rhs_V_1_fu_212_p3;
wire  signed [7:0] sext_ln703_fu_208_p1;
wire   [2:0] shl_ln1118_1_fu_226_p3;
wire  signed [3:0] sext_ln1118_1_fu_234_p1;
wire   [3:0] r_V_2_fu_238_p2;
wire   [7:0] ret_V_1_fu_220_p2;
wire   [7:0] rhs_V_2_fu_244_p3;
wire   [7:0] sub_ln1192_fu_252_p2;
wire   [7:0] ret_V_2_fu_258_p2;
wire  signed [1:0] p_Val2_9_fu_156_p4;
wire  signed [1:0] r_V_3_fu_279_p0;
wire  signed [1:0] r_V_3_fu_279_p1;
wire  signed [3:0] sext_ln1116_1_fu_275_p1;
wire   [3:0] r_V_3_fu_279_p2;
wire   [7:0] rhs_V_10_fu_285_p3;
wire  signed [7:0] rhs_V_4_fu_297_p3;
wire  signed [8:0] sext_ln728_fu_293_p1;
wire  signed [8:0] sext_ln728_2_fu_305_p1;
wire   [8:0] ret_V_3_fu_309_p2;
wire   [0:0] tmp_2_fu_315_p3;
wire  signed [1:0] tmp_3_fu_332_p4;
wire  signed [1:0] r_V_4_fu_356_p0;
wire  signed [3:0] sext_ln700_fu_342_p1;
wire  signed [1:0] r_V_4_fu_356_p1;
wire   [3:0] r_V_4_fu_356_p2;
wire   [5:0] rhs_V_5_fu_362_p3;
wire   [7:0] sub_ln1192_1_fu_346_p2;
wire  signed [7:0] sext_ln1192_fu_370_p1;
wire  signed [2:0] sext_ln1118_2_fu_352_p1;
wire   [2:0] r_V_5_fu_380_p2;
wire   [6:0] rhs_V_6_fu_386_p3;
wire  signed [7:0] sext_ln1192_1_fu_394_p1;
wire   [7:0] sub_ln1192_2_fu_374_p2;
wire   [7:0] add_ln1192_fu_398_p2;
wire   [1:0] trunc_ln708_4_fu_404_p4;
wire  signed [1:0] r_V_6_fu_421_p0;
wire  signed [1:0] r_V_6_fu_421_p1;
wire   [3:0] r_V_6_fu_421_p2;
wire   [5:0] rhs_V_7_fu_427_p3;
wire   [5:0] ret_V_4_fu_435_p2;
wire   [5:0] rhs_V_8_fu_445_p3;
wire  signed [6:0] sext_ln703_1_fu_441_p1;
wire  signed [6:0] sext_ln728_1_fu_453_p1;
wire   [6:0] ret_V_5_fu_457_p2;
wire   [5:0] rhs_V_9_fu_467_p3;
wire  signed [7:0] sext_ln1192_2_fu_463_p1;
wire  signed [7:0] sext_ln1192_3_fu_475_p1;
wire   [7:0] sub_ln1192_3_fu_479_p2;
wire   [1:0] trunc_ln708_5_fu_485_p4;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 x_V_preg = 32'd0;
#0 x_V_ap_vld_preg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_V_ap_vld_preg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            x_V_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_V_ap_vld == 1'b1))) begin
            x_V_ap_vld_preg <= x_V_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_V_preg <= 32'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_V_ap_vld == 1'b1))) begin
            x_V_preg <= x_V;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((x_V_ap_vld == 1'b1)) begin
        x_V_ap_vld_in_sig = x_V_ap_vld;
    end else begin
        x_V_ap_vld_in_sig = x_V_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_V_blk_n = x_V_ap_vld;
    end else begin
        x_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x_V_ap_vld == 1'b1)) begin
        x_V_in_sig = x_V;
    end else begin
        x_V_in_sig = x_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_0_V_ap_vld = 1'b1;
    end else begin
        y_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_1_V_ap_vld = 1'b1;
    end else begin
        y_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_2_V_ap_vld = 1'b1;
    end else begin
        y_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_3_V_ap_vld = 1'b1;
    end else begin
        y_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_4_V_ap_vld = 1'b1;
    end else begin
        y_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_fu_398_p2 = ($signed(sext_ln1192_1_fu_394_p1) + $signed(sub_ln1192_2_fu_374_p2));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0));
end

assign p_Val2_9_fu_156_p4 = {{x_V_in_sig[29:28]}};

assign r_V_1_fu_202_p2 = ($signed(4'd0) - $signed(sext_ln1118_fu_198_p1));

assign r_V_2_fu_238_p2 = ($signed(4'd0) - $signed(sext_ln1118_1_fu_234_p1));

assign r_V_3_fu_279_p0 = sext_ln1116_fu_166_p1;

assign r_V_3_fu_279_p1 = sext_ln1116_1_fu_275_p1;

assign r_V_3_fu_279_p2 = ($signed(r_V_3_fu_279_p0) * $signed(r_V_3_fu_279_p1));

assign r_V_4_fu_356_p0 = sext_ln700_fu_342_p1;

assign r_V_4_fu_356_p1 = sext_ln700_fu_342_p1;

assign r_V_4_fu_356_p2 = ($signed(r_V_4_fu_356_p0) * $signed(r_V_4_fu_356_p1));

assign r_V_5_fu_380_p2 = ($signed(3'd0) - $signed(sext_ln1118_2_fu_352_p1));

assign r_V_6_fu_421_p0 = sext_ln1116_1_fu_275_p1;

assign r_V_6_fu_421_p1 = sext_ln1116_1_fu_275_p1;

assign r_V_6_fu_421_p2 = ($signed(r_V_6_fu_421_p0) * $signed(r_V_6_fu_421_p1));

assign r_V_fu_170_p0 = sext_ln1116_fu_166_p1;

assign r_V_fu_170_p1 = tmp_1_fu_142_p4;

assign r_V_fu_170_p2 = ($signed(r_V_fu_170_p0) * $signed(r_V_fu_170_p1));

assign ret_V_1_fu_220_p2 = ($signed(rhs_V_1_fu_212_p3) + $signed(sext_ln703_fu_208_p1));

assign ret_V_2_fu_258_p2 = (8'd64 + sub_ln1192_fu_252_p2);

assign ret_V_3_fu_309_p2 = ($signed(sext_ln728_fu_293_p1) - $signed(sext_ln728_2_fu_305_p1));

assign ret_V_4_fu_435_p2 = (6'd0 - rhs_V_7_fu_427_p3);

assign ret_V_5_fu_457_p2 = ($signed(sext_ln703_1_fu_441_p1) - $signed(sext_ln728_1_fu_453_p1));

assign ret_V_fu_184_p2 = (6'd0 - rhs_V_fu_176_p3);

assign rhs_V_10_fu_285_p3 = {{r_V_3_fu_279_p2}, {4'd0}};

assign rhs_V_1_fu_212_p3 = {{r_V_1_fu_202_p2}, {4'd0}};

assign rhs_V_2_fu_244_p3 = {{r_V_2_fu_238_p2}, {4'd0}};

assign rhs_V_4_fu_297_p3 = {{p_Val2_9_fu_156_p4}, {6'd0}};

assign rhs_V_5_fu_362_p3 = {{r_V_4_fu_356_p2}, {2'd0}};

assign rhs_V_6_fu_386_p3 = {{r_V_5_fu_380_p2}, {4'd0}};

assign rhs_V_7_fu_427_p3 = {{r_V_6_fu_421_p2}, {2'd0}};

assign rhs_V_8_fu_445_p3 = {{tmp_fu_132_p4}, {4'd0}};

assign rhs_V_9_fu_467_p3 = {{tmp_3_fu_332_p4}, {4'd0}};

assign rhs_V_fu_176_p3 = {{r_V_fu_170_p2}, {2'd0}};

assign sext_ln1116_1_fu_275_p1 = p_Val2_9_fu_156_p4;

assign sext_ln1116_fu_166_p1 = tmp_fu_132_p4;

assign sext_ln1118_1_fu_234_p1 = $signed(shl_ln1118_1_fu_226_p3);

assign sext_ln1118_2_fu_352_p1 = tmp_3_fu_332_p4;

assign sext_ln1118_fu_198_p1 = $signed(shl_ln_fu_190_p3);

assign sext_ln1192_1_fu_394_p1 = $signed(rhs_V_6_fu_386_p3);

assign sext_ln1192_2_fu_463_p1 = $signed(ret_V_5_fu_457_p2);

assign sext_ln1192_3_fu_475_p1 = $signed(rhs_V_9_fu_467_p3);

assign sext_ln1192_fu_370_p1 = $signed(rhs_V_5_fu_362_p3);

assign sext_ln700_fu_342_p1 = tmp_3_fu_332_p4;

assign sext_ln703_1_fu_441_p1 = $signed(ret_V_4_fu_435_p2);

assign sext_ln703_fu_208_p1 = $signed(ret_V_fu_184_p2);

assign sext_ln728_1_fu_453_p1 = $signed(rhs_V_8_fu_445_p3);

assign sext_ln728_2_fu_305_p1 = rhs_V_4_fu_297_p3;

assign sext_ln728_fu_293_p1 = $signed(rhs_V_10_fu_285_p3);

assign shl_ln1118_1_fu_226_p3 = {{tmp_1_fu_142_p4}, {1'd0}};

assign shl_ln_fu_190_p3 = {{tmp_fu_132_p4}, {1'd0}};

assign sub_ln1192_1_fu_346_p2 = ($signed(8'd0) - $signed(rhs_V_4_fu_297_p3));

assign sub_ln1192_2_fu_374_p2 = ($signed(sub_ln1192_1_fu_346_p2) - $signed(sext_ln1192_fu_370_p1));

assign sub_ln1192_3_fu_479_p2 = ($signed(sext_ln1192_2_fu_463_p1) - $signed(sext_ln1192_3_fu_475_p1));

assign sub_ln1192_fu_252_p2 = (ret_V_1_fu_220_p2 - rhs_V_2_fu_244_p3);

assign tmp_1_fu_142_p4 = {{x_V_in_sig[5:4]}};

assign tmp_2_fu_315_p3 = ret_V_3_fu_309_p2[32'd8];

assign tmp_3_fu_332_p4 = {{x_V_in_sig[7:6]}};

assign tmp_fu_132_p4 = {{x_V_in_sig[31:30]}};

assign trunc_ln708_4_fu_404_p4 = {{add_ln1192_fu_398_p2[7:6]}};

assign trunc_ln708_5_fu_485_p4 = {{sub_ln1192_3_fu_479_p2[7:6]}};

assign y_0_V = {{ret_V_2_fu_258_p2[7:6]}};

assign y_1_V = ((tmp_2_fu_315_p3[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign y_2_V = (trunc_ln708_4_fu_404_p4 ^ 2'd2);

assign y_3_V = (trunc_ln708_5_fu_485_p4 ^ 2'd2);

assign y_4_V = 2'd2;

endmodule //myproject
