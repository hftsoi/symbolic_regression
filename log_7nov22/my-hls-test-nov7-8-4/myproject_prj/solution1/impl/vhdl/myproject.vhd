-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (127 downto 0);
    y_0_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.083000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=468,HLS_SYN_LUT=1367,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv24_F90000 : STD_LOGIC_VECTOR (23 downto 0) := "111110010000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv20_F5000 : STD_LOGIC_VECTOR (19 downto 0) := "11110101000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv24_F30000 : STD_LOGIC_VECTOR (23 downto 0) := "111100110000000000000000";
    constant ap_const_lv12_1D : STD_LOGIC_VECTOR (11 downto 0) := "000000011101";
    constant ap_const_lv20_FB000 : STD_LOGIC_VECTOR (19 downto 0) := "11111011000000000000";
    constant ap_const_lv20_F8000 : STD_LOGIC_VECTOR (19 downto 0) := "11111000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_preg : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (127 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_1_fu_171_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_961 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_961_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1117_fu_181_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1117_reg_970 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1117_reg_970_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_976 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_976_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_18_fu_199_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_18_reg_984 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_7_reg_989 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_19_fu_215_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_19_reg_1002 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_1008 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1014 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1014_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln700_fu_248_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln700_reg_1023 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1192_fu_307_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1192_reg_1029 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_3_fu_918_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_3_reg_1034 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_4_fu_924_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_4_reg_1039 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1192_fu_363_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1192_reg_1044 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_6_fu_378_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_6_reg_1049 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1192_6_fu_930_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1192_6_reg_1054 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_23_fu_406_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_23_reg_1059 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_9_fu_412_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_9_reg_1064 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_936_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1192_5_reg_1070 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_944_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1192_8_reg_1075 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1192_10_fu_534_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1192_10_reg_1080 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln708_4_reg_1085 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln1117_fu_167_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_18_fu_199_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_18_fu_199_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_19_fu_215_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_19_fu_215_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_1_fu_251_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln728_fu_258_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal rhs_V_fu_241_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_900_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal rhs_V_2_fu_277_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_28_fu_289_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_909_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1192_1_fu_284_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln1192_1_fu_284_p2 : signal is "no";
    signal shl_ln_fu_300_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_20_fu_325_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_21_fu_340_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_21_fu_340_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_21_fu_340_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_5_fu_350_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1118_2_fu_316_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_5_fu_350_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_5_fu_350_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_6_fu_367_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_5_fu_374_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1118_1_fu_313_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_22_fu_382_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln1118_6_fu_395_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1118_8_fu_402_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_4_fu_332_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_9_fu_415_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_9_fu_415_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_9_fu_415_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_29_fu_435_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_10_fu_446_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1192_10_fu_446_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_10_fu_446_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1192_9_fu_452_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_26_fu_466_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_26_fu_466_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_26_fu_466_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1192_8_fu_460_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal rhs_V_9_fu_472_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_27_fu_486_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1118_7_fu_392_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_27_fu_486_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_27_fu_486_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1192_9_fu_480_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal rhs_V_10_fu_492_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal rhs_V_11_fu_506_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1192_11_fu_500_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1192_13_fu_513_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal rhs_V_12_fu_523_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln1192_12_fu_517_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1192_14_fu_530_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_fu_296_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln700_1_fu_268_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_V_fu_540_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_30_fu_548_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_14_fu_558_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln703_fu_554_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln728_1_fu_566_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_952_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_5_fu_570_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_s_fu_576_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1192_12_fu_583_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_6_fu_589_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_3_fu_605_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1192_3_fu_612_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_2_fu_621_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_2_fu_632_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1192_2_fu_632_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_2_fu_632_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1192_2_fu_616_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1192_1_fu_637_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal rhs_V_4_fu_651_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln1192_3_fu_645_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1192_5_fu_658_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1192_1_fu_662_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_1_fu_668_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1192_3_fu_692_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_2_fu_685_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1192_2_fu_699_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_4_fu_705_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1192_5_fu_718_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1192_5_fu_718_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_5_fu_718_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1192_5_fu_712_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_5_fu_722_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1192_6_fu_730_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1192_6_fu_736_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1192_3_fu_743_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_5_fu_749_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1192_4_fu_756_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_2_fu_762_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_24_fu_779_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_24_fu_779_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_24_fu_779_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_7_fu_783_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_25_fu_796_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_25_fu_796_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_25_fu_796_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1192_6_fu_791_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of sub_ln1192_6_fu_791_p2 : signal is "no";
    signal rhs_V_8_fu_800_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1192_8_fu_808_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1192_7_fu_817_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_9_fu_830_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1192_9_fu_830_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1192_7_fu_824_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1192_8_fu_836_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1192_9_fu_844_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_3_fu_850_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal rhs_V_13_fu_867_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1192_15_fu_874_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1192_11_fu_878_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_4_fu_883_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_900_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_909_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_909_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_909_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1192_4_fu_924_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1192_9_fu_360_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_6_fu_930_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_936_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_936_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_944_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1118_10_fu_432_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_944_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_11_fu_442_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_944_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_952_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_952_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_952_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mac_muladd_8s_16s_20ns_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_am_addmul_8s_10s_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_mul_mul_8s_17s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_mul_mul_8s_16s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_mul_mul_8s_11s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_mac_mul_sub_8s_16s_20ns_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_am_submul_10s_8s_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    myproject_mac_muladd_8s_16s_20ns_20_1_1_U1 : component myproject_mac_muladd_8s_16s_20ns_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 20,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_2_reg_976,
        din1 => r_V_19_reg_1002,
        din2 => grp_fu_900_p2,
        dout => grp_fu_900_p3);

    myproject_am_addmul_8s_10s_8s_16_1_1_U2 : component myproject_am_addmul_8s_10s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_909_p0,
        din1 => grp_fu_909_p1,
        din2 => grp_fu_909_p2,
        dout => grp_fu_909_p3);

    myproject_mul_mul_8s_17s_20_1_1_U3 : component myproject_mul_mul_8s_17s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 17,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_1_reg_961,
        din1 => r_V_21_fu_340_p2,
        dout => mul_ln1192_3_fu_918_p2);

    myproject_mul_mul_8s_16s_20_1_1_U4 : component myproject_mul_mul_8s_16s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln1192_4_fu_924_p0,
        din1 => r_V_5_fu_350_p2,
        dout => mul_ln1192_4_fu_924_p2);

    myproject_mul_mul_8s_11s_16_1_1_U5 : component myproject_mul_mul_8s_11s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1192_6_fu_930_p0,
        din1 => r_V_22_fu_382_p2,
        dout => mul_ln1192_6_fu_930_p2);

    myproject_mac_mul_sub_8s_16s_20ns_20_1_1_U6 : component myproject_mac_mul_sub_8s_16s_20ns_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 20,
        dout_WIDTH => 20)
    port map (
        din0 => grp_fu_936_p0,
        din1 => r_V_9_fu_415_p2,
        din2 => grp_fu_936_p2,
        dout => grp_fu_936_p3);

    myproject_am_addmul_8s_10s_8s_16_1_1_U7 : component myproject_am_addmul_8s_10s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_944_p0,
        din1 => grp_fu_944_p1,
        din2 => grp_fu_944_p2,
        dout => grp_fu_944_p3);

    myproject_am_submul_10s_8s_8s_16_1_1_U8 : component myproject_am_submul_10s_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_952_p0,
        din1 => grp_fu_952_p1,
        din2 => grp_fu_952_p2,
        dout => grp_fu_952_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv128_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln1192_3_reg_1034 <= mul_ln1192_3_fu_918_p2;
                mul_ln1192_4_reg_1039 <= mul_ln1192_4_fu_924_p2;
                mul_ln1192_6_reg_1054 <= mul_ln1192_6_fu_930_p2;
                p_Val2_7_reg_989 <= x_V_in_sig(119 downto 112);
                r_V_18_reg_984 <= r_V_18_fu_199_p2;
                r_V_19_reg_1002 <= r_V_19_fu_215_p2;
                    r_V_23_reg_1059(11 downto 1) <= r_V_23_fu_406_p2(11 downto 1);
                sext_ln1117_reg_970 <= sext_ln1117_fu_181_p1;
                sext_ln1117_reg_970_pp0_iter1_reg <= sext_ln1117_reg_970;
                    sext_ln1118_6_reg_1049(15 downto 2) <= sext_ln1118_6_fu_378_p1(15 downto 2);
                sext_ln1118_9_reg_1064 <= sext_ln1118_9_fu_412_p1;
                sext_ln700_reg_1023 <= sext_ln700_fu_248_p1;
                    sub_ln1192_10_reg_1080(19 downto 4) <= sub_ln1192_10_fu_534_p2(19 downto 4);
                sub_ln1192_reg_1029 <= sub_ln1192_fu_307_p2;
                tmp_1_reg_961 <= x_V_in_sig(127 downto 120);
                tmp_1_reg_961_pp0_iter1_reg <= tmp_1_reg_961;
                tmp_2_reg_976 <= x_V_in_sig(23 downto 16);
                tmp_2_reg_976_pp0_iter1_reg <= tmp_2_reg_976;
                tmp_4_reg_1008 <= x_V_in_sig(39 downto 32);
                tmp_5_reg_1014 <= x_V_in_sig(31 downto 24);
                tmp_5_reg_1014_pp0_iter1_reg <= tmp_5_reg_1014;
                    trunc_ln1192_reg_1044(15 downto 1) <= trunc_ln1192_fu_363_p1(15 downto 1);
                trunc_ln708_4_reg_1085 <= ret_V_6_fu_589_p2(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln1192_8_reg_1075 <= grp_fu_944_p3;
                sub_ln1192_5_reg_1070 <= grp_fu_936_p3;
            end if;
        end if;
    end process;
    trunc_ln1192_reg_1044(0) <= '0';
    sext_ln1118_6_reg_1049(1 downto 0) <= "00";
    r_V_23_reg_1059(0) <= '0';
    sub_ln1192_10_reg_1080(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1192_11_fu_500_p2 <= std_logic_vector(unsigned(sub_ln1192_9_fu_480_p2) + unsigned(rhs_V_10_fu_492_p3));
    add_ln1192_12_fu_517_p2 <= std_logic_vector(unsigned(add_ln1192_11_fu_500_p2) + unsigned(sext_ln1192_13_fu_513_p1));
    add_ln1192_1_fu_284_p2 <= std_logic_vector(signed(grp_fu_900_p3) + signed(rhs_V_2_fu_277_p3));
    add_ln1192_2_fu_616_p2 <= std_logic_vector(unsigned(sub_ln1192_reg_1029) + unsigned(sext_ln1192_3_fu_612_p1));
    add_ln1192_3_fu_645_p2 <= std_logic_vector(unsigned(add_ln1192_2_fu_616_p2) + unsigned(shl_ln1192_1_fu_637_p3));
    add_ln1192_5_fu_712_p2 <= std_logic_vector(unsigned(sub_ln1192_2_fu_699_p2) + unsigned(shl_ln1192_4_fu_705_p3));
    add_ln1192_6_fu_730_p2 <= std_logic_vector(unsigned(add_ln1192_5_fu_712_p2) + unsigned(shl_ln1192_5_fu_722_p3));
    add_ln1192_8_fu_808_p2 <= std_logic_vector(unsigned(sub_ln1192_6_fu_791_p2) + unsigned(rhs_V_8_fu_800_p3));
    add_ln1192_9_fu_844_p2 <= std_logic_vector(unsigned(sub_ln1192_7_fu_824_p2) + unsigned(shl_ln1192_8_fu_836_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_900_p2 <= std_logic_vector(signed(sext_ln728_fu_258_p1) - signed(rhs_V_fu_241_p3));
    grp_fu_909_p0 <= sext_ln700_1_fu_268_p1(8 - 1 downto 0);
    grp_fu_909_p1 <= sext_ln1118_fu_296_p1(10 - 1 downto 0);
    grp_fu_909_p2 <= sext_ln700_fu_248_p1(8 - 1 downto 0);
    grp_fu_936_p0 <= sext_ln1192_9_fu_360_p1(8 - 1 downto 0);
    grp_fu_936_p2 <= (p_Val2_7_reg_989 & ap_const_lv12_0);
    grp_fu_944_p0 <= sext_ln1118_10_fu_432_p1(8 - 1 downto 0);
    grp_fu_944_p1 <= sext_ln1118_11_fu_442_p1(10 - 1 downto 0);
    grp_fu_944_p2 <= sext_ln1118_9_fu_412_p1(8 - 1 downto 0);
    grp_fu_952_p0 <= sext_ln1118_11_fu_442_p1(10 - 1 downto 0);
    grp_fu_952_p1 <= sext_ln1118_10_fu_432_p1(8 - 1 downto 0);
    grp_fu_952_p2 <= sext_ln1118_9_fu_412_p1(8 - 1 downto 0);
    lhs_V_fu_540_p3 <= (r_V_22_fu_382_p2 & ap_const_lv12_0);
    mul_ln1192_10_fu_446_p0 <= sext_ln1118_2_fu_316_p1(8 - 1 downto 0);
    mul_ln1192_10_fu_446_p1 <= r_V_6_fu_367_p3;
    mul_ln1192_10_fu_446_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_10_fu_446_p0) * signed(mul_ln1192_10_fu_446_p1))), 16));
    mul_ln1192_2_fu_632_p0 <= sext_ln700_reg_1023(8 - 1 downto 0);
    mul_ln1192_2_fu_632_p1 <= r_V_2_fu_621_p3;
    mul_ln1192_2_fu_632_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_2_fu_632_p0) * signed(mul_ln1192_2_fu_632_p1))), 16));
    mul_ln1192_4_fu_924_p0 <= sext_ln1192_9_fu_360_p1(8 - 1 downto 0);
    mul_ln1192_5_fu_718_p0 <= sext_ln1117_reg_970_pp0_iter1_reg(8 - 1 downto 0);
    mul_ln1192_5_fu_718_p1 <= sext_ln1118_6_reg_1049(10 - 1 downto 0);
    mul_ln1192_5_fu_718_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_5_fu_718_p0) * signed(mul_ln1192_5_fu_718_p1))), 16));
    mul_ln1192_6_fu_930_p0 <= sext_ln1118_7_fu_392_p1(8 - 1 downto 0);
    mul_ln1192_9_fu_830_p1 <= tmp_5_reg_1014_pp0_iter1_reg;
    mul_ln1192_9_fu_830_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv12_1D) * signed(mul_ln1192_9_fu_830_p1))), 12));
    r_V_18_fu_199_p0 <= sext_ln1117_fu_181_p1(8 - 1 downto 0);
    r_V_18_fu_199_p1 <= trunc_ln1117_fu_167_p1;
    r_V_18_fu_199_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_18_fu_199_p0) * signed(r_V_18_fu_199_p1))), 16));
    r_V_19_fu_215_p0 <= sext_ln1117_fu_181_p1(8 - 1 downto 0);
    r_V_19_fu_215_p1 <= sext_ln1117_fu_181_p1(8 - 1 downto 0);
    r_V_19_fu_215_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_19_fu_215_p0) * signed(r_V_19_fu_215_p1))), 16));
    r_V_20_fu_325_p3 <= (p_Val2_7_reg_989 & ap_const_lv1_0);
    r_V_21_fu_340_p0 <= p_Val2_7_reg_989;
    r_V_21_fu_340_p1 <= r_V_20_fu_325_p3;
    r_V_21_fu_340_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_21_fu_340_p0) * signed(r_V_21_fu_340_p1))), 17));
    r_V_22_fu_382_p2 <= std_logic_vector(signed(sext_ln1118_5_fu_374_p1) - signed(sext_ln1118_1_fu_313_p1));
    r_V_23_fu_406_p2 <= std_logic_vector(signed(sext_ln1118_8_fu_402_p1) - signed(sext_ln1118_4_fu_332_p1));
    r_V_24_fu_779_p0 <= sext_ln1117_reg_970_pp0_iter1_reg(8 - 1 downto 0);
    r_V_24_fu_779_p1 <= sext_ln1118_9_reg_1064(8 - 1 downto 0);
    r_V_24_fu_779_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_24_fu_779_p0) * signed(r_V_24_fu_779_p1))), 16));
    r_V_25_fu_796_p0 <= sext_ln700_reg_1023(8 - 1 downto 0);
    r_V_25_fu_796_p1 <= sext_ln1118_9_reg_1064(8 - 1 downto 0);
    r_V_25_fu_796_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_25_fu_796_p0) * signed(r_V_25_fu_796_p1))), 16));
    r_V_26_fu_466_p0 <= sext_ln700_fu_248_p1(8 - 1 downto 0);
    r_V_26_fu_466_p1 <= sext_ln1118_2_fu_316_p1(8 - 1 downto 0);
    r_V_26_fu_466_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_26_fu_466_p0) * signed(r_V_26_fu_466_p1))), 16));
    r_V_27_fu_486_p0 <= sext_ln1118_7_fu_392_p1(8 - 1 downto 0);
    r_V_27_fu_486_p1 <= sext_ln1118_2_fu_316_p1(8 - 1 downto 0);
    r_V_27_fu_486_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_27_fu_486_p0) * signed(r_V_27_fu_486_p1))), 16));
    r_V_28_fu_289_p3 <= (tmp_1_reg_961 & ap_const_lv2_0);
    r_V_29_fu_435_p3 <= (tmp_5_reg_1014 & ap_const_lv2_0);
    r_V_2_fu_621_p3 <= (tmp_2_reg_976_pp0_iter1_reg & ap_const_lv1_0);
    r_V_30_fu_548_p2 <= std_logic_vector(signed(sext_ln1118_fu_296_p1) - signed(sext_ln700_1_fu_268_p1));
    r_V_5_fu_350_p0 <= sext_ln1118_2_fu_316_p1(8 - 1 downto 0);
    r_V_5_fu_350_p1 <= sext_ln1118_2_fu_316_p1(8 - 1 downto 0);
    r_V_5_fu_350_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_5_fu_350_p0) * signed(r_V_5_fu_350_p1))), 16));
    r_V_6_fu_367_p3 <= (p_Val2_7_reg_989 & ap_const_lv2_0);
    r_V_9_fu_415_p0 <= sext_ln1118_9_fu_412_p1(8 - 1 downto 0);
    r_V_9_fu_415_p1 <= sext_ln1118_2_fu_316_p1(8 - 1 downto 0);
    r_V_9_fu_415_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_9_fu_415_p0) * signed(r_V_9_fu_415_p1))), 16));
    ret_V_1_fu_668_p2 <= std_logic_vector(signed(ap_const_lv20_F5000) + signed(sub_ln1192_1_fu_662_p2));
    ret_V_2_fu_762_p2 <= std_logic_vector(signed(ap_const_lv24_F30000) + signed(sub_ln1192_4_fu_756_p2));
    ret_V_3_fu_850_p2 <= std_logic_vector(signed(ap_const_lv20_FB000) + signed(add_ln1192_9_fu_844_p2));
    ret_V_4_fu_883_p2 <= std_logic_vector(signed(ap_const_lv20_F8000) + signed(sub_ln1192_11_fu_878_p2));
    ret_V_5_fu_570_p2 <= std_logic_vector(signed(sext_ln703_fu_554_p1) - signed(sext_ln728_1_fu_566_p1));
    ret_V_6_fu_589_p2 <= std_logic_vector(signed(ap_const_lv24_F90000) + signed(sub_ln1192_12_fu_583_p2));
    rhs_V_10_fu_492_p3 <= (r_V_27_fu_486_p2 & ap_const_lv4_0);
    rhs_V_11_fu_506_p3 <= (p_Val2_7_reg_989 & ap_const_lv9_0);
    rhs_V_12_fu_523_p3 <= (tmp_1_reg_961 & ap_const_lv10_0);
    rhs_V_13_fu_867_p3 <= (tmp_5_reg_1014_pp0_iter1_reg & ap_const_lv10_0);
    rhs_V_14_fu_558_p3 <= (r_V_30_fu_548_p2 & ap_const_lv12_0);
    rhs_V_1_fu_251_p3 <= (p_Val2_7_reg_989 & ap_const_lv8_0);
    rhs_V_2_fu_277_p3 <= (r_V_19_reg_1002 & ap_const_lv4_0);
    rhs_V_3_fu_605_p3 <= (tmp_1_reg_961_pp0_iter1_reg & ap_const_lv11_0);
    rhs_V_4_fu_651_p3 <= (tmp_2_reg_976_pp0_iter1_reg & ap_const_lv11_0);
    rhs_V_5_fu_749_p3 <= (r_V_23_reg_1059 & ap_const_lv12_0);
    rhs_V_7_fu_783_p3 <= (r_V_24_fu_779_p2 & ap_const_lv4_0);
    rhs_V_8_fu_800_p3 <= (r_V_25_fu_796_p2 & ap_const_lv4_0);
    rhs_V_9_fu_472_p3 <= (r_V_26_fu_466_p2 & ap_const_lv4_0);
    rhs_V_fu_241_p3 <= (r_V_18_reg_984 & ap_const_lv4_0);
        sext_ln1117_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_171_p4),16));

        sext_ln1118_10_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1014),11));

        sext_ln1118_11_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_29_fu_435_p3),11));

        sext_ln1118_1_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_7_reg_989),11));

        sext_ln1118_2_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_7_reg_989),16));

        sext_ln1118_4_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_20_fu_325_p3),12));

        sext_ln1118_5_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_6_fu_367_p3),11));

        sext_ln1118_6_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_6_fu_367_p3),16));

        sext_ln1118_7_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1008),16));

        sext_ln1118_8_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_6_fu_395_p3),12));

        sext_ln1118_9_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1014),16));

        sext_ln1118_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_28_fu_289_p3),11));

        sext_ln1192_13_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_11_fu_506_p3),20));

        sext_ln1192_14_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_12_fu_523_p3),20));

        sext_ln1192_15_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_13_fu_867_p3),20));

        sext_ln1192_3_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_3_fu_605_p3),20));

        sext_ln1192_5_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_4_fu_651_p3),20));

        sext_ln1192_9_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1008),20));

        sext_ln700_1_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_961),11));

        sext_ln700_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_976),16));

        sext_ln703_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_540_p3),24));

        sext_ln728_1_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_14_fu_558_p3),24));

        sext_ln728_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1_fu_251_p3),20));

    shl_ln1118_6_fu_395_p3 <= (p_Val2_7_reg_989 & ap_const_lv3_0);
    shl_ln1192_1_fu_637_p3 <= (mul_ln1192_2_fu_632_p2 & ap_const_lv4_0);
    shl_ln1192_2_fu_685_p3 <= (mul_ln1192_3_reg_1034 & ap_const_lv4_0);
    shl_ln1192_3_fu_692_p3 <= (mul_ln1192_4_reg_1039 & ap_const_lv4_0);
    shl_ln1192_4_fu_705_p3 <= (trunc_ln1192_reg_1044 & ap_const_lv8_0);
    shl_ln1192_5_fu_722_p3 <= (mul_ln1192_5_fu_718_p2 & ap_const_lv8_0);
    shl_ln1192_6_fu_736_p3 <= (mul_ln1192_6_reg_1054 & ap_const_lv8_0);
    shl_ln1192_7_fu_817_p3 <= (mul_ln1192_8_reg_1075 & ap_const_lv4_0);
    shl_ln1192_8_fu_836_p3 <= (mul_ln1192_9_fu_830_p2 & ap_const_lv8_0);
    shl_ln1192_9_fu_452_p3 <= (mul_ln1192_10_fu_446_p2 & ap_const_lv4_0);
    shl_ln1192_s_fu_576_p3 <= (grp_fu_952_p3 & ap_const_lv8_0);
    shl_ln_fu_300_p3 <= (grp_fu_909_p3 & ap_const_lv4_0);
    sub_ln1192_10_fu_534_p2 <= std_logic_vector(unsigned(add_ln1192_12_fu_517_p2) - unsigned(sext_ln1192_14_fu_530_p1));
    sub_ln1192_11_fu_878_p2 <= std_logic_vector(unsigned(sub_ln1192_10_reg_1080) - unsigned(sext_ln1192_15_fu_874_p1));
    sub_ln1192_12_fu_583_p2 <= std_logic_vector(unsigned(ret_V_5_fu_570_p2) - unsigned(shl_ln1192_s_fu_576_p3));
    sub_ln1192_1_fu_662_p2 <= std_logic_vector(unsigned(add_ln1192_3_fu_645_p2) - unsigned(sext_ln1192_5_fu_658_p1));
    sub_ln1192_2_fu_699_p2 <= std_logic_vector(unsigned(shl_ln1192_3_fu_692_p3) - unsigned(shl_ln1192_2_fu_685_p3));
    sub_ln1192_3_fu_743_p2 <= std_logic_vector(unsigned(add_ln1192_6_fu_730_p2) - unsigned(shl_ln1192_6_fu_736_p3));
    sub_ln1192_4_fu_756_p2 <= std_logic_vector(unsigned(sub_ln1192_3_fu_743_p2) - unsigned(rhs_V_5_fu_749_p3));
    sub_ln1192_6_fu_791_p2 <= std_logic_vector(signed(sub_ln1192_5_reg_1070) - signed(rhs_V_7_fu_783_p3));
    sub_ln1192_7_fu_824_p2 <= std_logic_vector(unsigned(add_ln1192_8_fu_808_p2) - unsigned(shl_ln1192_7_fu_817_p3));
    sub_ln1192_8_fu_460_p2 <= std_logic_vector(unsigned(ap_const_lv20_0) - unsigned(shl_ln1192_9_fu_452_p3));
    sub_ln1192_9_fu_480_p2 <= std_logic_vector(unsigned(sub_ln1192_8_fu_460_p2) - unsigned(rhs_V_9_fu_472_p3));
    sub_ln1192_fu_307_p2 <= std_logic_vector(unsigned(add_ln1192_1_fu_284_p2) - unsigned(shl_ln_fu_300_p3));
    tmp_1_fu_171_p4 <= x_V_in_sig(127 downto 120);
    trunc_ln1117_fu_167_p1 <= x_V_in_sig(8 - 1 downto 0);
    trunc_ln1192_fu_363_p1 <= r_V_21_fu_340_p2(16 - 1 downto 0);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, x_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V_ap_vld, x_V, x_V_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

    y_0_V <= ret_V_1_fu_668_p2(19 downto 12);

    y_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_V <= ret_V_2_fu_762_p2(23 downto 16);

    y_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= ret_V_3_fu_850_p2(19 downto 12);

    y_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_3_V <= ret_V_4_fu_883_p2(19 downto 12);

    y_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= trunc_ln708_4_reg_1085;

    y_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
