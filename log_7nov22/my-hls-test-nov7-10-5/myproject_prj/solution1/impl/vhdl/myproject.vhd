-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (159 downto 0);
    y_0_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.328938,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=28,HLS_SYN_FF=1186,HLS_SYN_LUT=2095,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv160_lc_1 : STD_LOGIC_VECTOR (159 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_B : STD_LOGIC_VECTOR (14 downto 0) := "000000000001011";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv30_3E600000 : STD_LOGIC_VECTOR (29 downto 0) := "111110011000000000000000000000";
    constant ap_const_lv15_3A : STD_LOGIC_VECTOR (14 downto 0) := "000000000111010";
    constant ap_const_lv25_1FB0000 : STD_LOGIC_VECTOR (24 downto 0) := "1111110110000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv25_1F88000 : STD_LOGIC_VECTOR (24 downto 0) := "1111110001000000000000000";
    constant ap_const_lv30_3F300000 : STD_LOGIC_VECTOR (29 downto 0) := "111111001100000000000000000000";
    constant ap_const_lv25_1F50000 : STD_LOGIC_VECTOR (24 downto 0) := "1111101010000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_preg : STD_LOGIC_VECTOR (159 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (159 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_1_fu_177_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_reg_1366 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_reg_1366_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1192_fu_187_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1192_reg_1377 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_2_fu_195_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_reg_1385 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_reg_1385_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_reg_1385_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1192_1_fu_205_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1192_1_reg_1393 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1192_1_reg_1393_pp0_iter1_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_fu_1176_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_reg_1399 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1192_2_fu_225_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1192_2_reg_1404 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_31_fu_229_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_31_reg_1412 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_7_fu_235_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_7_reg_1417 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_9_fu_245_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_9_reg_1426 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_3_fu_253_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_3_reg_1432 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_33_fu_1182_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_33_reg_1437 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln1192_fu_265_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1192_reg_1442 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_11_fu_268_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_11_reg_1447 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_reg_1454 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_reg_1454_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_10_fu_1189_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_10_reg_1461 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_1_fu_294_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_1_reg_1466 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_11_fu_1195_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_11_reg_1472 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_2_fu_306_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_2_reg_1477 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_fu_314_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_1482 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_1482_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_17_fu_1201_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_17_reg_1492 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_fu_328_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1118_reg_1497 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_18_fu_1207_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_18_reg_1502 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_19_fu_1213_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_19_reg_1507 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1192_2_fu_420_p2 : STD_LOGIC_VECTOR (24 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln1192_2_fu_420_p2 : signal is "no";
    signal add_ln1192_2_reg_1512 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_5_fu_425_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_5_reg_1517 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_6_fu_436_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_6_reg_1522 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1227_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_3_reg_1527 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_4_fu_1234_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_4_reg_1532 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_35_fu_493_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_35_reg_1537 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1192_6_fu_510_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln1192_6_reg_1542 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_8_fu_1259_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_8_reg_1547 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_9_fu_1265_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_9_reg_1552 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_1271_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_10_reg_1557 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1192_15_fu_527_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1192_15_reg_1562 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1278_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_11_reg_1567 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_37_fu_541_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_37_reg_1572 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1192_16_fu_547_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1192_16_reg_1577 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1192_10_fu_590_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln1192_10_reg_1583 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1192_18_fu_596_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1192_18_reg_1588 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1192_15_fu_1313_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_15_reg_1593 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1192_14_fu_670_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln1192_14_reg_1598 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_21_fu_1333_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1192_21_reg_1603 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1192_18_fu_710_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln1192_18_reg_1608 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_22_fu_1339_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_22_reg_1613 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_23_fu_1345_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_23_reg_1618 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln1192_4_fu_780_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln1192_4_reg_1623 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln708_1_reg_1628 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln708_2_reg_1633 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln708_3_reg_1638 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln708_4_reg_1643 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln1117_fu_173_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_fu_209_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_31_fu_229_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1116_fu_221_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_31_fu_229_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_fu_328_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_fu_328_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_22_fu_334_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_22_fu_334_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_22_fu_334_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal rhs_V_fu_355_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln_fu_348_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1118_4_fu_377_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1118_2_fu_371_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_32_fu_380_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal rhs_V_1_fu_386_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1192_fu_362_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1192_3_fu_394_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_1219_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1192_1_fu_413_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_5_fu_425_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_5_fu_425_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_40_fu_429_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_7_fu_443_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1192_5_fu_1239_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_6_fu_1246_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1192_5_fu_480_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1192_4_fu_464_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1192_7_fu_1253_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1192_4_fu_487_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1192_6_fu_503_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_36_fu_516_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_36_fu_516_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_36_fu_516_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1118_6_fu_530_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_18_fu_537_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1118_3_fu_374_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1118_7_fu_560_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1295_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1286_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1192_10_fu_571_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_1304_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1192_9_fu_578_p2 : STD_LOGIC_VECTOR (24 downto 0);
    attribute use_dsp48 of sub_ln1192_9_fu_578_p2 : signal is "no";
    signal shl_ln1192_11_fu_583_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_20_fu_599_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_20_fu_599_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1319_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1192_14_fu_615_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln1192_13_fu_622_p2 : STD_LOGIC_VECTOR (24 downto 0);
    attribute use_dsp48 of sub_ln1192_13_fu_622_p2 : signal is "no";
    signal rhs_V_7_fu_627_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_20_fu_1327_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1192_13_fu_635_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1192_15_fu_644_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_39_fu_657_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_39_fu_657_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_39_fu_657_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1192_14_fu_651_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal rhs_V_8_fu_662_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal ret_V_4_fu_680_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1118_17_fu_524_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_1_fu_368_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_42_fu_692_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal rhs_V_13_fu_698_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1192_28_fu_706_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal ret_V_5_fu_686_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_27_fu_716_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_27_fu_716_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_27_fu_716_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_29_fu_728_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_29_fu_728_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_29_fu_728_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1351_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1192_2_fu_744_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal rhs_V_2_fu_756_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1192_2_fu_751_p2 : STD_LOGIC_VECTOR (24 downto 0);
    attribute use_dsp48 of sub_ln1192_2_fu_751_p2 : signal is "no";
    signal sext_ln1192_7_fu_763_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln1192_3_fu_767_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1192_3_fu_773_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1192_7_fu_786_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln1192_5_fu_793_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1192_8_fu_798_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln1192_7_fu_805_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1192_9_fu_811_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln1192_8_fu_818_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1192_s_fu_824_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln1192_6_fu_831_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_V_4_fu_837_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln1192_7_fu_844_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_1_fu_850_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1192_12_fu_869_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_38_fu_881_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_38_fu_881_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_38_fu_881_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1192_10_fu_876_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal rhs_V_6_fu_885_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_16_fu_899_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_16_fu_899_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln1192_11_fu_893_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1192_13_fu_904_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln1192_11_fu_912_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal ret_V_2_fu_918_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1192_16_fu_934_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal rhs_V_9_fu_946_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1192_15_fu_941_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1192_24_fu_953_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal rhs_V_10_fu_963_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1192_16_fu_957_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1192_25_fu_970_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_41_fu_980_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal rhs_V_11_fu_991_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1192_15_fu_974_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1192_26_fu_998_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal rhs_V_12_fu_1008_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1192_16_fu_1002_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1192_27_fu_1015_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln1192_17_fu_1019_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal ret_V_3_fu_1025_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1192_17_fu_1041_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1192_18_fu_1048_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln700_fu_738_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_43_fu_1061_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal rhs_V_14_fu_1066_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln1192_19_fu_1055_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1192_29_fu_1074_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln1192_18_fu_1078_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1192_19_fu_1084_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1358_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1192_20_fu_1091_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1192_20_fu_1097_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln1192_19_fu_1104_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_6_fu_1110_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1118_5_fu_1129_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_7_fu_1126_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1118_10_fu_1136_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_34_fu_1140_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal rhs_V_3_fu_1146_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln1192_3_fu_1154_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal ret_V_fu_1159_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_11_fu_1195_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1116_3_fu_302_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_17_fu_1201_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1192_19_fu_1213_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1219_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1219_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_1227_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_4_fu_1234_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_5_fu_1239_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1192_9_fu_458_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_6_fu_1246_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1192_12_fu_477_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_7_fu_1253_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_8_fu_1259_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_8_fu_1259_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_16_fu_520_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_9_fu_1265_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_9_fu_1265_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1271_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1271_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1271_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1278_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1278_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1286_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1286_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_1295_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1304_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_15_fu_1313_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_20_fu_1327_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_21_fu_1333_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1192_22_fu_1339_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_28_fu_725_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1192_23_fu_1345_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1351_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1358_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mul_mul_10s_11s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_mul_mul_10s_11s_21_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component myproject_mul_mul_10s_12s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_mul_mul_10s_20s_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component myproject_mul_mul_10s_13s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_mac_muladd_10s_21s_25ns_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component myproject_am_addmul_13s_11s_10s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_mul_mul_10s_12s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_mul_mul_10s_22s_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component myproject_mul_mul_10s_21s_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component myproject_am_addmul_10s_13s_10s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_am_submul_13s_11s_10s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_mac_mul_sub_10s_21s_25ns_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component myproject_am_submul_12s_10s_10s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_mul_mul_10s_15s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_mac_mulsub_10s_20s_25s_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component myproject_mac_mulsub_10s_20s_25ns_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component myproject_am_submul_13s_10s_10s_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    myproject_mul_mul_10s_11s_20_1_1_U1 : component myproject_mul_mul_10s_11s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_1_fu_177_p4,
        din1 => r_V_fu_209_p3,
        dout => mul_ln1192_fu_1176_p2);

    myproject_mul_mul_10s_11s_21_1_1_U2 : component myproject_mul_mul_10s_11s_21_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 21)
    port map (
        din0 => tmp_1_fu_177_p4,
        din1 => r_V_3_fu_253_p3,
        dout => r_V_33_fu_1182_p2);

    myproject_mul_mul_10s_12s_22_1_1_U3 : component myproject_mul_mul_10s_12s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => p_Val2_7_fu_235_p4,
        din1 => r_V_9_fu_245_p3,
        dout => r_V_10_fu_1189_p2);

    myproject_mul_mul_10s_11s_21_1_1_U4 : component myproject_mul_mul_10s_11s_21_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 21)
    port map (
        din0 => p_Val2_7_fu_235_p4,
        din1 => r_V_11_fu_1195_p1,
        dout => r_V_11_fu_1195_p2);

    myproject_mul_mul_10s_11s_21_1_1_U5 : component myproject_mul_mul_10s_11s_21_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 21)
    port map (
        din0 => tmp_5_fu_314_p4,
        din1 => r_V_17_fu_1201_p1,
        dout => r_V_17_fu_1201_p2);

    myproject_mul_mul_10s_20s_25_1_1_U6 : component myproject_mul_mul_10s_20s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 20,
        dout_WIDTH => 25)
    port map (
        din0 => tmp_2_fu_195_p4,
        din1 => r_V_22_fu_334_p2,
        dout => mul_ln1192_18_fu_1207_p2);

    myproject_mul_mul_10s_13s_20_1_1_U7 : component myproject_mul_mul_10s_13s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 13,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln1192_19_fu_1213_p0,
        din1 => r_V_2_fu_306_p3,
        dout => mul_ln1192_19_fu_1213_p2);

    myproject_mac_muladd_10s_21s_25ns_25_1_1_U8 : component myproject_mac_muladd_10s_21s_25ns_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 21,
        din2_WIDTH => 25,
        dout_WIDTH => 25)
    port map (
        din0 => grp_fu_1219_p0,
        din1 => r_V_33_reg_1437,
        din2 => grp_fu_1219_p2,
        dout => grp_fu_1219_p3);

    myproject_am_addmul_13s_11s_10s_20_1_1_U9 : component myproject_am_addmul_13s_11s_10s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 11,
        din2_WIDTH => 10,
        dout_WIDTH => 20)
    port map (
        din0 => r_V_40_fu_429_p3,
        din1 => r_V_3_reg_1432,
        din2 => grp_fu_1227_p2,
        dout => grp_fu_1227_p3);

    myproject_mul_mul_10s_12s_20_1_1_U10 : component myproject_mul_mul_10s_12s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln1192_4_fu_1234_p0,
        din1 => r_V_7_fu_443_p3,
        dout => mul_ln1192_4_fu_1234_p2);

    myproject_mul_mul_10s_22s_25_1_1_U11 : component myproject_mul_mul_10s_22s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 22,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln1192_5_fu_1239_p0,
        din1 => r_V_10_reg_1461,
        dout => mul_ln1192_5_fu_1239_p2);

    myproject_mul_mul_10s_21s_25_1_1_U12 : component myproject_mul_mul_10s_21s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 21,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln1192_6_fu_1246_p0,
        din1 => r_V_11_reg_1472,
        dout => mul_ln1192_6_fu_1246_p2);

    myproject_mul_mul_10s_13s_20_1_1_U13 : component myproject_mul_mul_10s_13s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 13,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln1192_7_fu_1253_p0,
        din1 => r_V_35_fu_493_p2,
        dout => mul_ln1192_7_fu_1253_p2);

    myproject_mul_mul_10s_20s_25_1_1_U14 : component myproject_mul_mul_10s_20s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 20,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln1192_8_fu_1259_p0,
        din1 => mul_ln1192_8_fu_1259_p1,
        dout => mul_ln1192_8_fu_1259_p2);

    myproject_mul_mul_10s_20s_25_1_1_U15 : component myproject_mul_mul_10s_20s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 20,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln1192_9_fu_1265_p0,
        din1 => mul_ln1192_9_fu_1265_p1,
        dout => mul_ln1192_9_fu_1265_p2);

    myproject_am_addmul_10s_13s_10s_20_1_1_U16 : component myproject_am_addmul_10s_13s_10s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 13,
        din2_WIDTH => 10,
        dout_WIDTH => 20)
    port map (
        din0 => grp_fu_1271_p0,
        din1 => grp_fu_1271_p1,
        din2 => grp_fu_1271_p2,
        dout => grp_fu_1271_p3);

    myproject_am_submul_13s_11s_10s_20_1_1_U17 : component myproject_am_submul_13s_11s_10s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 11,
        din2_WIDTH => 10,
        dout_WIDTH => 20)
    port map (
        din0 => grp_fu_1278_p0,
        din1 => r_V_1_reg_1466,
        din2 => grp_fu_1278_p2,
        dout => grp_fu_1278_p3);

    myproject_mac_mul_sub_10s_21s_25ns_25_1_1_U18 : component myproject_mac_mul_sub_10s_21s_25ns_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 21,
        din2_WIDTH => 25,
        dout_WIDTH => 25)
    port map (
        din0 => grp_fu_1286_p0,
        din1 => r_V_17_reg_1492,
        din2 => grp_fu_1286_p2,
        dout => grp_fu_1286_p3);

    myproject_am_submul_12s_10s_10s_20_1_1_U19 : component myproject_am_submul_12s_10s_10s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        dout_WIDTH => 20)
    port map (
        din0 => shl_ln1118_7_fu_560_p3,
        din1 => tmp_1_reg_1366,
        din2 => grp_fu_1295_p2,
        dout => grp_fu_1295_p3);

    myproject_am_submul_12s_10s_10s_20_1_1_U20 : component myproject_am_submul_12s_10s_10s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        dout_WIDTH => 20)
    port map (
        din0 => r_V_7_fu_443_p3,
        din1 => tmp_2_reg_1385,
        din2 => grp_fu_1304_p2,
        dout => grp_fu_1304_p3);

    myproject_mul_mul_10s_15s_20_1_1_U21 : component myproject_mul_mul_10s_15s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 15,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln1192_15_fu_1313_p0,
        din1 => r_V_20_fu_599_p2,
        dout => mul_ln1192_15_fu_1313_p2);

    myproject_mac_mulsub_10s_20s_25s_25_1_1_U22 : component myproject_mac_mulsub_10s_20s_25s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 20,
        din2_WIDTH => 25,
        dout_WIDTH => 25)
    port map (
        din0 => p_Val2_7_reg_1417,
        din1 => mul_ln1118_reg_1497,
        din2 => mul_ln1192_18_reg_1502,
        dout => grp_fu_1319_p3);

    myproject_mul_mul_10s_11s_20_1_1_U23 : component myproject_mul_mul_10s_11s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln1192_20_fu_1327_p0,
        din1 => r_V_1_reg_1466,
        dout => mul_ln1192_20_fu_1327_p2);

    myproject_mul_mul_10s_13s_20_1_1_U24 : component myproject_mul_mul_10s_13s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 13,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln1192_21_fu_1333_p0,
        din1 => r_V_32_fu_380_p2,
        dout => mul_ln1192_21_fu_1333_p2);

    myproject_mul_mul_10s_20s_25_1_1_U25 : component myproject_mul_mul_10s_20s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 20,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln1192_22_fu_1339_p0,
        din1 => r_V_27_fu_716_p2,
        dout => mul_ln1192_22_fu_1339_p2);

    myproject_mul_mul_10s_20s_25_1_1_U26 : component myproject_mul_mul_10s_20s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 20,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln1192_23_fu_1345_p0,
        din1 => r_V_29_fu_728_p2,
        dout => mul_ln1192_23_fu_1345_p2);

    myproject_mac_mulsub_10s_20s_25ns_25_1_1_U27 : component myproject_mac_mulsub_10s_20s_25ns_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 20,
        din2_WIDTH => 25,
        dout_WIDTH => 25)
    port map (
        din0 => grp_fu_1351_p0,
        din1 => r_V_5_reg_1517,
        din2 => add_ln1192_2_reg_1512,
        dout => grp_fu_1351_p3);

    myproject_am_submul_13s_10s_10s_20_1_1_U28 : component myproject_am_submul_13s_10s_10s_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        dout_WIDTH => 20)
    port map (
        din0 => r_V_41_fu_980_p3,
        din1 => tmp_5_reg_1482_pp0_iter1_reg,
        din2 => grp_fu_1358_p2,
        dout => grp_fu_1358_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv160_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1192_10_reg_1583 <= add_ln1192_10_fu_590_p2;
                add_ln1192_14_reg_1598 <= add_ln1192_14_fu_670_p2;
                    add_ln1192_18_reg_1608(24 downto 5) <= add_ln1192_18_fu_710_p2(24 downto 5);
                add_ln1192_2_reg_1512 <= add_ln1192_2_fu_420_p2;
                    add_ln1192_6_reg_1542(29 downto 5) <= add_ln1192_6_fu_510_p2(29 downto 5);
                mul_ln1118_reg_1497 <= mul_ln1118_fu_328_p2;
                mul_ln1192_15_reg_1593 <= mul_ln1192_15_fu_1313_p2;
                mul_ln1192_18_reg_1502 <= mul_ln1192_18_fu_1207_p2;
                mul_ln1192_19_reg_1507 <= mul_ln1192_19_fu_1213_p2;
                mul_ln1192_21_reg_1603 <= mul_ln1192_21_fu_1333_p2;
                mul_ln1192_22_reg_1613 <= mul_ln1192_22_fu_1339_p2;
                mul_ln1192_23_reg_1618 <= mul_ln1192_23_fu_1345_p2;
                mul_ln1192_4_reg_1532 <= mul_ln1192_4_fu_1234_p2;
                mul_ln1192_8_reg_1547 <= mul_ln1192_8_fu_1259_p2;
                mul_ln1192_9_reg_1552 <= mul_ln1192_9_fu_1265_p2;
                mul_ln1192_reg_1399 <= mul_ln1192_fu_1176_p2;
                p_Val2_7_reg_1417 <= x_V_in_sig(149 downto 140);
                r_V_10_reg_1461 <= r_V_10_fu_1189_p2;
                r_V_11_reg_1472 <= r_V_11_fu_1195_p2;
                r_V_17_reg_1492 <= r_V_17_fu_1201_p2;
                    r_V_1_reg_1466(10 downto 1) <= r_V_1_fu_294_p3(10 downto 1);
                    r_V_2_reg_1477(12 downto 3) <= r_V_2_fu_306_p3(12 downto 3);
                r_V_31_reg_1412 <= r_V_31_fu_229_p2;
                r_V_33_reg_1437 <= r_V_33_fu_1182_p2;
                r_V_35_reg_1537 <= r_V_35_fu_493_p2;
                    r_V_37_reg_1572(14 downto 2) <= r_V_37_fu_541_p2(14 downto 2);
                    r_V_3_reg_1432(10 downto 1) <= r_V_3_fu_253_p3(10 downto 1);
                r_V_5_reg_1517 <= r_V_5_fu_425_p2;
                    r_V_9_reg_1426(11 downto 2) <= r_V_9_fu_245_p3(11 downto 2);
                sext_ln1118_11_reg_1447 <= sext_ln1118_11_fu_268_p1;
                    sext_ln1118_6_reg_1522(13 downto 3) <= sext_ln1118_6_fu_436_p1(13 downto 3);
                sext_ln1192_15_reg_1562 <= sext_ln1192_15_fu_527_p1;
                sext_ln1192_16_reg_1577 <= sext_ln1192_16_fu_547_p1;
                sext_ln1192_18_reg_1588 <= sext_ln1192_18_fu_596_p1;
                sext_ln1192_1_reg_1393 <= sext_ln1192_1_fu_205_p1;
                sext_ln1192_1_reg_1393_pp0_iter1_reg <= sext_ln1192_1_reg_1393;
                sext_ln1192_2_reg_1404 <= sext_ln1192_2_fu_225_p1;
                sext_ln1192_reg_1377 <= sext_ln1192_fu_187_p1;
                tmp_1_reg_1366 <= x_V_in_sig(159 downto 150);
                tmp_1_reg_1366_pp0_iter1_reg <= tmp_1_reg_1366;
                tmp_2_reg_1385 <= x_V_in_sig(29 downto 20);
                tmp_2_reg_1385_pp0_iter1_reg <= tmp_2_reg_1385;
                tmp_4_reg_1454 <= x_V_in_sig(49 downto 40);
                tmp_4_reg_1454_pp0_iter1_reg <= tmp_4_reg_1454;
                tmp_5_reg_1482 <= x_V_in_sig(39 downto 30);
                tmp_5_reg_1482_pp0_iter1_reg <= tmp_5_reg_1482;
                trunc_ln1192_reg_1442 <= trunc_ln1192_fu_265_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln1192_4_reg_1623 <= add_ln1192_4_fu_780_p2;
                tmp_2_reg_1385_pp0_iter2_reg <= tmp_2_reg_1385_pp0_iter1_reg;
                trunc_ln708_1_reg_1628 <= ret_V_1_fu_850_p2(29 downto 20);
                trunc_ln708_2_reg_1633 <= ret_V_2_fu_918_p2(24 downto 15);
                trunc_ln708_3_reg_1638 <= ret_V_3_fu_1025_p2(24 downto 15);
                trunc_ln708_4_reg_1643 <= ret_V_6_fu_1110_p2(29 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln1192_10_reg_1557 <= grp_fu_1271_p3;
                mul_ln1192_11_reg_1567 <= grp_fu_1278_p3;
                mul_ln1192_3_reg_1527 <= grp_fu_1227_p3;
            end if;
        end if;
    end process;
    r_V_9_reg_1426(1 downto 0) <= "00";
    r_V_3_reg_1432(0) <= '0';
    r_V_1_reg_1466(0) <= '0';
    r_V_2_reg_1477(2 downto 0) <= "000";
    sext_ln1118_6_reg_1522(2 downto 0) <= "000";
    add_ln1192_6_reg_1542(4 downto 0) <= "00000";
    r_V_37_reg_1572(1 downto 0) <= "00";
    add_ln1192_18_reg_1608(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1192_10_fu_590_p2 <= std_logic_vector(unsigned(sub_ln1192_9_fu_578_p2) + unsigned(shl_ln1192_11_fu_583_p3));
    add_ln1192_11_fu_912_p2 <= std_logic_vector(unsigned(sub_ln1192_11_fu_893_p2) + unsigned(shl_ln1192_13_fu_904_p3));
    add_ln1192_13_fu_635_p2 <= std_logic_vector(unsigned(sub_ln1192_13_fu_622_p2) + unsigned(rhs_V_7_fu_627_p3));
    add_ln1192_14_fu_670_p2 <= std_logic_vector(unsigned(sub_ln1192_14_fu_651_p2) + unsigned(rhs_V_8_fu_662_p3));
    add_ln1192_15_fu_941_p2 <= std_logic_vector(unsigned(add_ln1192_14_reg_1598) + unsigned(shl_ln1192_16_fu_934_p3));
    add_ln1192_16_fu_957_p2 <= std_logic_vector(unsigned(add_ln1192_15_fu_941_p2) + unsigned(sext_ln1192_24_fu_953_p1));
    add_ln1192_18_fu_710_p2 <= std_logic_vector(signed(sext_ln1192_28_fu_706_p1) + signed(ret_V_5_fu_686_p2));
    add_ln1192_19_fu_1055_p2 <= std_logic_vector(unsigned(shl_ln1192_17_fu_1041_p3) + unsigned(shl_ln1192_18_fu_1048_p3));
    add_ln1192_20_fu_1091_p2 <= std_logic_vector(unsigned(sub_ln1192_18_fu_1078_p2) + unsigned(shl_ln1192_19_fu_1084_p3));
    add_ln1192_2_fu_420_p2 <= std_logic_vector(signed(grp_fu_1219_p3) + signed(shl_ln1192_1_fu_413_p3));
    add_ln1192_3_fu_767_p2 <= std_logic_vector(unsigned(sub_ln1192_2_fu_751_p2) + unsigned(sext_ln1192_7_fu_763_p1));
    add_ln1192_4_fu_780_p2 <= std_logic_vector(unsigned(add_ln1192_3_fu_767_p2) + unsigned(shl_ln1192_3_fu_773_p3));
    add_ln1192_6_fu_510_p2 <= std_logic_vector(unsigned(sub_ln1192_4_fu_487_p2) + unsigned(shl_ln1192_6_fu_503_p3));
    add_ln1192_7_fu_805_p2 <= std_logic_vector(unsigned(sub_ln1192_5_fu_793_p2) + unsigned(shl_ln1192_8_fu_798_p3));
    add_ln1192_8_fu_818_p2 <= std_logic_vector(unsigned(add_ln1192_7_fu_805_p2) + unsigned(shl_ln1192_9_fu_811_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1219_p0 <= sext_ln1192_1_reg_1393(10 - 1 downto 0);
    grp_fu_1219_p2 <= std_logic_vector(unsigned(sub_ln1192_fu_362_p2) + unsigned(sext_ln1192_3_fu_394_p1));
    grp_fu_1227_p2 <= sext_ln1192_2_reg_1404(10 - 1 downto 0);
    grp_fu_1271_p0 <= sext_ln1118_1_fu_368_p1(10 - 1 downto 0);
    grp_fu_1271_p1 <= sext_ln1118_17_fu_524_p1(13 - 1 downto 0);
    grp_fu_1271_p2 <= sext_ln1192_reg_1377(10 - 1 downto 0);
    grp_fu_1278_p0 <= sext_ln1118_17_fu_524_p1(13 - 1 downto 0);
    grp_fu_1278_p2 <= sext_ln1192_15_fu_527_p1(10 - 1 downto 0);
    grp_fu_1286_p0 <= sext_ln1192_12_fu_477_p1(10 - 1 downto 0);
    grp_fu_1286_p2 <= (p_Val2_7_reg_1417 & ap_const_lv15_0);
    grp_fu_1295_p2 <= sext_ln1192_16_fu_547_p1(10 - 1 downto 0);
    grp_fu_1304_p2 <= sext_ln1192_16_fu_547_p1(10 - 1 downto 0);
    grp_fu_1351_p0 <= sext_ln1192_1_reg_1393_pp0_iter1_reg(10 - 1 downto 0);
    grp_fu_1358_p2 <= sext_ln1192_16_reg_1577(10 - 1 downto 0);
    mul_ln1118_fu_328_p0 <= sext_ln1118_11_fu_268_p1(10 - 1 downto 0);
    mul_ln1118_fu_328_p1 <= sext_ln1116_fu_221_p1(10 - 1 downto 0);
    mul_ln1118_fu_328_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_fu_328_p0) * signed(mul_ln1118_fu_328_p1))), 20));
    mul_ln1192_15_fu_1313_p0 <= sext_ln1192_16_fu_547_p1(10 - 1 downto 0);
    mul_ln1192_16_fu_899_p1 <= sext_ln1192_18_reg_1588(10 - 1 downto 0);
    mul_ln1192_16_fu_899_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv15_3A) * signed(mul_ln1192_16_fu_899_p1))), 15));
    mul_ln1192_19_fu_1213_p0 <= sext_ln1118_11_fu_268_p1(10 - 1 downto 0);
    mul_ln1192_20_fu_1327_p0 <= sext_ln1192_2_reg_1404(10 - 1 downto 0);
    mul_ln1192_21_fu_1333_p0 <= sext_ln1192_15_fu_527_p1(10 - 1 downto 0);
    mul_ln1192_22_fu_1339_p0 <= sext_ln1118_28_fu_725_p1(10 - 1 downto 0);
    mul_ln1192_23_fu_1345_p0 <= sext_ln1118_28_fu_725_p1(10 - 1 downto 0);
    mul_ln1192_4_fu_1234_p0 <= sext_ln1192_2_reg_1404(10 - 1 downto 0);
    mul_ln1192_5_fu_1239_p0 <= sext_ln1192_9_fu_458_p1(10 - 1 downto 0);
    mul_ln1192_6_fu_1246_p0 <= sext_ln1192_12_fu_477_p1(10 - 1 downto 0);
    mul_ln1192_7_fu_1253_p0 <= sext_ln1118_11_reg_1447(10 - 1 downto 0);
    mul_ln1192_8_fu_1259_p0 <= sext_ln1192_9_fu_458_p1(10 - 1 downto 0);
    mul_ln1192_8_fu_1259_p1 <= sext_ln1118_16_fu_520_p1(20 - 1 downto 0);
    mul_ln1192_9_fu_1265_p0 <= sext_ln1192_12_fu_477_p1(10 - 1 downto 0);
    mul_ln1192_9_fu_1265_p1 <= sext_ln1118_16_fu_520_p1(20 - 1 downto 0);
    p_Val2_7_fu_235_p4 <= x_V_in_sig(149 downto 140);
    r_V_11_fu_1195_p1 <= sext_ln1116_3_fu_302_p1(11 - 1 downto 0);
    r_V_17_fu_1201_p1 <= sext_ln1116_3_fu_302_p1(11 - 1 downto 0);
    r_V_1_fu_294_p3 <= (p_Val2_7_fu_235_p4 & ap_const_lv1_0);
    r_V_20_fu_599_p1 <= tmp_5_reg_1482;
    r_V_20_fu_599_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv15_B) * signed(r_V_20_fu_599_p1))), 15));
    r_V_22_fu_334_p0 <= sext_ln1118_11_fu_268_p1(10 - 1 downto 0);
    r_V_22_fu_334_p1 <= sext_ln1118_11_fu_268_p1(10 - 1 downto 0);
    r_V_22_fu_334_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_22_fu_334_p0) * signed(r_V_22_fu_334_p1))), 20));
    r_V_27_fu_716_p0 <= sext_ln1192_reg_1377(10 - 1 downto 0);
    r_V_27_fu_716_p1 <= sext_ln1192_16_fu_547_p1(10 - 1 downto 0);
    r_V_27_fu_716_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_27_fu_716_p0) * signed(r_V_27_fu_716_p1))), 20));
    r_V_29_fu_728_p0 <= sext_ln1192_16_fu_547_p1(10 - 1 downto 0);
    r_V_29_fu_728_p1 <= sext_ln1192_16_fu_547_p1(10 - 1 downto 0);
    r_V_29_fu_728_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_29_fu_728_p0) * signed(r_V_29_fu_728_p1))), 20));
    r_V_2_fu_306_p3 <= (p_Val2_7_fu_235_p4 & ap_const_lv3_0);
    r_V_31_fu_229_p0 <= sext_ln1116_fu_221_p1(10 - 1 downto 0);
    r_V_31_fu_229_p1 <= tmp_2_fu_195_p4;
    r_V_31_fu_229_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_31_fu_229_p0) * signed(r_V_31_fu_229_p1))), 20));
    r_V_32_fu_380_p2 <= std_logic_vector(signed(sext_ln1118_4_fu_377_p1) - signed(sext_ln1118_2_fu_371_p1));
    r_V_34_fu_1140_p2 <= std_logic_vector(signed(sext_ln1118_7_fu_1126_p1) + signed(sext_ln1118_10_fu_1136_p1));
    r_V_35_fu_493_p2 <= std_logic_vector(signed(sext_ln1118_2_fu_371_p1) + signed(sext_ln1118_4_fu_377_p1));
    r_V_36_fu_516_p0 <= sext_ln1192_reg_1377(10 - 1 downto 0);
    r_V_36_fu_516_p1 <= sext_ln1118_11_reg_1447(10 - 1 downto 0);
    r_V_36_fu_516_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_36_fu_516_p0) * signed(r_V_36_fu_516_p1))), 20));
    r_V_37_fu_541_p2 <= std_logic_vector(signed(sext_ln1118_18_fu_537_p1) - signed(sext_ln1118_3_fu_374_p1));
    r_V_38_fu_881_p0 <= sext_ln1192_16_reg_1577(10 - 1 downto 0);
    r_V_38_fu_881_p1 <= sext_ln1192_15_reg_1562(10 - 1 downto 0);
    r_V_38_fu_881_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_38_fu_881_p0) * signed(r_V_38_fu_881_p1))), 20));
    r_V_39_fu_657_p0 <= sext_ln1118_11_reg_1447(10 - 1 downto 0);
    r_V_39_fu_657_p1 <= sext_ln1192_16_fu_547_p1(10 - 1 downto 0);
    r_V_39_fu_657_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_39_fu_657_p0) * signed(r_V_39_fu_657_p1))), 20));
    r_V_3_fu_253_p3 <= (tmp_1_fu_177_p4 & ap_const_lv1_0);
    r_V_40_fu_429_p3 <= (tmp_1_reg_1366 & ap_const_lv3_0);
    r_V_41_fu_980_p3 <= (tmp_5_reg_1482_pp0_iter1_reg & ap_const_lv3_0);
    r_V_42_fu_692_p2 <= std_logic_vector(signed(sext_ln1118_17_fu_524_p1) - signed(sext_ln1118_1_fu_368_p1));
    r_V_43_fu_1061_p2 <= std_logic_vector(signed(sext_ln1118_6_reg_1522) - signed(sext_ln700_fu_738_p1));
    r_V_5_fu_425_p0 <= sext_ln1192_reg_1377(10 - 1 downto 0);
    r_V_5_fu_425_p1 <= sext_ln1192_2_reg_1404(10 - 1 downto 0);
    r_V_5_fu_425_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_5_fu_425_p0) * signed(r_V_5_fu_425_p1))), 20));
    r_V_7_fu_443_p3 <= (tmp_2_reg_1385 & ap_const_lv2_0);
    r_V_9_fu_245_p3 <= (p_Val2_7_fu_235_p4 & ap_const_lv2_0);
    r_V_fu_209_p3 <= (trunc_ln1117_fu_173_p1 & ap_const_lv1_0);
    ret_V_1_fu_850_p2 <= std_logic_vector(signed(ap_const_lv30_3E600000) + signed(sub_ln1192_7_fu_844_p2));
    ret_V_2_fu_918_p2 <= std_logic_vector(signed(ap_const_lv25_1FB0000) + signed(add_ln1192_11_fu_912_p2));
    ret_V_3_fu_1025_p2 <= std_logic_vector(signed(ap_const_lv25_1F88000) + signed(sub_ln1192_17_fu_1019_p2));
    ret_V_4_fu_680_p2 <= std_logic_vector(unsigned(ap_const_lv25_0) - unsigned(rhs_V_7_fu_627_p3));
    ret_V_5_fu_686_p2 <= std_logic_vector(unsigned(ret_V_4_fu_680_p2) - unsigned(rhs_V_8_fu_662_p3));
    ret_V_6_fu_1110_p2 <= std_logic_vector(signed(ap_const_lv30_3F300000) + signed(sub_ln1192_19_fu_1104_p2));
    ret_V_fu_1159_p2 <= std_logic_vector(signed(ap_const_lv25_1F50000) + signed(sub_ln1192_3_fu_1154_p2));
    rhs_V_10_fu_963_p3 <= (tmp_1_reg_1366_pp0_iter1_reg & ap_const_lv13_0);
    rhs_V_11_fu_991_p3 <= (tmp_5_reg_1482_pp0_iter1_reg & ap_const_lv13_0);
    rhs_V_12_fu_1008_p3 <= (tmp_4_reg_1454_pp0_iter1_reg & ap_const_lv10_0);
    rhs_V_13_fu_698_p3 <= (r_V_42_fu_692_p2 & ap_const_lv10_0);
    rhs_V_14_fu_1066_p3 <= (r_V_43_fu_1061_p2 & ap_const_lv15_0);
    rhs_V_1_fu_386_p3 <= (r_V_32_fu_380_p2 & ap_const_lv10_0);
    rhs_V_2_fu_756_p3 <= (tmp_1_reg_1366_pp0_iter1_reg & ap_const_lv14_0);
    rhs_V_3_fu_1146_p3 <= (r_V_34_fu_1140_p2 & ap_const_lv10_0);
    rhs_V_4_fu_837_p3 <= (r_V_37_reg_1572 & ap_const_lv15_0);
    rhs_V_6_fu_885_p3 <= (r_V_38_fu_881_p2 & ap_const_lv5_0);
    rhs_V_7_fu_627_p3 <= (r_V_36_fu_516_p2 & ap_const_lv5_0);
    rhs_V_8_fu_662_p3 <= (r_V_39_fu_657_p2 & ap_const_lv5_0);
    rhs_V_9_fu_946_p3 <= (r_V_35_reg_1537 & ap_const_lv10_0);
    rhs_V_fu_355_p3 <= (r_V_31_reg_1412 & ap_const_lv5_0);
        sext_ln1116_3_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_fu_294_p3),21));

        sext_ln1116_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1117_fu_173_p1),20));

        sext_ln1118_10_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_5_fu_1129_p3),15));

        sext_ln1118_11_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_7_fu_235_p4),20));

        sext_ln1118_16_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_36_fu_516_p2),25));

        sext_ln1118_17_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_reg_1477),14));

        sext_ln1118_18_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_6_fu_530_p3),15));

        sext_ln1118_1_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_7_reg_1417),14));

        sext_ln1118_28_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1482),25));

        sext_ln1118_2_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_7_reg_1417),13));

        sext_ln1118_3_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_9_reg_1426),15));

        sext_ln1118_4_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_9_reg_1426),13));

        sext_ln1118_6_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_40_fu_429_p3),14));

        sext_ln1118_7_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_1385_pp0_iter2_reg),15));

        sext_ln1192_12_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1454),25));

        sext_ln1192_15_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1454),20));

        sext_ln1192_16_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1482),20));

        sext_ln1192_18_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1482),15));

        sext_ln1192_1_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_195_p4),25));

        sext_ln1192_24_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_9_fu_946_p3),25));

        sext_ln1192_25_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_10_fu_963_p3),25));

        sext_ln1192_26_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_11_fu_991_p3),25));

        sext_ln1192_27_fu_1015_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_12_fu_1008_p3),25));

        sext_ln1192_28_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_13_fu_698_p3),25));

        sext_ln1192_29_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_14_fu_1066_p3),30));

        sext_ln1192_2_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_195_p4),20));

        sext_ln1192_3_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1_fu_386_p3),25));

        sext_ln1192_7_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_2_fu_756_p3),25));

        sext_ln1192_9_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_1366),25));

        sext_ln1192_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_177_p4),20));

        sext_ln700_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_1366_pp0_iter1_reg),14));

    shl_ln1118_5_fu_1129_p3 <= (tmp_2_reg_1385_pp0_iter2_reg & ap_const_lv4_0);
    shl_ln1118_6_fu_530_p3 <= (p_Val2_7_reg_1417 & ap_const_lv4_0);
    shl_ln1118_7_fu_560_p3 <= (tmp_1_reg_1366 & ap_const_lv2_0);
    shl_ln1192_10_fu_571_p3 <= (grp_fu_1295_p3 & ap_const_lv5_0);
    shl_ln1192_11_fu_583_p3 <= (grp_fu_1304_p3 & ap_const_lv5_0);
    shl_ln1192_12_fu_869_p3 <= (mul_ln1192_15_reg_1593 & ap_const_lv5_0);
    shl_ln1192_13_fu_904_p3 <= (mul_ln1192_16_fu_899_p2 & ap_const_lv10_0);
    shl_ln1192_14_fu_615_p3 <= (mul_ln1192_19_reg_1507 & ap_const_lv5_0);
    shl_ln1192_15_fu_644_p3 <= (mul_ln1192_20_fu_1327_p2 & ap_const_lv5_0);
    shl_ln1192_16_fu_934_p3 <= (mul_ln1192_21_reg_1603 & ap_const_lv5_0);
    shl_ln1192_17_fu_1041_p3 <= (add_ln1192_18_reg_1608 & ap_const_lv5_0);
    shl_ln1192_18_fu_1048_p3 <= (mul_ln1192_22_reg_1613 & ap_const_lv5_0);
    shl_ln1192_19_fu_1084_p3 <= (mul_ln1192_23_reg_1618 & ap_const_lv5_0);
    shl_ln1192_1_fu_413_p3 <= (trunc_ln1192_reg_1442 & ap_const_lv5_0);
    shl_ln1192_20_fu_1097_p3 <= (grp_fu_1358_p3 & ap_const_lv10_0);
    shl_ln1192_2_fu_744_p3 <= (mul_ln1192_3_reg_1527 & ap_const_lv5_0);
    shl_ln1192_3_fu_773_p3 <= (mul_ln1192_4_reg_1532 & ap_const_lv5_0);
    shl_ln1192_4_fu_464_p3 <= (mul_ln1192_5_fu_1239_p2 & ap_const_lv5_0);
    shl_ln1192_5_fu_480_p3 <= (mul_ln1192_6_fu_1246_p2 & ap_const_lv5_0);
    shl_ln1192_6_fu_503_p3 <= (mul_ln1192_7_fu_1253_p2 & ap_const_lv10_0);
    shl_ln1192_7_fu_786_p3 <= (mul_ln1192_8_reg_1547 & ap_const_lv5_0);
    shl_ln1192_8_fu_798_p3 <= (mul_ln1192_9_reg_1552 & ap_const_lv5_0);
    shl_ln1192_9_fu_811_p3 <= (mul_ln1192_10_reg_1557 & ap_const_lv10_0);
    shl_ln1192_s_fu_824_p3 <= (mul_ln1192_11_reg_1567 & ap_const_lv10_0);
    shl_ln_fu_348_p3 <= (mul_ln1192_reg_1399 & ap_const_lv5_0);
    sub_ln1192_10_fu_876_p2 <= std_logic_vector(unsigned(add_ln1192_10_reg_1583) - unsigned(shl_ln1192_12_fu_869_p3));
    sub_ln1192_11_fu_893_p2 <= std_logic_vector(unsigned(sub_ln1192_10_fu_876_p2) - unsigned(rhs_V_6_fu_885_p3));
    sub_ln1192_13_fu_622_p2 <= std_logic_vector(signed(grp_fu_1319_p3) - signed(shl_ln1192_14_fu_615_p3));
    sub_ln1192_14_fu_651_p2 <= std_logic_vector(unsigned(add_ln1192_13_fu_635_p2) - unsigned(shl_ln1192_15_fu_644_p3));
    sub_ln1192_15_fu_974_p2 <= std_logic_vector(unsigned(add_ln1192_16_fu_957_p2) - unsigned(sext_ln1192_25_fu_970_p1));
    sub_ln1192_16_fu_1002_p2 <= std_logic_vector(unsigned(sub_ln1192_15_fu_974_p2) - unsigned(sext_ln1192_26_fu_998_p1));
    sub_ln1192_17_fu_1019_p2 <= std_logic_vector(unsigned(sub_ln1192_16_fu_1002_p2) - unsigned(sext_ln1192_27_fu_1015_p1));
    sub_ln1192_18_fu_1078_p2 <= std_logic_vector(unsigned(add_ln1192_19_fu_1055_p2) - unsigned(sext_ln1192_29_fu_1074_p1));
    sub_ln1192_19_fu_1104_p2 <= std_logic_vector(unsigned(add_ln1192_20_fu_1091_p2) - unsigned(shl_ln1192_20_fu_1097_p3));
    sub_ln1192_2_fu_751_p2 <= std_logic_vector(signed(grp_fu_1351_p3) - signed(shl_ln1192_2_fu_744_p3));
    sub_ln1192_3_fu_1154_p2 <= std_logic_vector(unsigned(add_ln1192_4_reg_1623) - unsigned(rhs_V_3_fu_1146_p3));
    sub_ln1192_4_fu_487_p2 <= std_logic_vector(unsigned(shl_ln1192_5_fu_480_p3) - unsigned(shl_ln1192_4_fu_464_p3));
    sub_ln1192_5_fu_793_p2 <= std_logic_vector(unsigned(add_ln1192_6_reg_1542) - unsigned(shl_ln1192_7_fu_786_p3));
    sub_ln1192_6_fu_831_p2 <= std_logic_vector(unsigned(add_ln1192_8_fu_818_p2) - unsigned(shl_ln1192_s_fu_824_p3));
    sub_ln1192_7_fu_844_p2 <= std_logic_vector(unsigned(sub_ln1192_6_fu_831_p2) - unsigned(rhs_V_4_fu_837_p3));
    sub_ln1192_9_fu_578_p2 <= std_logic_vector(signed(grp_fu_1286_p3) - signed(shl_ln1192_10_fu_571_p3));
    sub_ln1192_fu_362_p2 <= std_logic_vector(unsigned(rhs_V_fu_355_p3) - unsigned(shl_ln_fu_348_p3));
    tmp_1_fu_177_p4 <= x_V_in_sig(159 downto 150);
    tmp_2_fu_195_p4 <= x_V_in_sig(29 downto 20);
    tmp_5_fu_314_p4 <= x_V_in_sig(39 downto 30);
    trunc_ln1117_fu_173_p1 <= x_V_in_sig(10 - 1 downto 0);
    trunc_ln1192_fu_265_p1 <= r_V_33_fu_1182_p2(20 - 1 downto 0);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, x_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V_ap_vld, x_V, x_V_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

    y_0_V <= ret_V_fu_1159_p2(24 downto 15);

    y_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_V <= trunc_ln708_1_reg_1628;

    y_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= trunc_ln708_2_reg_1633;

    y_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_3_V <= trunc_ln708_3_reg_1638;

    y_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= trunc_ln708_4_reg_1643;

    y_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
