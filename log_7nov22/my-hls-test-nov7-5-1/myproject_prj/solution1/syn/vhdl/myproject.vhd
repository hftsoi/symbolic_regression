-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (79 downto 0);
    y_0_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.233937,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=242,HLS_SYN_LUT=1075,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv80_0 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv17_18000 : STD_LOGIC_VECTOR (16 downto 0) := "11000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv21_190000 : STD_LOGIC_VECTOR (20 downto 0) := "110010000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv17_15000 : STD_LOGIC_VECTOR (16 downto 0) := "10101000000000000";
    constant ap_const_lv21_130000 : STD_LOGIC_VECTOR (20 downto 0) := "100110000000000000000";
    constant ap_const_lv17_1B000 : STD_LOGIC_VECTOR (16 downto 0) := "11011000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_preg : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (79 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_1_fu_177_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_reg_1097 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_191_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_reg_1103 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_24_fu_263_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_24_reg_1110 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1055_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_1_reg_1115 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1063_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln728_reg_1120 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_28_fu_335_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_28_reg_1125 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_5_fu_399_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_5_reg_1130 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1116_4_fu_417_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1116_4_reg_1135 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln728_3_fu_439_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln728_3_reg_1140 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_31_fu_457_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_31_reg_1145 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1192_4_fu_513_p2 : STD_LOGIC_VECTOR (16 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sub_ln1192_4_fu_513_p2 : signal is "no";
    signal sub_ln1192_4_reg_1150 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_34_fu_518_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_34_reg_1155 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1080_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln728_4_reg_1160 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln728_fu_548_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln728_reg_1165 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln708_3_reg_1170 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln708_4_reg_1175 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln1117_fu_173_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_23_fu_209_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln1117_1_fu_187_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_23_fu_209_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_23_fu_209_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_18_fu_231_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal rhs_V_1_fu_241_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln728_1_fu_249_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal rhs_V_fu_215_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_24_fu_263_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_24_fu_263_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_fu_253_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_38_fu_277_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_27_fu_319_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_28_fu_335_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_28_fu_335_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln728_1_fu_345_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln728_1_fu_345_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln728_1_fu_345_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal rhs_V_7_fu_351_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_7_fu_363_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln1118_4_fu_297_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_7_fu_363_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_309_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_7_fu_363_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln728_2_fu_381_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln728_2_fu_381_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln728_2_fu_381_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal rhs_V_8_fu_387_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln728_8_fu_395_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln728_7_fu_359_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_8_fu_405_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1118_10_fu_413_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1118_2_fu_289_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_30_fu_421_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln728_3_fu_439_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln728_3_fu_439_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1118_6_fu_445_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1118_12_fu_453_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_6_fu_327_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_463_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_12_fu_477_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln1118_13_fu_473_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_12_fu_477_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_12_fu_477_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_33_fu_495_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_33_fu_495_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_33_fu_495_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_14_fu_501_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1071_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1192_4_fu_509_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_34_fu_518_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln700_fu_223_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_34_fu_518_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_39_fu_528_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1118_19_fu_544_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_35_fu_554_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_35_fu_554_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_35_fu_554_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal rhs_V_18_fu_560_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_36_fu_574_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_36_fu_574_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_36_fu_574_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_19_fu_580_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_11_fu_568_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln728_14_fu_588_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_37_fu_598_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_37_fu_598_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_37_fu_598_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_20_fu_604_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln728_15_fu_612_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_12_fu_592_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_21_fu_622_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln728_16_fu_630_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_13_fu_616_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_14_fu_634_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_22_fu_644_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln703_4_fu_640_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln728_17_fu_652_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_23_fu_662_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_15_fu_656_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1192_8_fu_670_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1192_6_fu_674_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_16_fu_680_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_1_fu_285_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln700_2_fu_259_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_fu_696_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_40_fu_704_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_24_fu_714_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln703_5_fu_710_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln728_18_fu_722_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1088_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal rhs_V_25_fu_732_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_17_fu_726_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1192_9_fu_739_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1192_7_fu_743_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ret_V_18_fu_749_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal rhs_V_2_fu_771_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln728_2_fu_778_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_2_fu_782_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 of ret_V_2_fu_782_p2 : signal is "no";
    signal rhs_V_3_fu_791_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_1_fu_787_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln728_4_fu_798_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_4_fu_808_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1192_fu_815_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_3_fu_802_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_3_fu_825_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_26_fu_836_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_26_fu_836_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_26_fu_836_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_5_fu_842_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1192_1_fu_850_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1192_fu_819_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_6_fu_860_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1192_1_fu_854_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1192_2_fu_867_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1192_fu_871_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_4_fu_877_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_9_fu_897_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln728_9_fu_904_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln703_2_fu_894_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_29_fu_914_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_29_fu_914_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_6_fu_908_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_29_fu_914_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal rhs_V_10_fu_923_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln728_10_fu_931_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln703_3_fu_919_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal rhs_V_11_fu_941_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_7_fu_935_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln728_13_fu_948_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal ret_V_8_fu_952_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal rhs_V_12_fu_958_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1192_2_fu_965_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ret_V_9_fu_971_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal rhs_V_15_fu_988_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1192_5_fu_995_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_16_fu_1004_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1192_6_fu_999_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1192_6_fu_1011_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_17_fu_1021_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1192_7_fu_1028_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1192_5_fu_1015_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1192_7_fu_1032_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_10_fu_1038_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1063_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1063_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1071_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1080_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1118_16_fu_536_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1080_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln1118_15_fu_524_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1080_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln1118_17_fu_540_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1088_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1088_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1088_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mac_muladd_10s_5s_14s_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component myproject_am_addmul_7s_5s_5s_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component myproject_mac_mul_sub_10s_5s_17ns_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component myproject_am_submul_7s_5s_5s_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    myproject_mac_muladd_10s_5s_14s_15_1_1_U1 : component myproject_mac_muladd_10s_5s_14s_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 5,
        din2_WIDTH => 14,
        dout_WIDTH => 15)
    port map (
        din0 => r_V_24_fu_263_p2,
        din1 => tmp_2_fu_191_p4,
        din2 => ret_V_fu_253_p2,
        dout => grp_fu_1055_p3);

    myproject_am_addmul_7s_5s_5s_12_1_1_U2 : component myproject_am_addmul_7s_5s_5s_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 12)
    port map (
        din0 => grp_fu_1063_p0,
        din1 => grp_fu_1063_p1,
        din2 => tmp_2_fu_191_p4,
        dout => grp_fu_1063_p3);

    myproject_mac_mul_sub_10s_5s_17ns_17_1_1_U3 : component myproject_mac_mul_sub_10s_5s_17ns_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 5,
        din2_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        din0 => r_V_12_fu_477_p2,
        din1 => tmp_4_fu_309_p4,
        din2 => grp_fu_1071_p2,
        dout => grp_fu_1071_p3);

    myproject_am_addmul_7s_5s_5s_12_1_1_U4 : component myproject_am_addmul_7s_5s_5s_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 12)
    port map (
        din0 => grp_fu_1080_p0,
        din1 => grp_fu_1080_p1,
        din2 => grp_fu_1080_p2,
        dout => grp_fu_1080_p3);

    myproject_am_submul_7s_5s_5s_12_1_1_U5 : component myproject_am_submul_7s_5s_5s_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 12)
    port map (
        din0 => grp_fu_1088_p0,
        din1 => grp_fu_1088_p1,
        din2 => grp_fu_1088_p2,
        dout => grp_fu_1088_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv80_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln728_3_reg_1140 <= mul_ln728_3_fu_439_p2;
                r_V_24_reg_1110 <= r_V_24_fu_263_p2;
                r_V_28_reg_1125 <= r_V_28_fu_335_p2;
                    r_V_31_reg_1145(8 downto 1) <= r_V_31_fu_457_p2(8 downto 1);
                r_V_34_reg_1155 <= r_V_34_fu_518_p2;
                    ret_V_5_reg_1130(18 downto 4) <= ret_V_5_fu_399_p2(18 downto 4);
                    sext_ln1116_4_reg_1135(11 downto 2) <= sext_ln1116_4_fu_417_p1(11 downto 2);
                sub_ln1192_4_reg_1150 <= sub_ln1192_4_fu_513_p2;
                sub_ln728_reg_1165 <= sub_ln728_fu_548_p2;
                tmp_1_reg_1097 <= x_V_in_sig(79 downto 75);
                tmp_2_reg_1103 <= x_V_in_sig(14 downto 10);
                trunc_ln708_3_reg_1170 <= ret_V_16_fu_680_p2(16 downto 12);
                trunc_ln708_4_reg_1175 <= ret_V_18_fu_749_p2(20 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln728_4_reg_1160 <= grp_fu_1080_p3;
                mul_ln728_reg_1120 <= grp_fu_1063_p3;
                ret_V_1_reg_1115 <= grp_fu_1055_p3;
            end if;
        end if;
    end process;
    ret_V_5_reg_1130(3 downto 0) <= "0000";
    sext_ln1116_4_reg_1135(1 downto 0) <= "00";
    r_V_31_reg_1145(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1192_1_fu_854_p2 <= std_logic_vector(signed(sext_ln1192_1_fu_850_p1) + signed(add_ln1192_fu_819_p2));
    add_ln1192_6_fu_999_p2 <= std_logic_vector(signed(sext_ln1192_5_fu_995_p1) + signed(sub_ln1192_4_reg_1150));
    add_ln1192_7_fu_1032_p2 <= std_logic_vector(signed(sext_ln1192_7_fu_1028_p1) + signed(sub_ln1192_5_fu_1015_p2));
    add_ln1192_fu_819_p2 <= std_logic_vector(signed(sext_ln1192_fu_815_p1) + signed(ret_V_3_fu_802_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1063_p0 <= sext_ln1118_1_fu_285_p1(7 - 1 downto 0);
    grp_fu_1063_p1 <= sext_ln700_2_fu_259_p1(5 - 1 downto 0);
    grp_fu_1071_p2 <= (p_Val2_18_fu_231_p4 & ap_const_lv12_0);
    grp_fu_1080_p0 <= sext_ln1118_16_fu_536_p1(7 - 1 downto 0);
    grp_fu_1080_p1 <= sext_ln1118_15_fu_524_p1(5 - 1 downto 0);
    grp_fu_1080_p2 <= sext_ln1118_17_fu_540_p1(5 - 1 downto 0);
    grp_fu_1088_p0 <= sext_ln1118_16_fu_536_p1(7 - 1 downto 0);
    grp_fu_1088_p1 <= sext_ln1118_15_fu_524_p1(5 - 1 downto 0);
    grp_fu_1088_p2 <= sext_ln1118_17_fu_540_p1(5 - 1 downto 0);
    lhs_V_fu_696_p3 <= (r_V_30_fu_421_p2 & ap_const_lv12_0);
    mul_ln728_1_fu_345_p0 <= r_V_28_fu_335_p2;
    mul_ln728_1_fu_345_p1 <= tmp_1_fu_177_p4;
    mul_ln728_1_fu_345_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln728_1_fu_345_p0) * signed(mul_ln728_1_fu_345_p1))), 14));
    mul_ln728_2_fu_381_p0 <= r_V_7_fu_363_p2;
    mul_ln728_2_fu_381_p1 <= tmp_4_fu_309_p4;
    mul_ln728_2_fu_381_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln728_2_fu_381_p0) * signed(mul_ln728_2_fu_381_p1))), 13));
    mul_ln728_3_fu_439_p0 <= r_V_30_fu_421_p2;
    mul_ln728_3_fu_439_p1 <= tmp_4_fu_309_p4;
    mul_ln728_3_fu_439_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln728_3_fu_439_p0) * signed(mul_ln728_3_fu_439_p1))), 12));
    p_Val2_18_fu_231_p4 <= x_V_in_sig(74 downto 70);
    r_V_12_fu_477_p0 <= sext_ln1118_13_fu_473_p1(5 - 1 downto 0);
    r_V_12_fu_477_p1 <= sext_ln1118_4_fu_297_p1(5 - 1 downto 0);
    r_V_12_fu_477_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_12_fu_477_p0) * signed(r_V_12_fu_477_p1))), 10));
    r_V_23_fu_209_p0 <= sext_ln1117_1_fu_187_p1(5 - 1 downto 0);
    r_V_23_fu_209_p1 <= trunc_ln1117_fu_173_p1;
    r_V_23_fu_209_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_23_fu_209_p0) * signed(r_V_23_fu_209_p1))), 10));
    r_V_24_fu_263_p0 <= sext_ln1117_1_fu_187_p1(5 - 1 downto 0);
    r_V_24_fu_263_p1 <= sext_ln1117_1_fu_187_p1(5 - 1 downto 0);
    r_V_24_fu_263_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_24_fu_263_p0) * signed(r_V_24_fu_263_p1))), 10));
    r_V_26_fu_836_p0 <= r_V_3_fu_825_p3;
    r_V_26_fu_836_p1 <= tmp_2_reg_1103;
    r_V_26_fu_836_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_26_fu_836_p0) * signed(r_V_26_fu_836_p1))), 11));
    r_V_27_fu_319_p3 <= (p_Val2_18_fu_231_p4 & ap_const_lv1_0);
    r_V_28_fu_335_p0 <= r_V_27_fu_319_p3;
    r_V_28_fu_335_p1 <= p_Val2_18_fu_231_p4;
    r_V_28_fu_335_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_28_fu_335_p0) * signed(r_V_28_fu_335_p1))), 11));
    r_V_29_fu_914_p0 <= sext_ln1116_4_reg_1135(7 - 1 downto 0);
    r_V_29_fu_914_p1 <= tmp_1_reg_1097;
    r_V_29_fu_914_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_29_fu_914_p0) * signed(r_V_29_fu_914_p1))), 12));
    r_V_30_fu_421_p2 <= std_logic_vector(signed(sext_ln1118_10_fu_413_p1) - signed(sext_ln1118_2_fu_289_p1));
    r_V_31_fu_457_p2 <= std_logic_vector(signed(sext_ln1118_12_fu_453_p1) - signed(sext_ln1118_6_fu_327_p1));
    r_V_33_fu_495_p0 <= sext_ln1117_1_fu_187_p1(5 - 1 downto 0);
    r_V_33_fu_495_p1 <= sext_ln1118_13_fu_473_p1(5 - 1 downto 0);
    r_V_33_fu_495_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_33_fu_495_p0) * signed(r_V_33_fu_495_p1))), 10));
    r_V_34_fu_518_p0 <= sext_ln700_fu_223_p1(5 - 1 downto 0);
    r_V_34_fu_518_p1 <= sext_ln1118_13_fu_473_p1(5 - 1 downto 0);
    r_V_34_fu_518_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_34_fu_518_p0) * signed(r_V_34_fu_518_p1))), 10));
    r_V_35_fu_554_p0 <= r_V_8_fu_405_p3;
    r_V_35_fu_554_p1 <= p_Val2_18_fu_231_p4;
    r_V_35_fu_554_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_35_fu_554_p0) * signed(r_V_35_fu_554_p1))), 12));
    r_V_36_fu_574_p0 <= sext_ln700_fu_223_p1(5 - 1 downto 0);
    r_V_36_fu_574_p1 <= sext_ln1118_4_fu_297_p1(5 - 1 downto 0);
    r_V_36_fu_574_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_36_fu_574_p0) * signed(r_V_36_fu_574_p1))), 10));
    r_V_37_fu_598_p0 <= tmp_4_fu_309_p4;
    r_V_37_fu_598_p1 <= sext_ln1118_4_fu_297_p1(5 - 1 downto 0);
    r_V_37_fu_598_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_37_fu_598_p0) * signed(r_V_37_fu_598_p1))), 10));
    r_V_38_fu_277_p3 <= (tmp_1_fu_177_p4 & ap_const_lv2_0);
    r_V_39_fu_528_p3 <= (tmp_5_fu_463_p4 & ap_const_lv2_0);
    r_V_3_fu_825_p3 <= (tmp_2_reg_1103 & ap_const_lv1_0);
    r_V_40_fu_704_p2 <= std_logic_vector(signed(sext_ln1118_1_fu_285_p1) - signed(sext_ln700_2_fu_259_p1));
    r_V_7_fu_363_p0 <= sext_ln1118_4_fu_297_p1(5 - 1 downto 0);
    r_V_7_fu_363_p1 <= sext_ln1118_4_fu_297_p1(5 - 1 downto 0);
    r_V_7_fu_363_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_7_fu_363_p0) * signed(r_V_7_fu_363_p1))), 10));
    r_V_8_fu_405_p3 <= (p_Val2_18_fu_231_p4 & ap_const_lv2_0);
    ret_V_10_fu_1038_p2 <= std_logic_vector(signed(ap_const_lv17_1B000) + signed(add_ln1192_7_fu_1032_p2));
    ret_V_11_fu_568_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(rhs_V_18_fu_560_p3));
    ret_V_12_fu_592_p2 <= std_logic_vector(unsigned(ret_V_11_fu_568_p2) - unsigned(sext_ln728_14_fu_588_p1));
    ret_V_13_fu_616_p2 <= std_logic_vector(signed(sext_ln728_15_fu_612_p1) + signed(ret_V_12_fu_592_p2));
    ret_V_14_fu_634_p2 <= std_logic_vector(signed(sext_ln728_16_fu_630_p1) + signed(ret_V_13_fu_616_p2));
    ret_V_15_fu_656_p2 <= std_logic_vector(signed(sext_ln703_4_fu_640_p1) - signed(sext_ln728_17_fu_652_p1));
    ret_V_16_fu_680_p2 <= std_logic_vector(signed(ap_const_lv17_18000) + signed(sub_ln1192_6_fu_674_p2));
    ret_V_17_fu_726_p2 <= std_logic_vector(signed(sext_ln703_5_fu_710_p1) - signed(sext_ln728_18_fu_722_p1));
    ret_V_18_fu_749_p2 <= std_logic_vector(signed(ap_const_lv21_190000) + signed(sub_ln1192_7_fu_743_p2));
    ret_V_2_fu_782_p2 <= std_logic_vector(signed(sext_ln728_2_fu_778_p1) + signed(ret_V_1_reg_1115));
    ret_V_3_fu_802_p2 <= std_logic_vector(signed(sext_ln703_1_fu_787_p1) - signed(sext_ln728_4_fu_798_p1));
    ret_V_4_fu_877_p2 <= std_logic_vector(signed(ap_const_lv17_15000) + signed(sub_ln1192_fu_871_p2));
    ret_V_5_fu_399_p2 <= std_logic_vector(signed(sext_ln728_8_fu_395_p1) - signed(sext_ln728_7_fu_359_p1));
    ret_V_6_fu_908_p2 <= std_logic_vector(signed(sext_ln728_9_fu_904_p1) + signed(sext_ln703_2_fu_894_p1));
    ret_V_7_fu_935_p2 <= std_logic_vector(signed(sext_ln728_10_fu_931_p1) + signed(sext_ln703_3_fu_919_p1));
    ret_V_8_fu_952_p2 <= std_logic_vector(unsigned(ret_V_7_fu_935_p2) - unsigned(sext_ln728_13_fu_948_p1));
    ret_V_9_fu_971_p2 <= std_logic_vector(signed(ap_const_lv21_130000) + signed(sub_ln1192_2_fu_965_p2));
    ret_V_fu_253_p2 <= std_logic_vector(signed(sext_ln728_1_fu_249_p1) - signed(rhs_V_fu_215_p3));
    rhs_V_10_fu_923_p3 <= (r_V_29_fu_914_p2 & ap_const_lv8_0);
    rhs_V_11_fu_941_p3 <= (mul_ln728_3_reg_1140 & ap_const_lv8_0);
    rhs_V_12_fu_958_p3 <= (r_V_31_reg_1145 & ap_const_lv12_0);
    rhs_V_14_fu_501_p3 <= (r_V_33_fu_495_p2 & ap_const_lv4_0);
    rhs_V_15_fu_988_p3 <= (r_V_34_reg_1155 & ap_const_lv4_0);
    rhs_V_16_fu_1004_p3 <= (mul_ln728_4_reg_1160 & ap_const_lv4_0);
    rhs_V_17_fu_1021_p3 <= (sub_ln728_reg_1165 & ap_const_lv8_0);
    rhs_V_18_fu_560_p3 <= (r_V_35_fu_554_p2 & ap_const_lv4_0);
    rhs_V_19_fu_580_p3 <= (r_V_36_fu_574_p2 & ap_const_lv4_0);
    rhs_V_1_fu_241_p3 <= (p_Val2_18_fu_231_p4 & ap_const_lv8_0);
    rhs_V_20_fu_604_p3 <= (r_V_37_fu_598_p2 & ap_const_lv4_0);
    rhs_V_21_fu_622_p3 <= (p_Val2_18_fu_231_p4 & ap_const_lv9_0);
    rhs_V_22_fu_644_p3 <= (tmp_1_fu_177_p4 & ap_const_lv10_0);
    rhs_V_23_fu_662_p3 <= (tmp_5_fu_463_p4 & ap_const_lv10_0);
    rhs_V_24_fu_714_p3 <= (r_V_40_fu_704_p2 & ap_const_lv12_0);
    rhs_V_25_fu_732_p3 <= (grp_fu_1088_p3 & ap_const_lv8_0);
    rhs_V_2_fu_771_p3 <= (r_V_24_reg_1110 & ap_const_lv4_0);
    rhs_V_3_fu_791_p3 <= (mul_ln728_reg_1120 & ap_const_lv4_0);
    rhs_V_4_fu_808_p3 <= (tmp_1_reg_1097 & ap_const_lv11_0);
    rhs_V_5_fu_842_p3 <= (r_V_26_fu_836_p2 & ap_const_lv4_0);
    rhs_V_6_fu_860_p3 <= (tmp_2_reg_1103 & ap_const_lv11_0);
    rhs_V_7_fu_351_p3 <= (mul_ln728_1_fu_345_p2 & ap_const_lv4_0);
    rhs_V_8_fu_387_p3 <= (mul_ln728_2_fu_381_p2 & ap_const_lv4_0);
    rhs_V_9_fu_897_p3 <= (r_V_28_reg_1125 & ap_const_lv8_0);
    rhs_V_fu_215_p3 <= (r_V_23_fu_209_p2 & ap_const_lv4_0);
        sext_ln1116_4_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_8_fu_405_p3),12));

        sext_ln1117_1_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_177_p4),10));

        sext_ln1118_10_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_8_fu_405_p3),8));

        sext_ln1118_12_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_6_fu_445_p3),9));

        sext_ln1118_13_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_463_p4),10));

        sext_ln1118_15_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_463_p4),8));

        sext_ln1118_16_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_39_fu_528_p3),8));

        sext_ln1118_17_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_463_p4),12));

        sext_ln1118_19_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_463_p4),7));

        sext_ln1118_1_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_38_fu_277_p3),8));

        sext_ln1118_2_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_18_fu_231_p4),8));

        sext_ln1118_4_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_18_fu_231_p4),10));

        sext_ln1118_6_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_27_fu_319_p3),9));

        sext_ln1192_1_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_5_fu_842_p3),17));

        sext_ln1192_2_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_6_fu_860_p3),17));

        sext_ln1192_4_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_14_fu_501_p3),17));

        sext_ln1192_5_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_15_fu_988_p3),17));

        sext_ln1192_6_fu_1011_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_16_fu_1004_p3),17));

        sext_ln1192_7_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_17_fu_1021_p3),17));

        sext_ln1192_8_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_23_fu_662_p3),17));

        sext_ln1192_9_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_25_fu_732_p3),21));

        sext_ln1192_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_4_fu_808_p3),17));

        sext_ln700_2_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_177_p4),8));

        sext_ln700_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_191_p4),10));

        sext_ln703_1_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_2_fu_782_p2),17));

        sext_ln703_2_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_5_reg_1130),20));

        sext_ln703_3_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_6_fu_908_p2),21));

        sext_ln703_4_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_14_fu_634_p2),17));

        sext_ln703_5_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_696_p3),21));

        sext_ln728_10_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_10_fu_923_p3),21));

        sext_ln728_13_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_11_fu_941_p3),21));

        sext_ln728_14_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_19_fu_580_p3),16));

        sext_ln728_15_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_20_fu_604_p3),16));

        sext_ln728_16_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_21_fu_622_p3),16));

        sext_ln728_17_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_22_fu_644_p3),17));

        sext_ln728_18_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_24_fu_714_p3),21));

        sext_ln728_1_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1_fu_241_p3),14));

        sext_ln728_2_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_2_fu_771_p3),15));

        sext_ln728_4_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_3_fu_791_p3),17));

        sext_ln728_7_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_7_fu_351_p3),19));

        sext_ln728_8_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_8_fu_387_p3),19));

        sext_ln728_9_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_9_fu_897_p3),20));

    shl_ln1118_6_fu_445_p3 <= (p_Val2_18_fu_231_p4 & ap_const_lv3_0);
    sub_ln1192_2_fu_965_p2 <= std_logic_vector(unsigned(ret_V_8_fu_952_p2) - unsigned(rhs_V_12_fu_958_p3));
    sub_ln1192_4_fu_513_p2 <= std_logic_vector(signed(grp_fu_1071_p3) - signed(sext_ln1192_4_fu_509_p1));
    sub_ln1192_5_fu_1015_p2 <= std_logic_vector(unsigned(add_ln1192_6_fu_999_p2) - unsigned(sext_ln1192_6_fu_1011_p1));
    sub_ln1192_6_fu_674_p2 <= std_logic_vector(unsigned(ret_V_15_fu_656_p2) - unsigned(sext_ln1192_8_fu_670_p1));
    sub_ln1192_7_fu_743_p2 <= std_logic_vector(unsigned(ret_V_17_fu_726_p2) - unsigned(sext_ln1192_9_fu_739_p1));
    sub_ln1192_fu_871_p2 <= std_logic_vector(unsigned(add_ln1192_1_fu_854_p2) - unsigned(sext_ln1192_2_fu_867_p1));
    sub_ln728_fu_548_p2 <= std_logic_vector(signed(sext_ln1118_19_fu_544_p1) - signed(r_V_39_fu_528_p3));
    tmp_1_fu_177_p4 <= x_V_in_sig(79 downto 75);
    tmp_2_fu_191_p4 <= x_V_in_sig(14 downto 10);
    tmp_4_fu_309_p4 <= x_V_in_sig(24 downto 20);
    tmp_5_fu_463_p4 <= x_V_in_sig(19 downto 15);
    trunc_ln1117_fu_173_p1 <= x_V_in_sig(5 - 1 downto 0);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, x_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V_ap_vld, x_V, x_V_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

    y_0_V <= ret_V_4_fu_877_p2(16 downto 12);

    y_0_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_V <= ret_V_9_fu_971_p2(20 downto 16);

    y_1_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= ret_V_10_fu_1038_p2(16 downto 12);

    y_2_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_3_V <= trunc_ln708_3_reg_1170;

    y_3_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= trunc_ln708_4_reg_1175;

    y_4_V_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
