// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.068500,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=7,HLS_SYN_FF=324,HLS_SYN_LUT=430,HLS_VERSION=2020_1}" *)

module myproject (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V_ap_vld,
        x_V,
        y_0_V,
        y_0_V_ap_vld,
        y_1_V,
        y_1_V_ap_vld,
        y_2_V,
        y_2_V_ap_vld,
        y_3_V,
        y_3_V_ap_vld,
        y_4_V,
        y_4_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   x_V_ap_vld;
input  [175:0] x_V;
output  [10:0] y_0_V;
output   y_0_V_ap_vld;
output  [10:0] y_1_V;
output   y_1_V_ap_vld;
output  [10:0] y_2_V;
output   y_2_V_ap_vld;
output  [10:0] y_3_V;
output   y_3_V_ap_vld;
output  [10:0] y_4_V;
output   y_4_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_0_V_ap_vld;
reg y_1_V_ap_vld;
reg y_2_V_ap_vld;
reg y_3_V_ap_vld;
reg y_4_V_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    x_V_ap_vld_in_sig;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [175:0] x_V_preg;
reg   [175:0] x_V_in_sig;
reg    x_V_ap_vld_preg;
reg    x_V_blk_n;
wire    ap_block_pp0_stage0;
wire  signed [23:0] grp_fu_471_p2;
reg  signed [23:0] r_V_1_reg_514;
reg   [10:0] p_Val2_2_reg_520;
reg   [8:0] tmp_reg_525;
reg   [8:0] tmp_reg_525_pp0_iter1_reg;
reg   [10:0] trunc_ln708_9_reg_530;
reg   [10:0] trunc_ln708_9_reg_530_pp0_iter1_reg;
reg   [10:0] trunc_ln708_s_reg_535;
reg   [10:0] trunc_ln708_s_reg_535_pp0_iter1_reg;
wire  signed [34:0] mul_ln700_fu_508_p2;
reg  signed [34:0] mul_ln700_reg_540;
wire   [11:0] add_ln1192_fu_432_p2;
reg   [11:0] add_ln1192_reg_545;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire  signed [10:0] p_Val2_s_fu_170_p4;
wire  signed [10:0] p_Val2_3_fu_204_p4;
wire  signed [11:0] rhs_V_1_fu_214_p1;
wire  signed [11:0] add_ln1192_2_fu_222_p2;
wire  signed [28:0] grp_fu_477_p3;
wire  signed [10:0] p_Val2_1_fu_184_p4;
wire   [13:0] shl_ln1118_4_fu_241_p3;
wire  signed [14:0] sext_ln1118_2_fu_249_p1;
wire  signed [14:0] shl_ln1118_5_fu_267_p3;
wire   [12:0] shl_ln1118_6_fu_279_p3;
wire  signed [13:0] sext_ln1118_6_fu_287_p1;
wire  signed [13:0] sext_ln1118_4_fu_263_p1;
wire   [13:0] r_V_7_fu_291_p2;
wire  signed [13:0] add_ln1192_4_fu_297_p2;
wire   [14:0] r_V_6_fu_253_p2;
wire  signed [24:0] lhs_V_1_fu_307_p3;
wire   [14:0] shl_ln1118_8_fu_319_p3;
wire  signed [15:0] sext_ln1118_7_fu_327_p1;
wire  signed [15:0] sext_ln1118_1_fu_218_p1;
wire   [15:0] r_V_8_fu_331_p2;
wire   [25:0] rhs_V_fu_337_p3;
wire  signed [25:0] grp_fu_486_p4;
(* use_dsp48 = "no" *) wire   [25:0] add_ln1192_5_fu_345_p2;
wire   [25:0] ret_V_12_fu_350_p2;
wire  signed [11:0] lhs_V_2_fu_366_p1;
wire   [11:0] ret_V_13_fu_370_p2;
wire  signed [16:0] lhs_V_3_fu_376_p3;
wire  signed [25:0] grp_fu_497_p4;
wire   [23:0] shl_ln1193_fu_397_p2;
wire   [23:0] sub_ln1193_1_fu_402_p2;
(* use_dsp48 = "no" *) wire   [23:0] add_ln1193_fu_408_p2;
wire  signed [23:0] ret_V_1_fu_413_p2;
wire  signed [11:0] sext_ln1192_fu_423_p1;
wire   [11:0] ret_V_9_fu_426_p2;
wire  signed [34:0] mul_ln700_1_fu_444_p0;
wire  signed [11:0] mul_ln700_1_fu_444_p1;
wire   [35:0] mul_ln700_1_fu_444_p2;
wire   [35:0] ret_V_10_fu_450_p2;
wire  signed [5:0] grp_fu_471_p1;
wire  signed [18:0] grp_fu_477_p1;
wire  signed [25:0] grp_fu_477_p2;
wire  signed [12:0] grp_fu_497_p1;
wire  signed [9:0] grp_fu_497_p2;
wire  signed [20:0] grp_fu_497_p3;
wire   [10:0] mul_ln700_fu_508_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 x_V_preg = 176'd0;
#0 x_V_ap_vld_preg = 1'b0;
end

myproject_am_addmul_11s_6s_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 24 ))
myproject_am_addmul_11s_6s_24_1_1_U1(
    .din0(p_Val2_s_fu_170_p4),
    .din1(grp_fu_471_p1),
    .dout(grp_fu_471_p2)
);

myproject_mac_muladd_12s_19s_26s_29_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 19 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 29 ))
myproject_mac_muladd_12s_19s_26s_29_1_1_U2(
    .din0(add_ln1192_2_fu_222_p2),
    .din1(grp_fu_477_p1),
    .din2(grp_fu_477_p2),
    .dout(grp_fu_477_p3)
);

myproject_ama_addmulsub_15s_11s_14s_25s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 14 ),
    .din3_WIDTH( 25 ),
    .dout_WIDTH( 26 ))
myproject_ama_addmulsub_15s_11s_14s_25s_26_1_1_U3(
    .din0(shl_ln1118_5_fu_267_p3),
    .din1(p_Val2_3_fu_204_p4),
    .din2(add_ln1192_4_fu_297_p2),
    .din3(lhs_V_1_fu_307_p3),
    .dout(grp_fu_486_p4)
);

myproject_ama_addmuladd_17s_13s_10s_21s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 13 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 21 ),
    .dout_WIDTH( 26 ))
myproject_ama_addmuladd_17s_13s_10s_21s_26_1_1_U4(
    .din0(lhs_V_3_fu_376_p3),
    .din1(grp_fu_497_p1),
    .din2(grp_fu_497_p2),
    .din3(grp_fu_497_p3),
    .dout(grp_fu_497_p4)
);

myproject_mul_mul_24s_11ns_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 35 ))
myproject_mul_mul_24s_11ns_35_1_1_U5(
    .din0(ret_V_1_fu_413_p2),
    .din1(mul_ln700_fu_508_p1),
    .dout(mul_ln700_fu_508_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_V_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_V_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (x_V_ap_vld == 1'b1))) begin
            x_V_ap_vld_preg <= x_V_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_V_preg <= 176'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (x_V_ap_vld == 1'b1))) begin
            x_V_preg <= x_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln1192_reg_545 <= add_ln1192_fu_432_p2;
        mul_ln700_reg_540 <= mul_ln700_fu_508_p2;
        p_Val2_2_reg_520 <= {{x_V_in_sig[54:44]}};
        tmp_reg_525 <= {{grp_fu_477_p3[28:20]}};
        tmp_reg_525_pp0_iter1_reg <= tmp_reg_525;
        trunc_ln708_9_reg_530 <= {{ret_V_12_fu_350_p2[25:15]}};
        trunc_ln708_9_reg_530_pp0_iter1_reg <= trunc_ln708_9_reg_530;
        trunc_ln708_s_reg_535 <= {{grp_fu_497_p4[25:15]}};
        trunc_ln708_s_reg_535_pp0_iter1_reg <= trunc_ln708_s_reg_535;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_V_1_reg_514 <= grp_fu_471_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((x_V_ap_vld == 1'b1)) begin
        x_V_ap_vld_in_sig = x_V_ap_vld;
    end else begin
        x_V_ap_vld_in_sig = x_V_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_V_blk_n = x_V_ap_vld;
    end else begin
        x_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x_V_ap_vld == 1'b1)) begin
        x_V_in_sig = x_V;
    end else begin
        x_V_in_sig = x_V_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        y_0_V_ap_vld = 1'b1;
    end else begin
        y_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        y_1_V_ap_vld = 1'b1;
    end else begin
        y_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        y_2_V_ap_vld = 1'b1;
    end else begin
        y_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        y_3_V_ap_vld = 1'b1;
    end else begin
        y_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        y_4_V_ap_vld = 1'b1;
    end else begin
        y_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_2_fu_222_p2 = ($signed(rhs_V_1_fu_214_p1) + $signed(12'd3721));

assign add_ln1192_4_fu_297_p2 = ($signed(r_V_7_fu_291_p2) + $signed(14'd16291));

assign add_ln1192_5_fu_345_p2 = ($signed(rhs_V_fu_337_p3) + $signed(grp_fu_486_p4));

assign add_ln1192_fu_432_p2 = (ret_V_9_fu_426_p2 + 12'd125);

assign add_ln1193_fu_408_p2 = ($signed(r_V_1_reg_514) + $signed(sub_ln1193_1_fu_402_p2));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign grp_fu_471_p1 = 12'd4066;

assign grp_fu_477_p1 = 29'd536729087;

assign grp_fu_477_p2 = 29'd507510784;

assign grp_fu_497_p1 = 18'd258305;

assign grp_fu_497_p2 = 26'd67108522;

assign grp_fu_497_p3 = 26'd66093056;

assign lhs_V_1_fu_307_p3 = {{r_V_6_fu_253_p2}, {10'd0}};

assign lhs_V_2_fu_366_p1 = p_Val2_1_fu_184_p4;

assign lhs_V_3_fu_376_p3 = {{ret_V_13_fu_370_p2}, {5'd0}};

assign mul_ln700_1_fu_444_p0 = mul_ln700_reg_540;

assign mul_ln700_1_fu_444_p1 = add_ln1192_reg_545;

assign mul_ln700_1_fu_444_p2 = ($signed(mul_ln700_1_fu_444_p0) * $signed(mul_ln700_1_fu_444_p1));

assign mul_ln700_fu_508_p1 = 35'd801;

assign p_Val2_1_fu_184_p4 = {{x_V_in_sig[164:154]}};

assign p_Val2_3_fu_204_p4 = {{x_V_in_sig[175:165]}};

assign p_Val2_s_fu_170_p4 = {{x_V_in_sig[32:22]}};

assign r_V_6_fu_253_p2 = ($signed(15'd0) - $signed(sext_ln1118_2_fu_249_p1));

assign r_V_7_fu_291_p2 = ($signed(sext_ln1118_6_fu_287_p1) - $signed(sext_ln1118_4_fu_263_p1));

assign r_V_8_fu_331_p2 = ($signed(sext_ln1118_7_fu_327_p1) + $signed(sext_ln1118_1_fu_218_p1));

assign ret_V_10_fu_450_p2 = (mul_ln700_1_fu_444_p2 + 36'd1040187392);

assign ret_V_12_fu_350_p2 = ($signed(add_ln1192_5_fu_345_p2) + $signed(26'd65341440));

assign ret_V_13_fu_370_p2 = ($signed(rhs_V_1_fu_214_p1) + $signed(lhs_V_2_fu_366_p1));

assign ret_V_1_fu_413_p2 = (add_ln1193_fu_408_p2 + 24'd13312);

assign ret_V_9_fu_426_p2 = ($signed(12'd4065) - $signed(sext_ln1192_fu_423_p1));

assign rhs_V_1_fu_214_p1 = p_Val2_3_fu_204_p4;

assign rhs_V_fu_337_p3 = {{r_V_8_fu_331_p2}, {10'd0}};

assign sext_ln1118_1_fu_218_p1 = p_Val2_s_fu_170_p4;

assign sext_ln1118_2_fu_249_p1 = $signed(shl_ln1118_4_fu_241_p3);

assign sext_ln1118_4_fu_263_p1 = p_Val2_3_fu_204_p4;

assign sext_ln1118_6_fu_287_p1 = $signed(shl_ln1118_6_fu_279_p3);

assign sext_ln1118_7_fu_327_p1 = $signed(shl_ln1118_8_fu_319_p3);

assign sext_ln1192_fu_423_p1 = $signed(p_Val2_2_reg_520);

assign shl_ln1118_4_fu_241_p3 = {{p_Val2_1_fu_184_p4}, {3'd0}};

assign shl_ln1118_5_fu_267_p3 = {{p_Val2_3_fu_204_p4}, {4'd0}};

assign shl_ln1118_6_fu_279_p3 = {{p_Val2_3_fu_204_p4}, {2'd0}};

assign shl_ln1118_8_fu_319_p3 = {{p_Val2_s_fu_170_p4}, {4'd0}};

assign shl_ln1193_fu_397_p2 = r_V_1_reg_514 << 24'd2;

assign sub_ln1193_1_fu_402_p2 = (24'd0 - shl_ln1193_fu_397_p2);

assign y_0_V = {{ret_V_10_fu_450_p2[35:25]}};

assign y_1_V = $signed(tmp_reg_525_pp0_iter1_reg);

assign y_2_V = trunc_ln708_9_reg_530_pp0_iter1_reg;

assign y_3_V = trunc_ln708_s_reg_535_pp0_iter1_reg;

assign y_4_V = 11'd2007;

endmodule //myproject
