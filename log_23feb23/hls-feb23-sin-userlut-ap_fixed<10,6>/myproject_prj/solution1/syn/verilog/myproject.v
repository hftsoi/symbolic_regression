// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.819554,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=274,HLS_SYN_LUT=240,HLS_VERSION=2020_1}" *)

module myproject (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V_ap_vld,
        x_V,
        y_0_V,
        y_0_V_ap_vld,
        y_1_V,
        y_1_V_ap_vld,
        y_2_V,
        y_2_V_ap_vld,
        y_3_V,
        y_3_V_ap_vld,
        y_4_V,
        y_4_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   x_V_ap_vld;
input  [159:0] x_V;
output  [9:0] y_0_V;
output   y_0_V_ap_vld;
output  [9:0] y_1_V;
output   y_1_V_ap_vld;
output  [9:0] y_2_V;
output   y_2_V_ap_vld;
output  [9:0] y_3_V;
output   y_3_V_ap_vld;
output  [9:0] y_4_V;
output   y_4_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_0_V_ap_vld;
reg y_1_V_ap_vld;
reg y_2_V_ap_vld;
reg y_3_V_ap_vld;
reg y_4_V_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    x_V_ap_vld_in_sig;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [159:0] x_V_preg;
reg   [159:0] x_V_in_sig;
reg    x_V_ap_vld_preg;
reg    x_V_blk_n;
wire    ap_block_pp0_stage0;
wire  signed [19:0] grp_fu_350_p3;
reg  signed [19:0] ret_V_1_reg_386;
reg   [9:0] p_Val2_2_reg_391;
reg   [9:0] trunc_ln708_9_reg_396;
reg   [9:0] trunc_ln708_9_reg_396_pp0_iter1_reg;
reg   [9:0] trunc_ln708_s_reg_401;
reg   [9:0] trunc_ln708_s_reg_401_pp0_iter1_reg;
wire  signed [28:0] mul_ln700_fu_380_p2;
reg  signed [28:0] mul_ln700_reg_406;
wire   [10:0] add_ln1192_fu_315_p2;
reg   [10:0] add_ln1192_reg_411;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire  signed [9:0] p_Val2_s_fu_149_p4;
wire  signed [9:0] p_Val2_3_fu_183_p4;
wire  signed [9:0] p_Val2_1_fu_163_p4;
wire   [11:0] shl_ln1118_7_fu_197_p3;
wire  signed [12:0] sext_ln1118_2_fu_205_p1;
wire  signed [12:0] r_V_1_fu_215_p3;
wire   [12:0] r_V_fu_209_p2;
wire  signed [20:0] lhs_V_1_fu_227_p3;
wire   [20:0] rhs_V_fu_239_p3;
wire  signed [21:0] grp_fu_358_p4;
wire  signed [21:0] sext_ln1192_4_fu_247_p1;
(* use_dsp48 = "no" *) wire   [21:0] add_ln1192_3_fu_251_p2;
wire   [21:0] ret_V_11_fu_256_p2;
wire  signed [10:0] lhs_V_2_fu_272_p1;
wire  signed [10:0] rhs_V_1_fu_193_p1;
wire   [10:0] ret_V_12_fu_276_p2;
wire  signed [14:0] lhs_V_3_fu_282_p3;
wire  signed [21:0] grp_fu_369_p4;
wire  signed [10:0] sext_ln1192_fu_306_p1;
wire   [10:0] ret_V_9_fu_309_p2;
wire  signed [10:0] mul_ln700_1_fu_327_p0;
wire  signed [28:0] mul_ln700_1_fu_327_p1;
wire   [29:0] mul_ln700_1_fu_327_p2;
wire   [29:0] ret_V_10_fu_333_p2;
wire  signed [4:0] grp_fu_350_p1;
wire   [11:0] grp_fu_350_p2;
wire  signed [9:0] grp_fu_358_p0;
wire  signed [4:0] grp_fu_358_p1;
wire  signed [10:0] grp_fu_369_p1;
wire  signed [7:0] grp_fu_369_p2;
wire  signed [16:0] grp_fu_369_p3;
wire   [8:0] mul_ln700_fu_380_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 x_V_preg = 160'd0;
#0 x_V_ap_vld_preg = 1'b0;
end

myproject_ama_addmulsub_10s_5s_12ns_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 20 ))
myproject_ama_addmulsub_10s_5s_12ns_20_1_1_U1(
    .din0(p_Val2_s_fu_149_p4),
    .din1(grp_fu_350_p1),
    .din2(grp_fu_350_p2),
    .dout(grp_fu_350_p3)
);

myproject_ama_addmulsub_10s_5s_13s_21s_22_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 13 ),
    .din3_WIDTH( 21 ),
    .dout_WIDTH( 22 ))
myproject_ama_addmulsub_10s_5s_13s_21s_22_1_1_U2(
    .din0(grp_fu_358_p0),
    .din1(grp_fu_358_p1),
    .din2(r_V_1_fu_215_p3),
    .din3(lhs_V_1_fu_227_p3),
    .dout(grp_fu_358_p4)
);

myproject_ama_addmuladd_15s_11s_8s_17s_22_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 17 ),
    .dout_WIDTH( 22 ))
myproject_ama_addmuladd_15s_11s_8s_17s_22_1_1_U3(
    .din0(lhs_V_3_fu_282_p3),
    .din1(grp_fu_369_p1),
    .din2(grp_fu_369_p2),
    .din3(grp_fu_369_p3),
    .dout(grp_fu_369_p4)
);

myproject_mul_mul_20s_9ns_29_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 29 ))
myproject_mul_mul_20s_9ns_29_1_1_U4(
    .din0(ret_V_1_reg_386),
    .din1(mul_ln700_fu_380_p1),
    .dout(mul_ln700_fu_380_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_V_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_V_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (x_V_ap_vld == 1'b1))) begin
            x_V_ap_vld_preg <= x_V_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_V_preg <= 160'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (x_V_ap_vld == 1'b1))) begin
            x_V_preg <= x_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln1192_reg_411 <= add_ln1192_fu_315_p2;
        mul_ln700_reg_406 <= mul_ln700_fu_380_p2;
        p_Val2_2_reg_391 <= {{x_V_in_sig[49:40]}};
        trunc_ln708_9_reg_396 <= {{ret_V_11_fu_256_p2[21:12]}};
        trunc_ln708_9_reg_396_pp0_iter1_reg <= trunc_ln708_9_reg_396;
        trunc_ln708_s_reg_401 <= {{grp_fu_369_p4[21:12]}};
        trunc_ln708_s_reg_401_pp0_iter1_reg <= trunc_ln708_s_reg_401;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ret_V_1_reg_386 <= grp_fu_350_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((x_V_ap_vld == 1'b1)) begin
        x_V_ap_vld_in_sig = x_V_ap_vld;
    end else begin
        x_V_ap_vld_in_sig = x_V_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_V_blk_n = x_V_ap_vld;
    end else begin
        x_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x_V_ap_vld == 1'b1)) begin
        x_V_in_sig = x_V;
    end else begin
        x_V_in_sig = x_V_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        y_0_V_ap_vld = 1'b1;
    end else begin
        y_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        y_1_V_ap_vld = 1'b1;
    end else begin
        y_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        y_2_V_ap_vld = 1'b1;
    end else begin
        y_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        y_3_V_ap_vld = 1'b1;
    end else begin
        y_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        y_4_V_ap_vld = 1'b1;
    end else begin
        y_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_3_fu_251_p2 = ($signed(grp_fu_358_p4) + $signed(sext_ln1192_4_fu_247_p1));

assign add_ln1192_fu_315_p2 = (ret_V_9_fu_309_p2 + 11'd62);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (x_V_ap_vld_in_sig == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign grp_fu_350_p1 = 11'd2033;

assign grp_fu_350_p2 = 20'd1536;

assign grp_fu_358_p0 = rhs_V_1_fu_193_p1;

assign grp_fu_358_p1 = 11'd2033;

assign grp_fu_369_p1 = 16'd64561;

assign grp_fu_369_p2 = 22'd4194228;

assign grp_fu_369_p3 = 22'd4128768;

assign lhs_V_1_fu_227_p3 = {{r_V_fu_209_p2}, {8'd0}};

assign lhs_V_2_fu_272_p1 = p_Val2_1_fu_163_p4;

assign lhs_V_3_fu_282_p3 = {{ret_V_12_fu_276_p2}, {4'd0}};

assign mul_ln700_1_fu_327_p0 = add_ln1192_reg_411;

assign mul_ln700_1_fu_327_p1 = mul_ln700_reg_406;

assign mul_ln700_1_fu_327_p2 = ($signed(mul_ln700_1_fu_327_p0) * $signed(mul_ln700_1_fu_327_p1));

assign mul_ln700_fu_380_p1 = 29'd177;

assign p_Val2_1_fu_163_p4 = {{x_V_in_sig[149:140]}};

assign p_Val2_3_fu_183_p4 = {{x_V_in_sig[159:150]}};

assign p_Val2_s_fu_149_p4 = {{x_V_in_sig[29:20]}};

assign r_V_1_fu_215_p3 = {{p_Val2_3_fu_183_p4}, {3'd0}};

assign r_V_fu_209_p2 = ($signed(13'd0) - $signed(sext_ln1118_2_fu_205_p1));

assign ret_V_10_fu_333_p2 = (mul_ln700_1_fu_327_p2 + 30'd15728640);

assign ret_V_11_fu_256_p2 = ($signed(add_ln1192_3_fu_251_p2) + $signed(22'd4087808));

assign ret_V_12_fu_276_p2 = ($signed(lhs_V_2_fu_272_p1) + $signed(rhs_V_1_fu_193_p1));

assign ret_V_9_fu_309_p2 = ($signed(11'd2033) - $signed(sext_ln1192_fu_306_p1));

assign rhs_V_1_fu_193_p1 = p_Val2_3_fu_183_p4;

assign rhs_V_fu_239_p3 = {{p_Val2_s_fu_149_p4}, {11'd0}};

assign sext_ln1118_2_fu_205_p1 = $signed(shl_ln1118_7_fu_197_p3);

assign sext_ln1192_4_fu_247_p1 = $signed(rhs_V_fu_239_p3);

assign sext_ln1192_fu_306_p1 = $signed(p_Val2_2_reg_391);

assign shl_ln1118_7_fu_197_p3 = {{p_Val2_1_fu_163_p4}, {2'd0}};

assign y_0_V = {{ret_V_10_fu_333_p2[29:20]}};

assign y_1_V = 10'd9;

assign y_2_V = trunc_ln708_9_reg_396_pp0_iter1_reg;

assign y_3_V = trunc_ln708_s_reg_401_pp0_iter1_reg;

assign y_4_V = 10'd1004;

endmodule //myproject
