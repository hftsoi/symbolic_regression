-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (159 downto 0);
    y_0_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.819554,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=274,HLS_SYN_LUT=240,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv160_lc_1 : STD_LOGIC_VECTOR (159 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv10_9 : STD_LOGIC_VECTOR (9 downto 0) := "0000001001";
    constant ap_const_lv10_3EC : STD_LOGIC_VECTOR (9 downto 0) := "1111101100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv22_3E6000 : STD_LOGIC_VECTOR (21 downto 0) := "1111100110000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv11_7F1 : STD_LOGIC_VECTOR (10 downto 0) := "11111110001";
    constant ap_const_lv11_3E : STD_LOGIC_VECTOR (10 downto 0) := "00000111110";
    constant ap_const_lv30_F00000 : STD_LOGIC_VECTOR (29 downto 0) := "000000111100000000000000000000";
    constant ap_const_lv20_600 : STD_LOGIC_VECTOR (19 downto 0) := "00000000011000000000";
    constant ap_const_lv16_FC31 : STD_LOGIC_VECTOR (15 downto 0) := "1111110000110001";
    constant ap_const_lv22_3FFFB4 : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111110110100";
    constant ap_const_lv22_3F0000 : STD_LOGIC_VECTOR (21 downto 0) := "1111110000000000000000";
    constant ap_const_lv29_B1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010110001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_preg : STD_LOGIC_VECTOR (159 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (159 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_350_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_1_reg_386 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_2_reg_391 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln708_9_reg_396 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln708_9_reg_396_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln708_s_reg_401 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln708_s_reg_401_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln700_fu_380_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln700_reg_406 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln1192_fu_315_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1192_reg_411 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_Val2_s_fu_149_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_3_fu_183_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_1_fu_163_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln1118_7_fu_197_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_2_fu_205_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_1_fu_215_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_fu_209_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal lhs_V_1_fu_227_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal rhs_V_fu_239_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_358_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1192_4_fu_247_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln1192_3_fu_251_p2 : STD_LOGIC_VECTOR (21 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln1192_3_fu_251_p2 : signal is "no";
    signal ret_V_11_fu_256_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal lhs_V_2_fu_272_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_1_fu_193_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_12_fu_276_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_V_3_fu_282_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_369_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1192_fu_306_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_9_fu_309_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln700_1_fu_327_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln700_1_fu_327_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln700_1_fu_327_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_10_fu_333_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_350_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_350_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_358_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_358_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_369_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_369_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_369_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln700_fu_380_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_ama_addmulsub_10s_5s_12ns_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component myproject_ama_addmulsub_10s_5s_13s_21s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        din3 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_ama_addmuladd_15s_11s_8s_17s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_mul_mul_20s_9ns_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;



begin
    myproject_ama_addmulsub_10s_5s_12ns_20_1_1_U1 : component myproject_ama_addmulsub_10s_5s_12ns_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 5,
        din2_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        din0 => p_Val2_s_fu_149_p4,
        din1 => grp_fu_350_p1,
        din2 => grp_fu_350_p2,
        dout => grp_fu_350_p3);

    myproject_ama_addmulsub_10s_5s_13s_21s_22_1_1_U2 : component myproject_ama_addmulsub_10s_5s_13s_21s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 5,
        din2_WIDTH => 13,
        din3_WIDTH => 21,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_358_p0,
        din1 => grp_fu_358_p1,
        din2 => r_V_1_fu_215_p3,
        din3 => lhs_V_1_fu_227_p3,
        dout => grp_fu_358_p4);

    myproject_ama_addmuladd_15s_11s_8s_17s_22_1_1_U3 : component myproject_ama_addmuladd_15s_11s_8s_17s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 11,
        din2_WIDTH => 8,
        din3_WIDTH => 17,
        dout_WIDTH => 22)
    port map (
        din0 => lhs_V_3_fu_282_p3,
        din1 => grp_fu_369_p1,
        din2 => grp_fu_369_p2,
        din3 => grp_fu_369_p3,
        dout => grp_fu_369_p4);

    myproject_mul_mul_20s_9ns_29_1_1_U4 : component myproject_mul_mul_20s_9ns_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 9,
        dout_WIDTH => 29)
    port map (
        din0 => ret_V_1_reg_386,
        din1 => mul_ln700_fu_380_p1,
        dout => mul_ln700_fu_380_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv160_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1192_reg_411 <= add_ln1192_fu_315_p2;
                mul_ln700_reg_406 <= mul_ln700_fu_380_p2;
                p_Val2_2_reg_391 <= x_V_in_sig(49 downto 40);
                trunc_ln708_9_reg_396 <= ret_V_11_fu_256_p2(21 downto 12);
                trunc_ln708_9_reg_396_pp0_iter1_reg <= trunc_ln708_9_reg_396;
                trunc_ln708_s_reg_401 <= grp_fu_369_p4(21 downto 12);
                trunc_ln708_s_reg_401_pp0_iter1_reg <= trunc_ln708_s_reg_401;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ret_V_1_reg_386 <= grp_fu_350_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1192_3_fu_251_p2 <= std_logic_vector(signed(grp_fu_358_p4) + signed(sext_ln1192_4_fu_247_p1));
    add_ln1192_fu_315_p2 <= std_logic_vector(unsigned(ret_V_9_fu_309_p2) + unsigned(ap_const_lv11_3E));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_350_p1 <= ap_const_lv11_7F1(5 - 1 downto 0);
    grp_fu_350_p2 <= ap_const_lv20_600(12 - 1 downto 0);
    grp_fu_358_p0 <= rhs_V_1_fu_193_p1(10 - 1 downto 0);
    grp_fu_358_p1 <= ap_const_lv11_7F1(5 - 1 downto 0);
    grp_fu_369_p1 <= ap_const_lv16_FC31(11 - 1 downto 0);
    grp_fu_369_p2 <= ap_const_lv22_3FFFB4(8 - 1 downto 0);
    grp_fu_369_p3 <= ap_const_lv22_3F0000(17 - 1 downto 0);
    lhs_V_1_fu_227_p3 <= (r_V_fu_209_p2 & ap_const_lv8_0);
        lhs_V_2_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_fu_163_p4),11));

    lhs_V_3_fu_282_p3 <= (ret_V_12_fu_276_p2 & ap_const_lv4_0);
    mul_ln700_1_fu_327_p0 <= add_ln1192_reg_411;
    mul_ln700_1_fu_327_p1 <= mul_ln700_reg_406;
    mul_ln700_1_fu_327_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_1_fu_327_p0) * signed(mul_ln700_1_fu_327_p1))), 30));
    mul_ln700_fu_380_p1 <= ap_const_lv29_B1(9 - 1 downto 0);
    p_Val2_1_fu_163_p4 <= x_V_in_sig(149 downto 140);
    p_Val2_3_fu_183_p4 <= x_V_in_sig(159 downto 150);
    p_Val2_s_fu_149_p4 <= x_V_in_sig(29 downto 20);
    r_V_1_fu_215_p3 <= (p_Val2_3_fu_183_p4 & ap_const_lv3_0);
    r_V_fu_209_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(sext_ln1118_2_fu_205_p1));
    ret_V_10_fu_333_p2 <= std_logic_vector(unsigned(mul_ln700_1_fu_327_p2) + unsigned(ap_const_lv30_F00000));
    ret_V_11_fu_256_p2 <= std_logic_vector(unsigned(add_ln1192_3_fu_251_p2) + unsigned(ap_const_lv22_3E6000));
    ret_V_12_fu_276_p2 <= std_logic_vector(signed(lhs_V_2_fu_272_p1) + signed(rhs_V_1_fu_193_p1));
    ret_V_9_fu_309_p2 <= std_logic_vector(signed(ap_const_lv11_7F1) - signed(sext_ln1192_fu_306_p1));
        rhs_V_1_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_3_fu_183_p4),11));

    rhs_V_fu_239_p3 <= (p_Val2_s_fu_149_p4 & ap_const_lv11_0);
        sext_ln1118_2_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_7_fu_197_p3),13));

        sext_ln1192_4_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_239_p3),22));

        sext_ln1192_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_reg_391),11));

    shl_ln1118_7_fu_197_p3 <= (p_Val2_1_fu_163_p4 & ap_const_lv2_0);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, x_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V_ap_vld, x_V, x_V_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

    y_0_V <= ret_V_10_fu_333_p2(29 downto 20);

    y_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_V <= ap_const_lv10_9;

    y_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= trunc_ln708_9_reg_396_pp0_iter1_reg;

    y_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_3_V <= trunc_ln708_s_reg_401_pp0_iter1_reg;

    y_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= ap_const_lv10_3EC;

    y_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
