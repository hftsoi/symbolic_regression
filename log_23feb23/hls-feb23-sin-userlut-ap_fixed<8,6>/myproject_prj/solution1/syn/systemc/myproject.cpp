// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "myproject.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic myproject::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic myproject::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> myproject::ap_ST_fsm_state1 = "1";
const sc_lv<32> myproject::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<128> myproject::ap_const_lv128_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<8> myproject::ap_const_lv8_1 = "1";
const sc_lv<8> myproject::ap_const_lv8_FC = "11111100";
const sc_lv<32> myproject::ap_const_lv32_70 = "1110000";
const sc_lv<32> myproject::ap_const_lv32_77 = "1110111";
const sc_lv<32> myproject::ap_const_lv32_20 = "100000";
const sc_lv<32> myproject::ap_const_lv32_27 = "100111";
const sc_lv<32> myproject::ap_const_lv32_78 = "1111000";
const sc_lv<32> myproject::ap_const_lv32_7F = "1111111";
const sc_lv<9> myproject::ap_const_lv9_1FD = "111111101";
const sc_lv<9> myproject::ap_const_lv9_F = "1111";
const sc_lv<2> myproject::ap_const_lv2_0 = "00";
const sc_lv<4> myproject::ap_const_lv4_0 = "0000";
const sc_lv<18> myproject::ap_const_lv18_C00 = "110000000000";
const sc_lv<32> myproject::ap_const_lv32_A = "1010";
const sc_lv<32> myproject::ap_const_lv32_11 = "10001";
const sc_lv<9> myproject::ap_const_lv9_0 = "000000000";
const sc_lv<32> myproject::ap_const_lv32_10 = "10000";
const sc_lv<32> myproject::ap_const_lv32_17 = "10111";
const sc_lv<5> myproject::ap_const_lv5_0 = "00000";
const sc_lv<14> myproject::ap_const_lv14_3E80 = "11111010000000";
const sc_lv<32> myproject::ap_const_lv32_6 = "110";
const sc_lv<32> myproject::ap_const_lv32_D = "1101";
const sc_lv<12> myproject::ap_const_lv12_FFD = "111111111101";
const sc_lv<14> myproject::ap_const_lv14_3FF0 = "11111111110000";
const bool myproject::ap_const_boolean_1 = true;

myproject::myproject(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln1192_4_fu_329_p2);
    sensitive << ( sext_ln1192_1_fu_325_p1 );

    SC_METHOD(thread_add_ln1192_fu_187_p2);
    sensitive << ( ret_V_fu_181_p2 );

    SC_METHOD(thread_add_ln700_fu_209_p2);
    sensitive << ( sext_ln700_1_fu_205_p1 );
    sensitive << ( sext_ln700_fu_193_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( x_V_ap_vld_in_sig );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld_in_sig );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld_in_sig );

    SC_METHOD(thread_lhs_V_1_fu_317_p3);
    sensitive << ( ret_V_4_fu_311_p2 );

    SC_METHOD(thread_lhs_V_2_fu_250_p3);
    sensitive << ( r_V_fu_244_p2 );

    SC_METHOD(thread_lhs_V_fu_153_p1);
    sensitive << ( p_Val2_s_fu_143_p4 );

    SC_METHOD(thread_p_Val2_1_fu_157_p4);
    sensitive << ( x_V_in_sig );

    SC_METHOD(thread_p_Val2_2_fu_167_p4);
    sensitive << ( x_V_in_sig );

    SC_METHOD(thread_p_Val2_s_fu_143_p4);
    sensitive << ( x_V_in_sig );

    SC_METHOD(thread_r_V_fu_244_p2);
    sensitive << ( lhs_V_fu_153_p1 );

    SC_METHOD(thread_ret_V_1_fu_227_p2);
    sensitive << ( sext_ln700_2_fu_223_p1 );

    SC_METHOD(thread_ret_V_2_fu_284_p2);
    sensitive << ( sext_ln728_fu_280_p1 );
    sensitive << ( sext_ln703_fu_268_p1 );

    SC_METHOD(thread_ret_V_3_fu_290_p2);
    sensitive << ( ret_V_2_fu_284_p2 );

    SC_METHOD(thread_ret_V_4_fu_311_p2);
    sensitive << ( lhs_V_fu_153_p1 );
    sensitive << ( rhs_V_1_fu_307_p1 );

    SC_METHOD(thread_ret_V_5_fu_343_p2);
    sensitive << ( shl_ln1_fu_335_p3 );

    SC_METHOD(thread_ret_V_fu_181_p2);
    sensitive << ( sext_ln1192_fu_177_p1 );

    SC_METHOD(thread_rhs_V_1_fu_307_p1);
    sensitive << ( p_Val2_2_fu_167_p4 );

    SC_METHOD(thread_rhs_V_fu_272_p3);
    sensitive << ( tmp_1_fu_258_p4 );

    SC_METHOD(thread_sext_ln1192_1_fu_325_p1);
    sensitive << ( lhs_V_1_fu_317_p3 );

    SC_METHOD(thread_sext_ln1192_fu_177_p1);
    sensitive << ( p_Val2_1_fu_157_p4 );

    SC_METHOD(thread_sext_ln700_1_fu_205_p1);
    sensitive << ( tmp_fu_197_p3 );

    SC_METHOD(thread_sext_ln700_2_fu_223_p1);
    sensitive << ( tmp_2_fu_215_p3 );

    SC_METHOD(thread_sext_ln700_fu_193_p1);
    sensitive << ( add_ln1192_fu_187_p2 );

    SC_METHOD(thread_sext_ln703_fu_268_p1);
    sensitive << ( lhs_V_2_fu_250_p3 );

    SC_METHOD(thread_sext_ln728_fu_280_p1);
    sensitive << ( rhs_V_fu_272_p3 );

    SC_METHOD(thread_shl_ln1_fu_335_p3);
    sensitive << ( add_ln1192_4_fu_329_p2 );

    SC_METHOD(thread_tmp_1_fu_258_p4);
    sensitive << ( x_V_in_sig );

    SC_METHOD(thread_tmp_2_fu_215_p3);
    sensitive << ( add_ln700_fu_209_p2 );

    SC_METHOD(thread_tmp_fu_197_p3);
    sensitive << ( add_ln1192_fu_187_p2 );

    SC_METHOD(thread_x_V_ap_vld_in_sig);
    sensitive << ( x_V_ap_vld );
    sensitive << ( x_V_ap_vld_preg );

    SC_METHOD(thread_x_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld );

    SC_METHOD(thread_x_V_in_sig);
    sensitive << ( x_V );
    sensitive << ( x_V_preg );
    sensitive << ( x_V_ap_vld );

    SC_METHOD(thread_y_0_V);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld_in_sig );
    sensitive << ( ret_V_1_fu_227_p2 );

    SC_METHOD(thread_y_0_V_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld_in_sig );

    SC_METHOD(thread_y_1_V);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld_in_sig );

    SC_METHOD(thread_y_1_V_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld_in_sig );

    SC_METHOD(thread_y_2_V);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld_in_sig );
    sensitive << ( ret_V_3_fu_290_p2 );

    SC_METHOD(thread_y_2_V_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld_in_sig );

    SC_METHOD(thread_y_3_V);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld_in_sig );
    sensitive << ( ret_V_5_fu_343_p2 );

    SC_METHOD(thread_y_3_V_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld_in_sig );

    SC_METHOD(thread_y_4_V);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld_in_sig );

    SC_METHOD(thread_y_4_V_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld_in_sig );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld_in_sig );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "1";
    x_V_preg = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    x_V_ap_vld_preg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "myproject_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x_V, "(port)x_V");
    sc_trace(mVcdFile, x_V_ap_vld, "(port)x_V_ap_vld");
    sc_trace(mVcdFile, y_0_V, "(port)y_0_V");
    sc_trace(mVcdFile, y_0_V_ap_vld, "(port)y_0_V_ap_vld");
    sc_trace(mVcdFile, y_1_V, "(port)y_1_V");
    sc_trace(mVcdFile, y_1_V_ap_vld, "(port)y_1_V_ap_vld");
    sc_trace(mVcdFile, y_2_V, "(port)y_2_V");
    sc_trace(mVcdFile, y_2_V_ap_vld, "(port)y_2_V_ap_vld");
    sc_trace(mVcdFile, y_3_V, "(port)y_3_V");
    sc_trace(mVcdFile, y_3_V_ap_vld, "(port)y_3_V_ap_vld");
    sc_trace(mVcdFile, y_4_V, "(port)y_4_V");
    sc_trace(mVcdFile, y_4_V_ap_vld, "(port)y_4_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, x_V_preg, "x_V_preg");
    sc_trace(mVcdFile, x_V_in_sig, "x_V_in_sig");
    sc_trace(mVcdFile, x_V_ap_vld_preg, "x_V_ap_vld_preg");
    sc_trace(mVcdFile, x_V_ap_vld_in_sig, "x_V_ap_vld_in_sig");
    sc_trace(mVcdFile, x_V_blk_n, "x_V_blk_n");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, p_Val2_s_fu_143_p4, "p_Val2_s_fu_143_p4");
    sc_trace(mVcdFile, p_Val2_1_fu_157_p4, "p_Val2_1_fu_157_p4");
    sc_trace(mVcdFile, sext_ln1192_fu_177_p1, "sext_ln1192_fu_177_p1");
    sc_trace(mVcdFile, ret_V_fu_181_p2, "ret_V_fu_181_p2");
    sc_trace(mVcdFile, add_ln1192_fu_187_p2, "add_ln1192_fu_187_p2");
    sc_trace(mVcdFile, tmp_fu_197_p3, "tmp_fu_197_p3");
    sc_trace(mVcdFile, sext_ln700_1_fu_205_p1, "sext_ln700_1_fu_205_p1");
    sc_trace(mVcdFile, sext_ln700_fu_193_p1, "sext_ln700_fu_193_p1");
    sc_trace(mVcdFile, add_ln700_fu_209_p2, "add_ln700_fu_209_p2");
    sc_trace(mVcdFile, tmp_2_fu_215_p3, "tmp_2_fu_215_p3");
    sc_trace(mVcdFile, sext_ln700_2_fu_223_p1, "sext_ln700_2_fu_223_p1");
    sc_trace(mVcdFile, ret_V_1_fu_227_p2, "ret_V_1_fu_227_p2");
    sc_trace(mVcdFile, lhs_V_fu_153_p1, "lhs_V_fu_153_p1");
    sc_trace(mVcdFile, r_V_fu_244_p2, "r_V_fu_244_p2");
    sc_trace(mVcdFile, lhs_V_2_fu_250_p3, "lhs_V_2_fu_250_p3");
    sc_trace(mVcdFile, tmp_1_fu_258_p4, "tmp_1_fu_258_p4");
    sc_trace(mVcdFile, rhs_V_fu_272_p3, "rhs_V_fu_272_p3");
    sc_trace(mVcdFile, sext_ln728_fu_280_p1, "sext_ln728_fu_280_p1");
    sc_trace(mVcdFile, sext_ln703_fu_268_p1, "sext_ln703_fu_268_p1");
    sc_trace(mVcdFile, ret_V_2_fu_284_p2, "ret_V_2_fu_284_p2");
    sc_trace(mVcdFile, ret_V_3_fu_290_p2, "ret_V_3_fu_290_p2");
    sc_trace(mVcdFile, p_Val2_2_fu_167_p4, "p_Val2_2_fu_167_p4");
    sc_trace(mVcdFile, rhs_V_1_fu_307_p1, "rhs_V_1_fu_307_p1");
    sc_trace(mVcdFile, ret_V_4_fu_311_p2, "ret_V_4_fu_311_p2");
    sc_trace(mVcdFile, lhs_V_1_fu_317_p3, "lhs_V_1_fu_317_p3");
    sc_trace(mVcdFile, sext_ln1192_1_fu_325_p1, "sext_ln1192_1_fu_325_p1");
    sc_trace(mVcdFile, add_ln1192_4_fu_329_p2, "add_ln1192_4_fu_329_p2");
    sc_trace(mVcdFile, shl_ln1_fu_335_p3, "shl_ln1_fu_335_p3");
    sc_trace(mVcdFile, ret_V_5_fu_343_p2, "ret_V_5_fu_343_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("myproject.hdltvin.dat");
    mHdltvoutHandle.open("myproject.hdltvout.dat");
}

myproject::~myproject() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void myproject::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        x_V_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_V_ap_vld_in_sig.read())))) {
            x_V_ap_vld_preg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, x_V_ap_vld.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())))) {
            x_V_ap_vld_preg = x_V_ap_vld.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        x_V_preg = ap_const_lv128_lc_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, x_V_ap_vld.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())))) {
            x_V_preg = x_V.read();
        }
    }
}

void myproject::thread_add_ln1192_4_fu_329_p2() {
    add_ln1192_4_fu_329_p2 = (!sext_ln1192_1_fu_325_p1.read().is_01() || !ap_const_lv12_FFD.is_01())? sc_lv<12>(): (sc_bigint<12>(sext_ln1192_1_fu_325_p1.read()) + sc_bigint<12>(ap_const_lv12_FFD));
}

void myproject::thread_add_ln1192_fu_187_p2() {
    add_ln1192_fu_187_p2 = (!ret_V_fu_181_p2.read().is_01() || !ap_const_lv9_F.is_01())? sc_lv<9>(): (sc_biguint<9>(ret_V_fu_181_p2.read()) + sc_biguint<9>(ap_const_lv9_F));
}

void myproject::thread_add_ln700_fu_209_p2() {
    add_ln700_fu_209_p2 = (!sext_ln700_1_fu_205_p1.read().is_01() || !sext_ln700_fu_193_p1.read().is_01())? sc_lv<13>(): (sc_bigint<13>(sext_ln700_1_fu_205_p1.read()) + sc_bigint<13>(sext_ln700_fu_193_p1.read()));
}

void myproject::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void myproject::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_V_ap_vld_in_sig.read()));
}

void myproject::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_V_ap_vld_in_sig.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void myproject::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void myproject::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_V_ap_vld_in_sig.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void myproject::thread_lhs_V_1_fu_317_p3() {
    lhs_V_1_fu_317_p3 = esl_concat<9,2>(ret_V_4_fu_311_p2.read(), ap_const_lv2_0);
}

void myproject::thread_lhs_V_2_fu_250_p3() {
    lhs_V_2_fu_250_p3 = esl_concat<9,4>(r_V_fu_244_p2.read(), ap_const_lv4_0);
}

void myproject::thread_lhs_V_fu_153_p1() {
    lhs_V_fu_153_p1 = esl_sext<9,8>(p_Val2_s_fu_143_p4.read());
}

void myproject::thread_p_Val2_1_fu_157_p4() {
    p_Val2_1_fu_157_p4 = x_V_in_sig.read().range(39, 32);
}

void myproject::thread_p_Val2_2_fu_167_p4() {
    p_Val2_2_fu_167_p4 = x_V_in_sig.read().range(127, 120);
}

void myproject::thread_p_Val2_s_fu_143_p4() {
    p_Val2_s_fu_143_p4 = x_V_in_sig.read().range(119, 112);
}

void myproject::thread_r_V_fu_244_p2() {
    r_V_fu_244_p2 = (!ap_const_lv9_0.is_01() || !lhs_V_fu_153_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(ap_const_lv9_0) - sc_bigint<9>(lhs_V_fu_153_p1.read()));
}

void myproject::thread_ret_V_1_fu_227_p2() {
    ret_V_1_fu_227_p2 = (!sext_ln700_2_fu_223_p1.read().is_01() || !ap_const_lv18_C00.is_01())? sc_lv<18>(): (sc_bigint<18>(sext_ln700_2_fu_223_p1.read()) + sc_biguint<18>(ap_const_lv18_C00));
}

void myproject::thread_ret_V_2_fu_284_p2() {
    ret_V_2_fu_284_p2 = (!sext_ln728_fu_280_p1.read().is_01() || !sext_ln703_fu_268_p1.read().is_01())? sc_lv<14>(): (sc_bigint<14>(sext_ln728_fu_280_p1.read()) + sc_bigint<14>(sext_ln703_fu_268_p1.read()));
}

void myproject::thread_ret_V_3_fu_290_p2() {
    ret_V_3_fu_290_p2 = (!ret_V_2_fu_284_p2.read().is_01() || !ap_const_lv14_3E80.is_01())? sc_lv<14>(): (sc_biguint<14>(ret_V_2_fu_284_p2.read()) + sc_bigint<14>(ap_const_lv14_3E80));
}

void myproject::thread_ret_V_4_fu_311_p2() {
    ret_V_4_fu_311_p2 = (!lhs_V_fu_153_p1.read().is_01() || !rhs_V_1_fu_307_p1.read().is_01())? sc_lv<9>(): (sc_bigint<9>(lhs_V_fu_153_p1.read()) + sc_bigint<9>(rhs_V_1_fu_307_p1.read()));
}

void myproject::thread_ret_V_5_fu_343_p2() {
    ret_V_5_fu_343_p2 = (!ap_const_lv14_3FF0.is_01() || !shl_ln1_fu_335_p3.read().is_01())? sc_lv<14>(): (sc_bigint<14>(ap_const_lv14_3FF0) - sc_biguint<14>(shl_ln1_fu_335_p3.read()));
}

void myproject::thread_ret_V_fu_181_p2() {
    ret_V_fu_181_p2 = (!ap_const_lv9_1FD.is_01() || !sext_ln1192_fu_177_p1.read().is_01())? sc_lv<9>(): (sc_bigint<9>(ap_const_lv9_1FD) - sc_bigint<9>(sext_ln1192_fu_177_p1.read()));
}

void myproject::thread_rhs_V_1_fu_307_p1() {
    rhs_V_1_fu_307_p1 = esl_sext<9,8>(p_Val2_2_fu_167_p4.read());
}

void myproject::thread_rhs_V_fu_272_p3() {
    rhs_V_fu_272_p3 = esl_concat<8,5>(tmp_1_fu_258_p4.read(), ap_const_lv5_0);
}

void myproject::thread_sext_ln1192_1_fu_325_p1() {
    sext_ln1192_1_fu_325_p1 = esl_sext<12,11>(lhs_V_1_fu_317_p3.read());
}

void myproject::thread_sext_ln1192_fu_177_p1() {
    sext_ln1192_fu_177_p1 = esl_sext<9,8>(p_Val2_1_fu_157_p4.read());
}

void myproject::thread_sext_ln700_1_fu_205_p1() {
    sext_ln700_1_fu_205_p1 = esl_sext<13,11>(tmp_fu_197_p3.read());
}

void myproject::thread_sext_ln700_2_fu_223_p1() {
    sext_ln700_2_fu_223_p1 = esl_sext<18,17>(tmp_2_fu_215_p3.read());
}

void myproject::thread_sext_ln700_fu_193_p1() {
    sext_ln700_fu_193_p1 = esl_sext<13,9>(add_ln1192_fu_187_p2.read());
}

void myproject::thread_sext_ln703_fu_268_p1() {
    sext_ln703_fu_268_p1 = esl_sext<14,13>(lhs_V_2_fu_250_p3.read());
}

void myproject::thread_sext_ln728_fu_280_p1() {
    sext_ln728_fu_280_p1 = esl_sext<14,13>(rhs_V_fu_272_p3.read());
}

void myproject::thread_shl_ln1_fu_335_p3() {
    shl_ln1_fu_335_p3 = esl_concat<12,2>(add_ln1192_4_fu_329_p2.read(), ap_const_lv2_0);
}

void myproject::thread_tmp_1_fu_258_p4() {
    tmp_1_fu_258_p4 = x_V_in_sig.read().range(23, 16);
}

void myproject::thread_tmp_2_fu_215_p3() {
    tmp_2_fu_215_p3 = esl_concat<13,4>(add_ln700_fu_209_p2.read(), ap_const_lv4_0);
}

void myproject::thread_tmp_fu_197_p3() {
    tmp_fu_197_p3 = esl_concat<9,2>(add_ln1192_fu_187_p2.read(), ap_const_lv2_0);
}

void myproject::thread_x_V_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, x_V_ap_vld.read())) {
        x_V_ap_vld_in_sig = x_V_ap_vld.read();
    } else {
        x_V_ap_vld_in_sig = x_V_ap_vld_preg.read();
    }
}

void myproject::thread_x_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        x_V_blk_n = x_V_ap_vld.read();
    } else {
        x_V_blk_n = ap_const_logic_1;
    }
}

void myproject::thread_x_V_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, x_V_ap_vld.read())) {
        x_V_in_sig = x_V.read();
    } else {
        x_V_in_sig = x_V_preg.read();
    }
}

void myproject::thread_y_0_V() {
    y_0_V = ret_V_1_fu_227_p2.read().range(17, 10);
}

void myproject::thread_y_0_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_V_ap_vld_in_sig.read())))) {
        y_0_V_ap_vld = ap_const_logic_1;
    } else {
        y_0_V_ap_vld = ap_const_logic_0;
    }
}

void myproject::thread_y_1_V() {
    y_1_V = ap_const_lv8_1;
}

void myproject::thread_y_1_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_V_ap_vld_in_sig.read())))) {
        y_1_V_ap_vld = ap_const_logic_1;
    } else {
        y_1_V_ap_vld = ap_const_logic_0;
    }
}

void myproject::thread_y_2_V() {
    y_2_V = ret_V_3_fu_290_p2.read().range(13, 6);
}

void myproject::thread_y_2_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_V_ap_vld_in_sig.read())))) {
        y_2_V_ap_vld = ap_const_logic_1;
    } else {
        y_2_V_ap_vld = ap_const_logic_0;
    }
}

void myproject::thread_y_3_V() {
    y_3_V = ret_V_5_fu_343_p2.read().range(13, 6);
}

void myproject::thread_y_3_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_V_ap_vld_in_sig.read())))) {
        y_3_V_ap_vld = ap_const_logic_1;
    } else {
        y_3_V_ap_vld = ap_const_logic_0;
    }
}

void myproject::thread_y_4_V() {
    y_4_V = ap_const_lv8_FC;
}

void myproject::thread_y_4_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_V_ap_vld_in_sig.read())))) {
        y_4_V_ap_vld = ap_const_logic_1;
    } else {
        y_4_V_ap_vld = ap_const_logic_0;
    }
}

void myproject::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void myproject::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_V\" :  \"" << x_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_V_ap_vld\" :  \"" << x_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_0_V\" :  \"" << y_0_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_0_V_ap_vld\" :  \"" << y_0_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_1_V\" :  \"" << y_1_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_1_V_ap_vld\" :  \"" << y_1_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_2_V\" :  \"" << y_2_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_2_V_ap_vld\" :  \"" << y_2_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_3_V\" :  \"" << y_3_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_3_V_ap_vld\" :  \"" << y_3_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_4_V\" :  \"" << y_4_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_4_V_ap_vld\" :  \"" << y_4_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

