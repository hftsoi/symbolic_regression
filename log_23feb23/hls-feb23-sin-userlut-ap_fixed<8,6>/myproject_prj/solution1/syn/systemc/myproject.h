// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _myproject_HH_
#define _myproject_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct myproject : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<128> > x_V;
    sc_in< sc_logic > x_V_ap_vld;
    sc_out< sc_lv<8> > y_0_V;
    sc_out< sc_logic > y_0_V_ap_vld;
    sc_out< sc_lv<8> > y_1_V;
    sc_out< sc_logic > y_1_V_ap_vld;
    sc_out< sc_lv<8> > y_2_V;
    sc_out< sc_logic > y_2_V_ap_vld;
    sc_out< sc_lv<8> > y_3_V;
    sc_out< sc_logic > y_3_V_ap_vld;
    sc_out< sc_lv<8> > y_4_V;
    sc_out< sc_logic > y_4_V_ap_vld;


    // Module declarations
    myproject(sc_module_name name);
    SC_HAS_PROCESS(myproject);

    ~myproject();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<128> > x_V_preg;
    sc_signal< sc_lv<128> > x_V_in_sig;
    sc_signal< sc_logic > x_V_ap_vld_preg;
    sc_signal< sc_logic > x_V_ap_vld_in_sig;
    sc_signal< sc_logic > x_V_blk_n;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<8> > p_Val2_s_fu_143_p4;
    sc_signal< sc_lv<8> > p_Val2_1_fu_157_p4;
    sc_signal< sc_lv<9> > sext_ln1192_fu_177_p1;
    sc_signal< sc_lv<9> > ret_V_fu_181_p2;
    sc_signal< sc_lv<9> > add_ln1192_fu_187_p2;
    sc_signal< sc_lv<11> > tmp_fu_197_p3;
    sc_signal< sc_lv<13> > sext_ln700_1_fu_205_p1;
    sc_signal< sc_lv<13> > sext_ln700_fu_193_p1;
    sc_signal< sc_lv<13> > add_ln700_fu_209_p2;
    sc_signal< sc_lv<17> > tmp_2_fu_215_p3;
    sc_signal< sc_lv<18> > sext_ln700_2_fu_223_p1;
    sc_signal< sc_lv<18> > ret_V_1_fu_227_p2;
    sc_signal< sc_lv<9> > lhs_V_fu_153_p1;
    sc_signal< sc_lv<9> > r_V_fu_244_p2;
    sc_signal< sc_lv<13> > lhs_V_2_fu_250_p3;
    sc_signal< sc_lv<8> > tmp_1_fu_258_p4;
    sc_signal< sc_lv<13> > rhs_V_fu_272_p3;
    sc_signal< sc_lv<14> > sext_ln728_fu_280_p1;
    sc_signal< sc_lv<14> > sext_ln703_fu_268_p1;
    sc_signal< sc_lv<14> > ret_V_2_fu_284_p2;
    sc_signal< sc_lv<14> > ret_V_3_fu_290_p2;
    sc_signal< sc_lv<8> > p_Val2_2_fu_167_p4;
    sc_signal< sc_lv<9> > rhs_V_1_fu_307_p1;
    sc_signal< sc_lv<9> > ret_V_4_fu_311_p2;
    sc_signal< sc_lv<11> > lhs_V_1_fu_317_p3;
    sc_signal< sc_lv<12> > sext_ln1192_1_fu_325_p1;
    sc_signal< sc_lv<12> > add_ln1192_4_fu_329_p2;
    sc_signal< sc_lv<14> > shl_ln1_fu_335_p3;
    sc_signal< sc_lv<14> > ret_V_5_fu_343_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<128> ap_const_lv128_lc_1;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_FC;
    static const sc_lv<32> ap_const_lv32_70;
    static const sc_lv<32> ap_const_lv32_77;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_27;
    static const sc_lv<32> ap_const_lv32_78;
    static const sc_lv<32> ap_const_lv32_7F;
    static const sc_lv<9> ap_const_lv9_1FD;
    static const sc_lv<9> ap_const_lv9_F;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<18> ap_const_lv18_C00;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<14> ap_const_lv14_3E80;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<12> ap_const_lv12_FFD;
    static const sc_lv<14> ap_const_lv14_3FF0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln1192_4_fu_329_p2();
    void thread_add_ln1192_fu_187_p2();
    void thread_add_ln700_fu_209_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_lhs_V_1_fu_317_p3();
    void thread_lhs_V_2_fu_250_p3();
    void thread_lhs_V_fu_153_p1();
    void thread_p_Val2_1_fu_157_p4();
    void thread_p_Val2_2_fu_167_p4();
    void thread_p_Val2_s_fu_143_p4();
    void thread_r_V_fu_244_p2();
    void thread_ret_V_1_fu_227_p2();
    void thread_ret_V_2_fu_284_p2();
    void thread_ret_V_3_fu_290_p2();
    void thread_ret_V_4_fu_311_p2();
    void thread_ret_V_5_fu_343_p2();
    void thread_ret_V_fu_181_p2();
    void thread_rhs_V_1_fu_307_p1();
    void thread_rhs_V_fu_272_p3();
    void thread_sext_ln1192_1_fu_325_p1();
    void thread_sext_ln1192_fu_177_p1();
    void thread_sext_ln700_1_fu_205_p1();
    void thread_sext_ln700_2_fu_223_p1();
    void thread_sext_ln700_fu_193_p1();
    void thread_sext_ln703_fu_268_p1();
    void thread_sext_ln728_fu_280_p1();
    void thread_shl_ln1_fu_335_p3();
    void thread_tmp_1_fu_258_p4();
    void thread_tmp_2_fu_215_p3();
    void thread_tmp_fu_197_p3();
    void thread_x_V_ap_vld_in_sig();
    void thread_x_V_blk_n();
    void thread_x_V_in_sig();
    void thread_y_0_V();
    void thread_y_0_V_ap_vld();
    void thread_y_1_V();
    void thread_y_1_V_ap_vld();
    void thread_y_2_V();
    void thread_y_2_V_ap_vld();
    void thread_y_3_V();
    void thread_y_3_V_ap_vld();
    void thread_y_4_V();
    void thread_y_4_V_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
