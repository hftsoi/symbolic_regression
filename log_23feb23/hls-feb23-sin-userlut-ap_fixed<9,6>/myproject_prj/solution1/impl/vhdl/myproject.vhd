-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (143 downto 0);
    x_V_ap_vld : IN STD_LOGIC;
    y_0_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_0_V_ap_vld : OUT STD_LOGIC;
    y_1_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_1_V_ap_vld : OUT STD_LOGIC;
    y_2_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_2_V_ap_vld : OUT STD_LOGIC;
    y_3_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_3_V_ap_vld : OUT STD_LOGIC;
    y_4_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.330250,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=146,HLS_SYN_LUT=145,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv144_lc_1 : STD_LOGIC_VECTOR (143 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv9_1F7 : STD_LOGIC_VECTOR (8 downto 0) := "111110111";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv10_3F9 : STD_LOGIC_VECTOR (9 downto 0) := "1111111001";
    constant ap_const_lv10_1F : STD_LOGIC_VECTOR (9 downto 0) := "0000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv18_3E600 : STD_LOGIC_VECTOR (17 downto 0) := "111110011000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv24_18C0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001100011000000";
    constant ap_const_lv24_38000 : STD_LOGIC_VECTOR (23 downto 0) := "000000111000000000000000";
    constant ap_const_lv14_3FF9 : STD_LOGIC_VECTOR (13 downto 0) := "11111111111001";
    constant ap_const_lv18_3FFEA : STD_LOGIC_VECTOR (17 downto 0) := "111111111111101010";
    constant ap_const_lv18_4A0 : STD_LOGIC_VECTOR (17 downto 0) := "000000010010100000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_V_preg : STD_LOGIC_VECTOR (143 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal x_V_in_sig : STD_LOGIC_VECTOR (143 downto 0);
    signal x_V_ap_vld_preg : STD_LOGIC := '0';
    signal x_V_ap_vld_in_sig : STD_LOGIC;
    signal x_V_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal p_Val2_1_fu_157_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1192_fu_177_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_fu_181_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1192_fu_187_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_318_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_s_fu_147_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln1_fu_207_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_fu_215_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_fu_219_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_V_3_fu_225_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_fu_233_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_fu_247_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln728_fu_255_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln703_fu_243_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_2_fu_259_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_3_fu_265_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_2_fu_167_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_1_fu_286_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_V_fu_282_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_4_fu_290_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_V_1_fu_296_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_327_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_318_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_318_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_327_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_327_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);

    component myproject_mac_muladd_10s_14ns_19ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_ama_addmuladd_13s_4s_6s_12ns_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    myproject_mac_muladd_10s_14ns_19ns_24_1_1_U1 : component myproject_mac_muladd_10s_14ns_19ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 14,
        din2_WIDTH => 19,
        dout_WIDTH => 24)
    port map (
        din0 => add_ln1192_fu_187_p2,
        din1 => grp_fu_318_p1,
        din2 => grp_fu_318_p2,
        dout => grp_fu_318_p3);

    myproject_ama_addmuladd_13s_4s_6s_12ns_18_1_1_U2 : component myproject_ama_addmuladd_13s_4s_6s_12ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 4,
        din2_WIDTH => 6,
        din3_WIDTH => 12,
        dout_WIDTH => 18)
    port map (
        din0 => lhs_V_1_fu_296_p3,
        din1 => grp_fu_327_p1,
        din2 => grp_fu_327_p2,
        din3 => grp_fu_327_p3,
        dout => grp_fu_327_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    x_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    x_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_ap_vld_preg <= x_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_V_preg <= ap_const_lv144_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_V_ap_vld = ap_const_logic_1))) then 
                    x_V_preg <= x_V;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, x_V_ap_vld_in_sig)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1192_fu_187_p2 <= std_logic_vector(unsigned(ret_V_fu_181_p2) + unsigned(ap_const_lv10_1F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, x_V_ap_vld_in_sig)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, x_V_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1, x_V_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_318_p1 <= ap_const_lv24_18C0(14 - 1 downto 0);
    grp_fu_318_p2 <= ap_const_lv24_38000(19 - 1 downto 0);
    grp_fu_327_p1 <= ap_const_lv14_3FF9(4 - 1 downto 0);
    grp_fu_327_p2 <= ap_const_lv18_3FFEA(6 - 1 downto 0);
    grp_fu_327_p3 <= ap_const_lv18_4A0(12 - 1 downto 0);
    lhs_V_1_fu_296_p3 <= (ret_V_4_fu_290_p2 & ap_const_lv3_0);
    lhs_V_3_fu_225_p3 <= (r_V_fu_219_p2 & ap_const_lv6_0);
        lhs_V_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_fu_147_p4),10));

    p_Val2_1_fu_157_p4 <= x_V_in_sig(44 downto 36);
    p_Val2_2_fu_167_p4 <= x_V_in_sig(143 downto 135);
    p_Val2_s_fu_147_p4 <= x_V_in_sig(134 downto 126);
    r_V_fu_219_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(sext_ln1118_fu_215_p1));
    ret_V_2_fu_259_p2 <= std_logic_vector(signed(sext_ln728_fu_255_p1) + signed(sext_ln703_fu_243_p1));
    ret_V_3_fu_265_p2 <= std_logic_vector(unsigned(ret_V_2_fu_259_p2) + unsigned(ap_const_lv18_3E600));
    ret_V_4_fu_290_p2 <= std_logic_vector(signed(rhs_V_1_fu_286_p1) + signed(lhs_V_fu_282_p1));
    ret_V_fu_181_p2 <= std_logic_vector(signed(ap_const_lv10_3F9) - signed(sext_ln1192_fu_177_p1));
        rhs_V_1_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_fu_167_p4),10));

    rhs_V_fu_247_p3 <= (tmp_5_fu_233_p4 & ap_const_lv8_0);
        sext_ln1118_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_fu_207_p3),11));

        sext_ln1192_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_fu_157_p4),10));

        sext_ln703_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_3_fu_225_p3),18));

        sext_ln728_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_247_p3),18));

    shl_ln1_fu_207_p3 <= (p_Val2_s_fu_147_p4 & ap_const_lv1_0);
    tmp_5_fu_233_p4 <= x_V_in_sig(26 downto 18);

    x_V_ap_vld_in_sig_assign_proc : process(x_V_ap_vld, x_V_ap_vld_preg)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_ap_vld_in_sig <= x_V_ap_vld;
        else 
            x_V_ap_vld_in_sig <= x_V_ap_vld_preg;
        end if; 
    end process;


    x_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, x_V_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_V_blk_n <= x_V_ap_vld;
        else 
            x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_in_sig_assign_proc : process(x_V, x_V_preg, x_V_ap_vld)
    begin
        if ((x_V_ap_vld = ap_const_logic_1)) then 
            x_V_in_sig <= x_V;
        else 
            x_V_in_sig <= x_V_preg;
        end if; 
    end process;

    y_0_V <= grp_fu_318_p3(23 downto 15);

    y_0_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, x_V_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_0_V_ap_vld <= ap_const_logic_1;
        else 
            y_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_V <= ap_const_lv9_3;

    y_1_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, x_V_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_1_V_ap_vld <= ap_const_logic_1;
        else 
            y_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_2_V <= ret_V_3_fu_265_p2(17 downto 9);

    y_2_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, x_V_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_2_V_ap_vld <= ap_const_logic_1;
        else 
            y_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_3_V <= grp_fu_327_p4(17 downto 9);

    y_3_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, x_V_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_3_V_ap_vld <= ap_const_logic_1;
        else 
            y_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_4_V <= ap_const_lv9_1F7;

    y_4_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, x_V_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (x_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_4_V_ap_vld <= ap_const_logic_1;
        else 
            y_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
