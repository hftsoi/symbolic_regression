-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sin_lut_ap_fixed_9_6_5_3_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    input_V : IN STD_LOGIC_VECTOR (8 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (4 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of sin_lut_ap_fixed_9_6_5_3_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_3FC0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FD8000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111011000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FE4000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100100000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FEC000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111101100000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv29_1FFFFFFF : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111111111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv24_28BE : STD_LOGIC_VECTOR (23 downto 0) := "000000000010100010111110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal p_Val2_14_reg_621 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_Val2_14_reg_621_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_14_reg_621_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_s_fu_141_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_s_reg_636 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln893_fu_165_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_641 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln894_fu_169_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_277_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_652 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln908_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_reg_657 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln729_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln924_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln924_reg_670 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal r_V_fu_613_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_12_fu_150_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_157_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_185_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_fu_201_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln897_fu_205_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln897_fu_211_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln897_fu_215_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_4_fu_221_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln897_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_1_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_238_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln894_fu_175_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln899_fu_252_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_3_fu_258_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln899_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln907_1_fu_294_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln908_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln908_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln908_fu_312_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_1_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln908_fu_321_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_327_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_337_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_s_fu_343_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal sub_ln915_fu_365_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_357_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln915_fu_370_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln915_fu_376_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_11_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_384_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_13_fu_392_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_412_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln924_1_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln142_fu_440_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_445_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln879_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln141_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln141_1_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln141_3_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln142_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln142_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln141_2_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln151_1_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln151_1_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln885_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln152_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln152_1_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln151_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln152_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln142_1_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln141_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln143_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln151_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln151_fu_555_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln151_1_fu_569_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln151_2_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln151_3_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln151_3_fu_591_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln151_2_fu_583_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_fu_613_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_108_ce : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_113_ce : STD_LOGIC;
    signal grp_fu_118_ce : STD_LOGIC;
    signal grp_fu_123_ce : STD_LOGIC;
    signal select_ln151_4_fu_605_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal input_V_int_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (4 downto 0);

    component myproject_dcmp_64ns_64ns_1_2_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component myproject_mul_mul_15ns_9s_24_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    myproject_dcmp_64ns_64ns_1_2_0_U1 : component myproject_dcmp_64ns_64ns_1_2_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln729_fu_404_p1,
        din1 => ap_const_lv64_3FC0000000000000,
        ce => grp_fu_108_ce,
        opcode => ap_const_lv5_1,
        dout => grp_fu_108_p2);

    myproject_dcmp_64ns_64ns_1_2_0_U2 : component myproject_dcmp_64ns_64ns_1_2_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln729_fu_404_p1,
        din1 => ap_const_lv64_3FD8000000000000,
        ce => grp_fu_113_ce,
        opcode => ap_const_lv5_1,
        dout => grp_fu_113_p2);

    myproject_dcmp_64ns_64ns_1_2_0_U3 : component myproject_dcmp_64ns_64ns_1_2_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln729_fu_404_p1,
        din1 => ap_const_lv64_3FE4000000000000,
        ce => grp_fu_118_ce,
        opcode => ap_const_lv5_1,
        dout => grp_fu_118_p2);

    myproject_dcmp_64ns_64ns_1_2_0_U4 : component myproject_dcmp_64ns_64ns_1_2_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln729_fu_404_p1,
        din1 => ap_const_lv64_3FEC000000000000,
        ce => grp_fu_123_ce,
        opcode => ap_const_lv5_1,
        dout => grp_fu_123_p2);

    myproject_mul_mul_15ns_9s_24_1_0_U5 : component myproject_mul_mul_15ns_9s_24_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 9,
        dout_WIDTH => 24)
    port map (
        din0 => r_V_fu_613_p0,
        din1 => input_V_int_reg,
        dout => r_V_fu_613_p2);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= select_ln151_4_fu_605_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln908_reg_657 <= icmp_ln908_fu_285_p2;
                or_ln924_reg_670 <= or_ln924_fu_434_p2;
                    or_ln_reg_652(0) <= or_ln_fu_277_p3(0);
                p_Result_s_reg_636 <= p_Result_s_fu_141_p4;
                p_Val2_14_reg_621 <= r_V_fu_613_p2(18 downto 16);
                p_Val2_14_reg_621_pp0_iter1_reg <= p_Val2_14_reg_621;
                p_Val2_14_reg_621_pp0_iter2_reg <= p_Val2_14_reg_621_pp0_iter1_reg;
                sub_ln894_reg_646 <= sub_ln894_fu_169_p2;
                trunc_ln893_reg_641 <= trunc_ln893_fu_165_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                input_V_int_reg <= input_V;
            end if;
        end if;
    end process;
    or_ln_reg_652(31 downto 1) <= "0000000000000000000000000000000";
    a_fu_232_p2 <= (icmp_ln897_fu_195_p2 and icmp_ln897_1_fu_226_p2);
    add_ln142_fu_440_p2 <= std_logic_vector(signed(ap_const_lv3_7) + signed(p_Val2_14_reg_621_pp0_iter2_reg));
    add_ln899_fu_252_p2 <= std_logic_vector(unsigned(ap_const_lv3_3) + unsigned(trunc_ln894_fu_175_p1));
    add_ln908_fu_297_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCA) + signed(sub_ln894_reg_646));
    add_ln915_fu_370_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(sub_ln915_fu_365_p2));
    and_ln142_1_fu_509_p2 <= (icmp_ln141_2_fu_493_p2 and and_ln142_fu_503_p2);
    and_ln142_fu_503_p2 <= (icmp_ln142_fu_455_p2 and icmp_ln141_3_fu_498_p2);
    and_ln151_1_fu_527_p2 <= (or_ln924_reg_670 and or_ln151_1_fu_521_p2);
    and_ln151_fu_532_p2 <= (xor_ln885_fu_515_p2 and and_ln151_1_fu_527_p2);
    and_ln152_1_fu_544_p2 <= (or_ln924_reg_670 and or_ln152_fu_538_p2);
    and_ln152_fu_549_p2 <= (xor_ln885_fu_515_p2 and and_ln152_1_fu_544_p2);
    and_ln899_fu_265_p2 <= (xor_ln899_fu_246_p2 and p_Result_3_fu_258_p3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(select_ln151_4_fu_605_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= select_ln151_4_fu_605_p3;
        end if; 
    end process;

    bitcast_ln729_fu_404_p1 <= p_Result_13_fu_392_p5;

    grp_fu_108_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_logic_1 = ap_ce_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_108_ce <= ap_const_logic_1;
        else 
            grp_fu_108_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_113_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_logic_1 = ap_ce_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_113_ce <= ap_const_logic_1;
        else 
            grp_fu_113_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_118_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_logic_1 = ap_ce_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_118_ce <= ap_const_logic_1;
        else 
            grp_fu_118_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_123_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_logic_1 = ap_ce_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_123_ce <= ap_const_logic_1;
        else 
            grp_fu_123_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln141_1_fu_482_p2 <= "1" when (p_Val2_14_reg_621_pp0_iter2_reg = ap_const_lv3_0) else "0";
    icmp_ln141_2_fu_493_p2 <= "0" when (p_Val2_14_reg_621_pp0_iter2_reg = ap_const_lv3_3) else "1";
    icmp_ln141_3_fu_498_p2 <= "0" when (p_Val2_14_reg_621_pp0_iter2_reg = ap_const_lv3_0) else "1";
    icmp_ln141_fu_477_p2 <= "1" when (p_Val2_14_reg_621_pp0_iter2_reg = ap_const_lv3_3) else "0";
    icmp_ln142_fu_455_p2 <= "1" when (tmp_5_fu_445_p4 = ap_const_lv2_0) else "0";
    icmp_ln879_1_fu_466_p2 <= "1" when (p_Val2_14_reg_621_pp0_iter2_reg = ap_const_lv3_4) else "0";
    icmp_ln879_fu_461_p2 <= "1" when (p_Val2_14_reg_621_pp0_iter2_reg = ap_const_lv3_7) else "0";
    icmp_ln897_1_fu_226_p2 <= "0" when (p_Result_4_fu_221_p2 = ap_const_lv3_0) else "1";
    icmp_ln897_fu_195_p2 <= "1" when (signed(tmp_6_fu_185_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln908_fu_285_p2 <= "1" when (signed(lsb_index_fu_179_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln924_1_fu_428_p2 <= "1" when (trunc_ln3_fu_412_p4 = ap_const_lv52_0) else "0";
    icmp_ln924_fu_422_p2 <= "0" when (select_ln915_fu_376_p3 = ap_const_lv11_7FF) else "1";
    
    l_fu_157_p3_proc : process(p_Result_12_fu_150_p3)
    begin
        l_fu_157_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_12_fu_150_p3(i) = '1' then
                l_fu_157_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_179_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCB) + signed(sub_ln894_fu_169_p2));
    lshr_ln897_fu_215_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv3_7),to_integer(unsigned('0' & zext_ln897_fu_211_p1(3-1 downto 0)))));
    lshr_ln908_fu_302_p2 <= std_logic_vector(shift_right(unsigned(zext_ln907_1_fu_294_p1),to_integer(unsigned('0' & add_ln908_fu_297_p2(31-1 downto 0)))));
    m_11_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_fu_343_p4),64));
    m_1_fu_327_p3 <= 
        zext_ln908_fu_308_p1 when (icmp_ln908_reg_657(0) = '1') else 
        shl_ln908_fu_321_p2;
    m_2_fu_337_p2 <= std_logic_vector(unsigned(zext_ln911_fu_334_p1) + unsigned(m_1_fu_327_p3));
    m_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_14_reg_621_pp0_iter1_reg),64));
    m_s_fu_343_p4 <= m_2_fu_337_p2(63 downto 1);
    or_ln141_fu_487_p2 <= (icmp_ln141_fu_477_p2 or icmp_ln141_1_fu_482_p2);
    or_ln143_fu_471_p2 <= (icmp_ln879_fu_461_p2 or icmp_ln879_1_fu_466_p2);
    or_ln151_1_fu_521_p2 <= (grp_fu_113_p2 or grp_fu_108_p2);
    or_ln151_2_fu_577_p2 <= (or_ln141_fu_487_p2 or and_ln142_1_fu_509_p2);
    or_ln151_3_fu_599_p2 <= (or_ln151_fu_563_p2 or or_ln151_2_fu_577_p2);
    or_ln151_fu_563_p2 <= (and_ln152_fu_549_p2 or and_ln151_fu_532_p2);
    or_ln152_fu_538_p2 <= (grp_fu_123_p2 or grp_fu_118_p2);
    or_ln899_fu_271_p2 <= (and_ln899_fu_265_p2 or a_fu_232_p2);
    or_ln924_fu_434_p2 <= (icmp_ln924_fu_422_p2 or icmp_ln924_1_fu_428_p2);
    or_ln_fu_277_p3 <= (ap_const_lv31_0 & or_ln899_fu_271_p2);
    p_Result_12_fu_150_p3 <= (ap_const_lv29_1FFFFFFF & p_Result_s_reg_636);
    p_Result_13_fu_392_p5 <= (tmp_1_fu_384_p3 & m_11_fu_353_p1(51 downto 0));
    p_Result_3_fu_258_p3 <= p_Val2_14_reg_621(to_integer(unsigned(add_ln899_fu_252_p2)) downto to_integer(unsigned(add_ln899_fu_252_p2))) when (to_integer(unsigned(add_ln899_fu_252_p2))>= 0 and to_integer(unsigned(add_ln899_fu_252_p2))<=2) else "-";
    p_Result_4_fu_221_p2 <= (p_Val2_14_reg_621 and lshr_ln897_fu_215_p2);
    
    p_Result_s_fu_141_p4_proc : process(r_V_fu_613_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable p_Result_s_fu_141_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_12(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_10(5 - 1 downto 0);
        v0_cpy := r_V_fu_613_p2;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_10(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_12(5-1 downto 0)));
            for p_Result_s_fu_141_p4_i in 0 to 24-1 loop
                v0_cpy(p_Result_s_fu_141_p4_i) := r_V_fu_613_p2(24-1-p_Result_s_fu_141_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(24-1 downto 0)))));
        res_mask := res_mask(24-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_141_p4 <= resvalue(3-1 downto 0);
    end process;

    r_V_fu_613_p0 <= ap_const_lv24_28BE(15 - 1 downto 0);
    select_ln151_1_fu_569_p3 <= 
        ap_const_lv5_8 when (and_ln142_1_fu_509_p2(0) = '1') else 
        ap_const_lv5_0;
    select_ln151_2_fu_583_p3 <= 
        ap_const_lv5_0 when (or_ln143_fu_471_p2(0) = '1') else 
        ap_const_lv5_18;
    select_ln151_3_fu_591_p3 <= 
        select_ln151_fu_555_p3 when (or_ln151_fu_563_p2(0) = '1') else 
        select_ln151_1_fu_569_p3;
    select_ln151_4_fu_605_p3 <= 
        select_ln151_3_fu_591_p3 when (or_ln151_3_fu_599_p2(0) = '1') else 
        select_ln151_2_fu_583_p3;
    select_ln151_fu_555_p3 <= 
        ap_const_lv5_5 when (and_ln151_fu_532_p2(0) = '1') else 
        ap_const_lv5_1A;
    select_ln915_fu_376_p3 <= 
        add_ln915_fu_370_p2 when (tmp_8_fu_357_p3(0) = '1') else 
        sub_ln915_fu_365_p2;
    shl_ln908_fu_321_p2 <= std_logic_vector(shift_left(unsigned(m_fu_291_p1),to_integer(unsigned('0' & zext_ln908_1_fu_317_p1(31-1 downto 0)))));
    sub_ln894_fu_169_p2 <= std_logic_vector(unsigned(ap_const_lv32_3) - unsigned(l_fu_157_p3));
    sub_ln897_fu_205_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) - unsigned(trunc_ln897_fu_201_p1));
    sub_ln908_fu_312_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_reg_646));
    sub_ln915_fu_365_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FE) - unsigned(trunc_ln893_reg_641));
    tmp_1_fu_384_p3 <= (ap_const_lv1_0 & select_ln915_fu_376_p3);
    tmp_5_fu_445_p4 <= add_ln142_fu_440_p2(2 downto 1);
    tmp_6_fu_185_p4 <= lsb_index_fu_179_p2(31 downto 1);
    tmp_7_fu_238_p3 <= lsb_index_fu_179_p2(31 downto 31);
    tmp_8_fu_357_p3 <= m_2_fu_337_p2(54 downto 54);
    trunc_ln3_fu_412_p4 <= m_2_fu_337_p2(52 downto 1);
    trunc_ln893_fu_165_p1 <= l_fu_157_p3(11 - 1 downto 0);
    trunc_ln894_fu_175_p1 <= sub_ln894_fu_169_p2(3 - 1 downto 0);
    trunc_ln897_fu_201_p1 <= sub_ln894_fu_169_p2(2 - 1 downto 0);
    xor_ln885_fu_515_p2 <= (icmp_ln141_1_fu_482_p2 xor ap_const_lv1_1);
    xor_ln899_fu_246_p2 <= (tmp_7_fu_238_p3 xor ap_const_lv1_1);
    zext_ln897_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_fu_205_p2),3));
    zext_ln907_1_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_14_reg_621_pp0_iter1_reg),32));
    zext_ln908_1_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln908_fu_312_p2),64));
    zext_ln908_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln908_fu_302_p2),64));
    zext_ln911_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_652),64));
end behav;
