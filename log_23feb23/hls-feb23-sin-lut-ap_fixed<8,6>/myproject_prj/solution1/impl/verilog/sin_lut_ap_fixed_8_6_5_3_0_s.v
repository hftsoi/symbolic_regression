// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sin_lut_ap_fixed_8_6_5_3_0_s (
        ap_clk,
        ap_rst,
        input_V,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [7:0] input_V;
output  [3:0] ap_return;
input   ap_ce;

reg[3:0] ap_return;

reg   [1:0] p_Val2_9_reg_503;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [1:0] p_Val2_9_reg_503_pp0_iter1_reg;
reg   [1:0] p_Result_s_fu_118_p4;
reg   [1:0] p_Result_s_reg_512;
wire   [10:0] trunc_ln893_fu_142_p1;
reg   [10:0] trunc_ln893_reg_517;
wire   [31:0] sub_ln894_fu_146_p2;
reg   [31:0] sub_ln894_reg_522;
wire   [31:0] or_ln_fu_250_p3;
reg   [31:0] or_ln_reg_528;
wire   [0:0] icmp_ln908_fu_258_p2;
reg   [0:0] icmp_ln908_reg_533;
wire   [0:0] icmp_ln1498_fu_264_p2;
reg   [0:0] icmp_ln1498_reg_538;
wire   [63:0] bitcast_ln729_fu_382_p1;
wire   [0:0] or_ln924_fu_411_p2;
reg   [0:0] or_ln924_reg_552;
wire    ap_block_pp0_stage0;
wire  signed [22:0] r_V_fu_495_p2;
wire   [31:0] p_Result_10_fu_127_p3;
reg   [31:0] l_fu_134_p3;
wire   [31:0] lsb_index_fu_156_p2;
wire   [30:0] tmp_4_fu_162_p4;
wire   [1:0] trunc_ln897_fu_178_p1;
wire   [1:0] sub_ln897_fu_182_p2;
wire   [1:0] lshr_ln897_fu_188_p2;
wire   [1:0] p_Result_2_fu_194_p2;
wire   [0:0] icmp_ln897_fu_172_p2;
wire   [0:0] icmp_ln897_1_fu_199_p2;
wire   [0:0] tmp_5_fu_211_p3;
wire   [1:0] trunc_ln894_fu_152_p1;
wire   [1:0] add_ln899_fu_225_p2;
wire   [0:0] p_Result_3_fu_231_p3;
wire   [0:0] xor_ln899_fu_219_p2;
wire   [0:0] and_ln899_fu_238_p2;
wire   [0:0] a_fu_205_p2;
wire   [0:0] or_ln899_fu_244_p2;
wire   [31:0] zext_ln907_1_fu_272_p1;
wire   [31:0] add_ln908_fu_275_p2;
wire   [31:0] lshr_ln908_fu_280_p2;
wire   [31:0] sub_ln908_fu_290_p2;
wire   [63:0] m_fu_269_p1;
wire   [63:0] zext_ln908_1_fu_295_p1;
wire   [63:0] zext_ln908_fu_286_p1;
wire   [63:0] shl_ln908_fu_299_p2;
wire   [63:0] zext_ln911_fu_312_p1;
wire   [63:0] m_1_fu_305_p3;
wire   [63:0] m_2_fu_315_p2;
wire   [62:0] m_9_fu_321_p4;
wire   [10:0] sub_ln915_fu_343_p2;
wire   [0:0] tmp_6_fu_335_p3;
wire   [10:0] add_ln915_fu_348_p2;
wire   [10:0] select_ln915_fu_354_p3;
wire   [63:0] m_10_fu_331_p1;
wire   [11:0] tmp_1_fu_362_p3;
wire   [63:0] p_Result_11_fu_370_p5;
wire   [51:0] trunc_ln3_fu_389_p4;
wire   [0:0] icmp_ln924_1_fu_405_p2;
wire   [0:0] icmp_ln924_fu_399_p2;
wire   [0:0] grp_fu_90_p2;
wire   [0:0] grp_fu_95_p2;
wire   [0:0] grp_fu_100_p2;
wire   [0:0] and_ln924_fu_417_p2;
wire   [0:0] or_ln924_1_fu_432_p2;
wire   [0:0] and_ln924_1_fu_422_p2;
wire   [0:0] xor_ln924_fu_437_p2;
wire   [0:0] or_ln924_2_fu_449_p2;
wire   [0:0] and_ln924_2_fu_427_p2;
wire   [0:0] xor_ln924_1_fu_455_p2;
wire   [0:0] and_ln924_4_fu_461_p2;
wire   [0:0] and_ln924_3_fu_443_p2;
wire   [0:0] or_ln1498_fu_474_p2;
wire   [3:0] select_ln1498_fu_467_p3;
wire   [3:0] select_ln1498_1_fu_479_p3;
wire   [14:0] r_V_fu_495_p0;
reg    grp_fu_90_ce;
wire    ap_block_pp0_stage0_00001;
reg    grp_fu_95_ce;
reg    grp_fu_100_ce;
wire   [3:0] select_ln1498_2_fu_487_p3;
reg    ap_ce_reg;
reg  signed [7:0] input_V_int_reg;
reg   [3:0] ap_return_int_reg;

myproject_dcmp_64ns_64ns_1_2_0 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
myproject_dcmp_64ns_64ns_1_2_0_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln729_fu_382_p1),
    .din1(64'd4598175219545276416),
    .ce(grp_fu_90_ce),
    .opcode(5'd1),
    .dout(grp_fu_90_p2)
);

myproject_dcmp_64ns_64ns_1_2_0 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
myproject_dcmp_64ns_64ns_1_2_0_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln729_fu_382_p1),
    .din1(64'd4602678819172646912),
    .ce(grp_fu_95_ce),
    .opcode(5'd1),
    .dout(grp_fu_95_p2)
);

myproject_dcmp_64ns_64ns_1_2_0 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
myproject_dcmp_64ns_64ns_1_2_0_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln729_fu_382_p1),
    .din1(64'd4604930618986332160),
    .ce(grp_fu_100_ce),
    .opcode(5'd1),
    .dout(grp_fu_100_p2)
);

myproject_mul_mul_15ns_8s_23_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 23 ))
myproject_mul_mul_15ns_8s_23_1_0_U4(
    .din0(r_V_fu_495_p0),
    .din1(input_V_int_reg),
    .dout(r_V_fu_495_p2)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg[3 : 2] <= select_ln1498_2_fu_487_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln1498_reg_538 <= icmp_ln1498_fu_264_p2;
        icmp_ln908_reg_533 <= icmp_ln908_fu_258_p2;
        or_ln924_reg_552 <= or_ln924_fu_411_p2;
        or_ln_reg_528[0] <= or_ln_fu_250_p3[0];
        p_Result_s_reg_512 <= p_Result_s_fu_118_p4;
        p_Val2_9_reg_503 <= {{r_V_fu_495_p2[17:16]}};
        p_Val2_9_reg_503_pp0_iter1_reg <= p_Val2_9_reg_503;
        sub_ln894_reg_522 <= sub_ln894_fu_146_p2;
        trunc_ln893_reg_517 <= trunc_ln893_fu_142_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        input_V_int_reg <= input_V;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = select_ln1498_2_fu_487_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_100_ce = 1'b1;
    end else begin
        grp_fu_100_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_90_ce = 1'b1;
    end else begin
        grp_fu_90_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_95_ce = 1'b1;
    end else begin
        grp_fu_95_ce = 1'b0;
    end
end

assign a_fu_205_p2 = (icmp_ln897_fu_172_p2 & icmp_ln897_1_fu_199_p2);

assign add_ln899_fu_225_p2 = ($signed(2'd3) + $signed(trunc_ln894_fu_152_p1));

assign add_ln908_fu_275_p2 = ($signed(32'd4294967242) + $signed(sub_ln894_reg_522));

assign add_ln915_fu_348_p2 = (11'd1 + sub_ln915_fu_343_p2);

assign and_ln899_fu_238_p2 = (xor_ln899_fu_219_p2 & p_Result_3_fu_231_p3);

assign and_ln924_1_fu_422_p2 = (or_ln924_reg_552 & grp_fu_95_p2);

assign and_ln924_2_fu_427_p2 = (or_ln924_reg_552 & grp_fu_100_p2);

assign and_ln924_3_fu_443_p2 = (xor_ln924_fu_437_p2 & and_ln924_1_fu_422_p2);

assign and_ln924_4_fu_461_p2 = (xor_ln924_1_fu_455_p2 & and_ln924_2_fu_427_p2);

assign and_ln924_fu_417_p2 = (or_ln924_reg_552 & grp_fu_90_p2);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign bitcast_ln729_fu_382_p1 = p_Result_11_fu_370_p5;

assign icmp_ln1498_fu_264_p2 = ((p_Val2_9_reg_503_pp0_iter1_reg == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln897_1_fu_199_p2 = ((p_Result_2_fu_194_p2 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln897_fu_172_p2 = (($signed(tmp_4_fu_162_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln908_fu_258_p2 = (($signed(lsb_index_fu_156_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln924_1_fu_405_p2 = ((trunc_ln3_fu_389_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln924_fu_399_p2 = ((select_ln915_fu_354_p3 != 11'd2047) ? 1'b1 : 1'b0);


always @ (p_Result_10_fu_127_p3) begin
    if (p_Result_10_fu_127_p3[0] == 1'b1) begin
        l_fu_134_p3 = 32'd0;
    end else if (p_Result_10_fu_127_p3[1] == 1'b1) begin
        l_fu_134_p3 = 32'd1;
    end else if (p_Result_10_fu_127_p3[2] == 1'b1) begin
        l_fu_134_p3 = 32'd2;
    end else if (p_Result_10_fu_127_p3[3] == 1'b1) begin
        l_fu_134_p3 = 32'd3;
    end else if (p_Result_10_fu_127_p3[4] == 1'b1) begin
        l_fu_134_p3 = 32'd4;
    end else if (p_Result_10_fu_127_p3[5] == 1'b1) begin
        l_fu_134_p3 = 32'd5;
    end else if (p_Result_10_fu_127_p3[6] == 1'b1) begin
        l_fu_134_p3 = 32'd6;
    end else if (p_Result_10_fu_127_p3[7] == 1'b1) begin
        l_fu_134_p3 = 32'd7;
    end else if (p_Result_10_fu_127_p3[8] == 1'b1) begin
        l_fu_134_p3 = 32'd8;
    end else if (p_Result_10_fu_127_p3[9] == 1'b1) begin
        l_fu_134_p3 = 32'd9;
    end else if (p_Result_10_fu_127_p3[10] == 1'b1) begin
        l_fu_134_p3 = 32'd10;
    end else if (p_Result_10_fu_127_p3[11] == 1'b1) begin
        l_fu_134_p3 = 32'd11;
    end else if (p_Result_10_fu_127_p3[12] == 1'b1) begin
        l_fu_134_p3 = 32'd12;
    end else if (p_Result_10_fu_127_p3[13] == 1'b1) begin
        l_fu_134_p3 = 32'd13;
    end else if (p_Result_10_fu_127_p3[14] == 1'b1) begin
        l_fu_134_p3 = 32'd14;
    end else if (p_Result_10_fu_127_p3[15] == 1'b1) begin
        l_fu_134_p3 = 32'd15;
    end else if (p_Result_10_fu_127_p3[16] == 1'b1) begin
        l_fu_134_p3 = 32'd16;
    end else if (p_Result_10_fu_127_p3[17] == 1'b1) begin
        l_fu_134_p3 = 32'd17;
    end else if (p_Result_10_fu_127_p3[18] == 1'b1) begin
        l_fu_134_p3 = 32'd18;
    end else if (p_Result_10_fu_127_p3[19] == 1'b1) begin
        l_fu_134_p3 = 32'd19;
    end else if (p_Result_10_fu_127_p3[20] == 1'b1) begin
        l_fu_134_p3 = 32'd20;
    end else if (p_Result_10_fu_127_p3[21] == 1'b1) begin
        l_fu_134_p3 = 32'd21;
    end else if (p_Result_10_fu_127_p3[22] == 1'b1) begin
        l_fu_134_p3 = 32'd22;
    end else if (p_Result_10_fu_127_p3[23] == 1'b1) begin
        l_fu_134_p3 = 32'd23;
    end else if (p_Result_10_fu_127_p3[24] == 1'b1) begin
        l_fu_134_p3 = 32'd24;
    end else if (p_Result_10_fu_127_p3[25] == 1'b1) begin
        l_fu_134_p3 = 32'd25;
    end else if (p_Result_10_fu_127_p3[26] == 1'b1) begin
        l_fu_134_p3 = 32'd26;
    end else if (p_Result_10_fu_127_p3[27] == 1'b1) begin
        l_fu_134_p3 = 32'd27;
    end else if (p_Result_10_fu_127_p3[28] == 1'b1) begin
        l_fu_134_p3 = 32'd28;
    end else if (p_Result_10_fu_127_p3[29] == 1'b1) begin
        l_fu_134_p3 = 32'd29;
    end else if (p_Result_10_fu_127_p3[30] == 1'b1) begin
        l_fu_134_p3 = 32'd30;
    end else if (p_Result_10_fu_127_p3[31] == 1'b1) begin
        l_fu_134_p3 = 32'd31;
    end else begin
        l_fu_134_p3 = 32'd32;
    end
end

assign lsb_index_fu_156_p2 = ($signed(32'd4294967243) + $signed(sub_ln894_fu_146_p2));

assign lshr_ln897_fu_188_p2 = 2'd3 >> sub_ln897_fu_182_p2;

assign lshr_ln908_fu_280_p2 = zext_ln907_1_fu_272_p1 >> add_ln908_fu_275_p2;

assign m_10_fu_331_p1 = m_9_fu_321_p4;

assign m_1_fu_305_p3 = ((icmp_ln908_reg_533[0:0] === 1'b1) ? zext_ln908_fu_286_p1 : shl_ln908_fu_299_p2);

assign m_2_fu_315_p2 = (zext_ln911_fu_312_p1 + m_1_fu_305_p3);

assign m_9_fu_321_p4 = {{m_2_fu_315_p2[63:1]}};

assign m_fu_269_p1 = p_Val2_9_reg_503_pp0_iter1_reg;

assign or_ln1498_fu_474_p2 = (icmp_ln1498_reg_538 | and_ln924_4_fu_461_p2);

assign or_ln899_fu_244_p2 = (and_ln899_fu_238_p2 | a_fu_205_p2);

assign or_ln924_1_fu_432_p2 = (icmp_ln1498_reg_538 | and_ln924_fu_417_p2);

assign or_ln924_2_fu_449_p2 = (or_ln924_1_fu_432_p2 | and_ln924_1_fu_422_p2);

assign or_ln924_fu_411_p2 = (icmp_ln924_fu_399_p2 | icmp_ln924_1_fu_405_p2);

assign or_ln_fu_250_p3 = {{31'd0}, {or_ln899_fu_244_p2}};

assign p_Result_10_fu_127_p3 = {{30'd1073741823}, {p_Result_s_reg_512}};

assign p_Result_11_fu_370_p5 = {{tmp_1_fu_362_p3}, {m_10_fu_331_p1[51:0]}};

assign p_Result_2_fu_194_p2 = (p_Val2_9_reg_503 & lshr_ln897_fu_188_p2);

assign p_Result_3_fu_231_p3 = p_Val2_9_reg_503[add_ln899_fu_225_p2];

integer ap_tvar_int_0;

always @ (r_V_fu_495_p2) begin
    for (ap_tvar_int_0 = 2 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 17 - 16) begin
            p_Result_s_fu_118_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_118_p4[ap_tvar_int_0] = r_V_fu_495_p2[17 - ap_tvar_int_0];
        end
    end
end

assign r_V_fu_495_p0 = 23'd10430;

assign select_ln1498_1_fu_479_p3 = ((and_ln924_3_fu_443_p2[0:0] === 1'b1) ? 4'd0 : 4'd4);

assign select_ln1498_2_fu_487_p3 = ((or_ln1498_fu_474_p2[0:0] === 1'b1) ? select_ln1498_fu_467_p3 : select_ln1498_1_fu_479_p3);

assign select_ln1498_fu_467_p3 = ((icmp_ln1498_reg_538[0:0] === 1'b1) ? 4'd0 : 4'd12);

assign select_ln915_fu_354_p3 = ((tmp_6_fu_335_p3[0:0] === 1'b1) ? add_ln915_fu_348_p2 : sub_ln915_fu_343_p2);

assign shl_ln908_fu_299_p2 = m_fu_269_p1 << zext_ln908_1_fu_295_p1;

assign sub_ln894_fu_146_p2 = (32'd2 - l_fu_134_p3);

assign sub_ln897_fu_182_p2 = (2'd0 - trunc_ln897_fu_178_p1);

assign sub_ln908_fu_290_p2 = (32'd54 - sub_ln894_reg_522);

assign sub_ln915_fu_343_p2 = (11'd1022 - trunc_ln893_reg_517);

assign tmp_1_fu_362_p3 = {{1'd0}, {select_ln915_fu_354_p3}};

assign tmp_4_fu_162_p4 = {{lsb_index_fu_156_p2[31:1]}};

assign tmp_5_fu_211_p3 = lsb_index_fu_156_p2[32'd31];

assign tmp_6_fu_335_p3 = m_2_fu_315_p2[32'd54];

assign trunc_ln3_fu_389_p4 = {{m_2_fu_315_p2[52:1]}};

assign trunc_ln893_fu_142_p1 = l_fu_134_p3[10:0];

assign trunc_ln894_fu_152_p1 = sub_ln894_fu_146_p2[1:0];

assign trunc_ln897_fu_178_p1 = sub_ln894_fu_146_p2[1:0];

assign xor_ln899_fu_219_p2 = (tmp_5_fu_211_p3 ^ 1'd1);

assign xor_ln924_1_fu_455_p2 = (or_ln924_2_fu_449_p2 ^ 1'd1);

assign xor_ln924_fu_437_p2 = (or_ln924_1_fu_432_p2 ^ 1'd1);

assign zext_ln907_1_fu_272_p1 = p_Val2_9_reg_503_pp0_iter1_reg;

assign zext_ln908_1_fu_295_p1 = sub_ln908_fu_290_p2;

assign zext_ln908_fu_286_p1 = lshr_ln908_fu_280_p2;

assign zext_ln911_fu_312_p1 = or_ln_reg_528;

always @ (posedge ap_clk) begin
    or_ln_reg_528[31:1] <= 31'b0000000000000000000000000000000;
    ap_return_int_reg[1:0] <= 2'b00;
end

endmodule //sin_lut_ap_fixed_8_6_5_3_0_s
