// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sin_lut_ap_fixed_8_6_5_3_0_s_HH_
#define _sin_lut_ap_fixed_8_6_5_3_0_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "myproject_dcmp_64ns_64ns_1_2_0.h"
#include "myproject_mul_mul_15ns_8s_23_1_0.h"

namespace ap_rtl {

struct sin_lut_ap_fixed_8_6_5_3_0_s : public sc_module {
    // Port declarations 5
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<8> > input_V;
    sc_out< sc_lv<4> > ap_return;
    sc_in< sc_logic > ap_ce;
    sc_signal< sc_lv<64> > ap_var_for_const0;
    sc_signal< sc_lv<64> > ap_var_for_const2;
    sc_signal< sc_lv<64> > ap_var_for_const3;
    sc_signal< sc_lv<5> > ap_var_for_const1;


    // Module declarations
    sin_lut_ap_fixed_8_6_5_3_0_s(sc_module_name name);
    SC_HAS_PROCESS(sin_lut_ap_fixed_8_6_5_3_0_s);

    ~sin_lut_ap_fixed_8_6_5_3_0_s();

    sc_trace_file* mVcdFile;

    myproject_dcmp_64ns_64ns_1_2_0<1,2,64,64,1>* myproject_dcmp_64ns_64ns_1_2_0_U1;
    myproject_dcmp_64ns_64ns_1_2_0<1,2,64,64,1>* myproject_dcmp_64ns_64ns_1_2_0_U2;
    myproject_dcmp_64ns_64ns_1_2_0<1,2,64,64,1>* myproject_dcmp_64ns_64ns_1_2_0_U3;
    myproject_mul_mul_15ns_8s_23_1_0<1,1,15,8,23>* myproject_mul_mul_15ns_8s_23_1_0_U4;
    sc_signal< sc_lv<2> > p_Val2_9_reg_503;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<2> > p_Val2_9_reg_503_pp0_iter1_reg;
    sc_signal< sc_lv<2> > p_Result_s_fu_118_p4;
    sc_signal< sc_lv<2> > p_Result_s_reg_512;
    sc_signal< sc_lv<11> > trunc_ln893_fu_142_p1;
    sc_signal< sc_lv<11> > trunc_ln893_reg_517;
    sc_signal< sc_lv<32> > sub_ln894_fu_146_p2;
    sc_signal< sc_lv<32> > sub_ln894_reg_522;
    sc_signal< sc_lv<32> > or_ln_fu_250_p3;
    sc_signal< sc_lv<32> > or_ln_reg_528;
    sc_signal< sc_lv<1> > icmp_ln908_fu_258_p2;
    sc_signal< sc_lv<1> > icmp_ln908_reg_533;
    sc_signal< sc_lv<1> > icmp_ln1498_fu_264_p2;
    sc_signal< sc_lv<1> > icmp_ln1498_reg_538;
    sc_signal< sc_lv<64> > bitcast_ln729_fu_382_p1;
    sc_signal< sc_lv<1> > or_ln924_fu_411_p2;
    sc_signal< sc_lv<1> > or_ln924_reg_552;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<23> > r_V_fu_495_p2;
    sc_signal< sc_lv<32> > p_Result_10_fu_127_p3;
    sc_signal< sc_lv<32> > l_fu_134_p3;
    sc_signal< sc_lv<32> > lsb_index_fu_156_p2;
    sc_signal< sc_lv<31> > tmp_4_fu_162_p4;
    sc_signal< sc_lv<2> > trunc_ln897_fu_178_p1;
    sc_signal< sc_lv<2> > sub_ln897_fu_182_p2;
    sc_signal< sc_lv<2> > lshr_ln897_fu_188_p2;
    sc_signal< sc_lv<2> > p_Result_2_fu_194_p2;
    sc_signal< sc_lv<1> > icmp_ln897_fu_172_p2;
    sc_signal< sc_lv<1> > icmp_ln897_1_fu_199_p2;
    sc_signal< sc_lv<1> > tmp_5_fu_211_p3;
    sc_signal< sc_lv<2> > trunc_ln894_fu_152_p1;
    sc_signal< sc_lv<2> > add_ln899_fu_225_p2;
    sc_signal< sc_lv<1> > p_Result_3_fu_231_p3;
    sc_signal< sc_lv<1> > xor_ln899_fu_219_p2;
    sc_signal< sc_lv<1> > and_ln899_fu_238_p2;
    sc_signal< sc_lv<1> > a_fu_205_p2;
    sc_signal< sc_lv<1> > or_ln899_fu_244_p2;
    sc_signal< sc_lv<32> > zext_ln907_1_fu_272_p1;
    sc_signal< sc_lv<32> > add_ln908_fu_275_p2;
    sc_signal< sc_lv<32> > lshr_ln908_fu_280_p2;
    sc_signal< sc_lv<32> > sub_ln908_fu_290_p2;
    sc_signal< sc_lv<64> > m_fu_269_p1;
    sc_signal< sc_lv<64> > zext_ln908_1_fu_295_p1;
    sc_signal< sc_lv<64> > zext_ln908_fu_286_p1;
    sc_signal< sc_lv<64> > shl_ln908_fu_299_p2;
    sc_signal< sc_lv<64> > zext_ln911_fu_312_p1;
    sc_signal< sc_lv<64> > m_1_fu_305_p3;
    sc_signal< sc_lv<64> > m_2_fu_315_p2;
    sc_signal< sc_lv<63> > m_9_fu_321_p4;
    sc_signal< sc_lv<11> > sub_ln915_fu_343_p2;
    sc_signal< sc_lv<1> > tmp_6_fu_335_p3;
    sc_signal< sc_lv<11> > add_ln915_fu_348_p2;
    sc_signal< sc_lv<11> > select_ln915_fu_354_p3;
    sc_signal< sc_lv<64> > m_10_fu_331_p1;
    sc_signal< sc_lv<12> > tmp_1_fu_362_p3;
    sc_signal< sc_lv<64> > p_Result_11_fu_370_p5;
    sc_signal< sc_lv<52> > trunc_ln3_fu_389_p4;
    sc_signal< sc_lv<1> > icmp_ln924_1_fu_405_p2;
    sc_signal< sc_lv<1> > icmp_ln924_fu_399_p2;
    sc_signal< sc_lv<1> > grp_fu_90_p2;
    sc_signal< sc_lv<1> > grp_fu_95_p2;
    sc_signal< sc_lv<1> > grp_fu_100_p2;
    sc_signal< sc_lv<1> > and_ln924_fu_417_p2;
    sc_signal< sc_lv<1> > or_ln924_1_fu_432_p2;
    sc_signal< sc_lv<1> > and_ln924_1_fu_422_p2;
    sc_signal< sc_lv<1> > xor_ln924_fu_437_p2;
    sc_signal< sc_lv<1> > or_ln924_2_fu_449_p2;
    sc_signal< sc_lv<1> > and_ln924_2_fu_427_p2;
    sc_signal< sc_lv<1> > xor_ln924_1_fu_455_p2;
    sc_signal< sc_lv<1> > and_ln924_4_fu_461_p2;
    sc_signal< sc_lv<1> > and_ln924_3_fu_443_p2;
    sc_signal< sc_lv<1> > or_ln1498_fu_474_p2;
    sc_signal< sc_lv<4> > select_ln1498_fu_467_p3;
    sc_signal< sc_lv<4> > select_ln1498_1_fu_479_p3;
    sc_signal< sc_lv<15> > r_V_fu_495_p0;
    sc_signal< sc_logic > grp_fu_90_ce;
    sc_signal< bool > ap_block_pp0_stage0_00001;
    sc_signal< sc_logic > grp_fu_95_ce;
    sc_signal< sc_logic > grp_fu_100_ce;
    sc_signal< sc_lv<4> > select_ln1498_2_fu_487_p3;
    sc_signal< sc_logic > ap_ce_reg;
    sc_signal< sc_lv<8> > input_V_int_reg;
    sc_signal< sc_lv<4> > ap_return_int_reg;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<64> ap_const_lv64_3FD0000000000000;
    static const sc_lv<64> ap_const_lv64_3FE0000000000000;
    static const sc_lv<64> ap_const_lv64_3FE8000000000000;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<30> ap_const_lv30_3FFFFFFF;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_FFFFFFCB;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_FFFFFFCA;
    static const sc_lv<32> ap_const_lv32_36;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<11> ap_const_lv11_3FE;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_34;
    static const sc_lv<11> ap_const_lv11_7FF;
    static const sc_lv<52> ap_const_lv52_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_C;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<23> ap_const_lv23_28BE;
    static const sc_lv<5> ap_const_lv5_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_a_fu_205_p2();
    void thread_add_ln899_fu_225_p2();
    void thread_add_ln908_fu_275_p2();
    void thread_add_ln915_fu_348_p2();
    void thread_and_ln899_fu_238_p2();
    void thread_and_ln924_1_fu_422_p2();
    void thread_and_ln924_2_fu_427_p2();
    void thread_and_ln924_3_fu_443_p2();
    void thread_and_ln924_4_fu_461_p2();
    void thread_and_ln924_fu_417_p2();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_00001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_return();
    void thread_bitcast_ln729_fu_382_p1();
    void thread_grp_fu_100_ce();
    void thread_grp_fu_90_ce();
    void thread_grp_fu_95_ce();
    void thread_icmp_ln1498_fu_264_p2();
    void thread_icmp_ln897_1_fu_199_p2();
    void thread_icmp_ln897_fu_172_p2();
    void thread_icmp_ln908_fu_258_p2();
    void thread_icmp_ln924_1_fu_405_p2();
    void thread_icmp_ln924_fu_399_p2();
    void thread_l_fu_134_p3();
    void thread_lsb_index_fu_156_p2();
    void thread_lshr_ln897_fu_188_p2();
    void thread_lshr_ln908_fu_280_p2();
    void thread_m_10_fu_331_p1();
    void thread_m_1_fu_305_p3();
    void thread_m_2_fu_315_p2();
    void thread_m_9_fu_321_p4();
    void thread_m_fu_269_p1();
    void thread_or_ln1498_fu_474_p2();
    void thread_or_ln899_fu_244_p2();
    void thread_or_ln924_1_fu_432_p2();
    void thread_or_ln924_2_fu_449_p2();
    void thread_or_ln924_fu_411_p2();
    void thread_or_ln_fu_250_p3();
    void thread_p_Result_10_fu_127_p3();
    void thread_p_Result_11_fu_370_p5();
    void thread_p_Result_2_fu_194_p2();
    void thread_p_Result_3_fu_231_p3();
    void thread_p_Result_s_fu_118_p4();
    void thread_r_V_fu_495_p0();
    void thread_select_ln1498_1_fu_479_p3();
    void thread_select_ln1498_2_fu_487_p3();
    void thread_select_ln1498_fu_467_p3();
    void thread_select_ln915_fu_354_p3();
    void thread_shl_ln908_fu_299_p2();
    void thread_sub_ln894_fu_146_p2();
    void thread_sub_ln897_fu_182_p2();
    void thread_sub_ln908_fu_290_p2();
    void thread_sub_ln915_fu_343_p2();
    void thread_tmp_1_fu_362_p3();
    void thread_tmp_4_fu_162_p4();
    void thread_tmp_5_fu_211_p3();
    void thread_tmp_6_fu_335_p3();
    void thread_trunc_ln3_fu_389_p4();
    void thread_trunc_ln893_fu_142_p1();
    void thread_trunc_ln894_fu_152_p1();
    void thread_trunc_ln897_fu_178_p1();
    void thread_xor_ln899_fu_219_p2();
    void thread_xor_ln924_1_fu_455_p2();
    void thread_xor_ln924_fu_437_p2();
    void thread_zext_ln907_1_fu_272_p1();
    void thread_zext_ln908_1_fu_295_p1();
    void thread_zext_ln908_fu_286_p1();
    void thread_zext_ln911_fu_312_p1();
};

}

using namespace ap_rtl;

#endif
