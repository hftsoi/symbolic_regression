// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _operator_s_HH_
#define _operator_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "operator_s_sin_lut_samples_V.h"

namespace ap_rtl {

struct operator_s : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > ap_ce;
    sc_in< sc_lv<12> > n_V;
    sc_out< sc_lv<7> > ap_return;


    // Module declarations
    operator_s(sc_module_name name);
    SC_HAS_PROCESS(operator_s);

    ~operator_s();

    sc_trace_file* mVcdFile;

    operator_s_sin_lut_samples_V* sin_lut_samples_V_U;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > sin_lut_samples_V_address0;
    sc_signal< sc_logic > sin_lut_samples_V_ce0;
    sc_signal< sc_lv<7> > sin_lut_samples_V_q0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<64> > zext_ln57_fu_125_p1;
    sc_signal< sc_lv<13> > lhs_V_fu_45_p1;
    sc_signal< sc_lv<13> > ret_V_fu_49_p2;
    sc_signal< sc_lv<3> > tmp_1_fu_63_p4;
    sc_signal< sc_lv<1> > tmp_3_fu_79_p3;
    sc_signal< sc_lv<11> > tmp_2_fu_87_p4;
    sc_signal< sc_lv<12> > sext_ln55_fu_97_p1;
    sc_signal< sc_lv<12> > add_ln55_fu_101_p2;
    sc_signal< sc_lv<1> > tmp_fu_55_p3;
    sc_signal< sc_lv<1> > icmp_ln56_fu_73_p2;
    sc_signal< sc_lv<1> > or_ln55_fu_111_p2;
    sc_signal< sc_lv<13> > sext_ln55_1_fu_107_p1;
    sc_signal< sc_lv<13> > select_ln55_fu_117_p3;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<13> ap_const_lv13_200;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<12> ap_const_lv12_3FF;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln55_fu_101_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_return();
    void thread_icmp_ln56_fu_73_p2();
    void thread_lhs_V_fu_45_p1();
    void thread_or_ln55_fu_111_p2();
    void thread_ret_V_fu_49_p2();
    void thread_select_ln55_fu_117_p3();
    void thread_sext_ln55_1_fu_107_p1();
    void thread_sext_ln55_fu_97_p1();
    void thread_sin_lut_samples_V_address0();
    void thread_sin_lut_samples_V_ce0();
    void thread_tmp_1_fu_63_p4();
    void thread_tmp_2_fu_87_p4();
    void thread_tmp_3_fu_79_p3();
    void thread_tmp_fu_55_p3();
    void thread_zext_ln57_fu_125_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
